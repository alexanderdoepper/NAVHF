OBJECT Report 393 Suggest Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=05.04.13;
    Time=12:00:00;
    Version List=NAVW17.00.00.34587;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Zahlungsvorschlag;
               ENU=Suggest Vendor Payments];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  VendorLedgEntryTemp.DELETEALL;
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF CONFIRM(Text024) THEN
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.)
                                 WHERE(Blocked=FILTER(=' '));
               OnPreDataItem=BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF PostingDate = 0D THEN
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = BankPmtType::" ") OR
                                   SummarizePerVend) AND
                                  (NextDocNo = '')
                               THEN
                                 ERROR(Text002);

                               IF ((BankPmtType = BankPmtType::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(Text017,GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT CONFIRM(Text003,FALSE,WORKDATE) THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(VendorBalance);
                                  CALCFIELDS("Balance (LCY)");
                                  VendorBalance := "Balance (LCY)";

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  IF VendorBalance > 0 THEN BEGIN
                                    GetVendLedgEntries(TRUE,FALSE);
                                    GetVendLedgEntries(FALSE,FALSE);
                                    CheckAmounts(FALSE);
                                    ClearNegative;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      IF VendorBalance > 0 THEN BEGIN
                                        Window.UPDATE(1,"No.");
                                        GetVendLedgEntries(TRUE,FALSE);
                                        GetVendLedgEntries(FALSE,FALSE);
                                        CheckAmounts(FALSE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window2.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      Window2.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      IF VendorBalance > 0 THEN BEGIN
                                        GetVendLedgEntries(TRUE,TRUE);
                                        GetVendLedgEntries(FALSE,TRUE);
                                        CheckAmounts(TRUE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                  Window2.CLOSE;
                                END ELSE
                                  IF FIND('-') THEN
                                    REPEAT
                                      ClearNegative;
                                    UNTIL NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FINDLAST THEN BEGIN
                                  FirstLineNo := GenJnlLine."Line No.";
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window2.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SummarizePerDimTextEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[DEU=Zahlungen suchen;
                             ENU=Find Payments];
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=[DEU=Letztes FÑlligkeitsdatum;
                             ENU=Last Payment Date];
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;3   ;Field     ;
                  CaptionML=[DEU=Skonto finden;
                             ENU=Find Payment Discounts];
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes }

      { 3   ;3   ;Field     ;
                  Name=UseVendorPriority;
                  CaptionML=[DEU=KreditorenprioritÑt verwenden;
                             ENU=Use Vendor Priority];
                  SourceExpr=UsePriority;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 11  ;3   ;Field     ;
                  CaptionML=[DEU=VerfÅgbarer Betrag (MW);
                             ENU=Available Amount (LCY)];
                  SourceExpr=AmountAvailable;
                  OnValidate=BEGIN
                               IF AmountAvailable <> 0 THEN
                                 UsePriority := TRUE;
                             END;
                              }

      { 7   ;2   ;Group     ;
                  CaptionML=[DEU=Ergebnisse zusammenfassen;
                             ENU=Summarize Results];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerVendor;
                  CaptionML=[DEU=Pro Kreditor summieren;
                             ENU=Summarize per Vendor];
                  SourceExpr=SummarizePerVend }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=[DEU=Nach Dimension;
                             ENU=By Dimension];
                  SourceExpr=SummarizePerDimText;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Vendor Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  CaptionML=[DEU=Buchungsblattzeilen ausfÅllen;
                             ENU=Fill in Journal Lines];
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  CaptionML=[DEU=Buchungsdatum;
                             ENU=Posting Date];
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=[DEU=Start von Belegnr.;
                             ENU=Starting Document No.];
                  SourceExpr=NextDocNo;
                  OnValidate=BEGIN
                               IF NextDocNo <> '' THEN
                                 IF INCSTR(NextDocNo) = '' THEN
                                   ERROR(Text012);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  CaptionML=[DEU=Neue Belegnr. pro Zeile;
                             ENU=New Doc. No. per Line];
                  SourceExpr=DocNoPerLine;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text013);
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=[DEU=Gegenkontoart;
                             ENU=Bal. Account Type];
                  OptionCaptionML=[DEU=Sachkonto,,,Bankkonto;
                                   ENU=G/L Account,,,Bank Account];
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=[DEU=Gegenkontonr.;
                             ENU=Bal. Account No.];
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN
                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  CaptionML=[DEU=Bankkontozahlungsart;
                             ENU=Bank Payment Type];
                  OptionCaptionML=[DEU=" ,Computer Scheck,Manueller Scheck";
                                   ENU=" ,Computer Check,Manual Check"];
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Geben Sie im Feld ''Letztes FÑlligkeitsdatum'' das letzte mîgliche Zahlungsdatum an.;ENU=In the Last Payment Date field, specify the last possible date that payments must be made.';
      Text001@1001 : TextConst 'DEU=Geben Sie im Feld ''Buchungsdatum'' das Datum an, das als Buchungsdatum fÅr die Buch.-Blattposten verwendet werden soll.;ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.';
      Text002@1002 : TextConst 'DEU=Geben Sie im Feld ''Start von Belegnr.'' die erste zu verwendende Belegnummer ein.;ENU=In the Starting Document No. field, specify the first document number to be used.';
      Text003@1003 : TextConst '@@@=%1 is a date;DEU=Das Zahlungsdatum liegt vor dem %1.\\Mîchten Sie den Batchauftrag dennoch ausfÅhren?;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?';
      Text005@1005 : TextConst 'DEU=Die Stapelverarbeitung wurde abgebrochen.;ENU=The batch job was interrupted.';
      Text006@1006 : TextConst 'DEU=Kreditoren werden durchgelesen               #1##########;ENU=Processing vendors     #1##########';
      Text007@1007 : TextConst 'DEU=Bearbeite Kreditoren fÅr Skonto              #1##########;ENU=Processing vendors for payment discounts #1##########';
      Text008@1008 : TextConst 'DEU=FÅge Zahlungsausgangs Buch.-Blatt Zeilen ein #1##########;ENU=Inserting payment journal lines #1##########';
      Text009@1009 : TextConst 'DEU=%1 muss Sachkonto oder Bankkonto sein.;ENU=%1 must be G/L Account or Bank Account.';
      Text010@1010 : TextConst 'DEU=%1 muss nur dann gefÅllt werden, wenn %2 ein Bankkonto ist.;ENU=%1 must be filled only when %2 is Bank Account.';
      Text011@1011 : TextConst 'DEU=KreditorenprioritÑt verwenden muss aktiviert sein, wenn der Wert des Feldes VerfÅgbarer Betrag nicht 0 ist.;ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.';
      Text012@1012 : TextConst 'DEU=Die Start von Belegnr. muss eine Nummer enthalten.;ENU=Starting Document No. must contain a number.';
      Text013@1013 : TextConst 'DEU=KreditorenprioritÑt verwenden muss aktiviert sein, wenn der Wert des Feldes VerfÅgbarer Betrag (MW) nicht 0 ist.;ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.';
      Text014@1014 : TextConst 'DEU=Zahlung an Kreditor %1;ENU=Payment to vendor %1';
      Text015@1015 : TextConst 'DEU=Zahlung von %1 %2;ENU=Payment of %1 %2';
      Text016@1016 : TextConst 'DEU=" ist bereits mit %1 %2 fÅr den Kreditor %3 ausgeglichen.";ENU=" is already applied to %1 %2 for vendor %3."';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";DEU="Wenn die %1 = %2 ist und Sie das Feld ''Pro Kreditor summieren'' nicht aktiviert haben,\ mÅssen Sie ''Neue Belegnr. pro Zeile'' aktivieren.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;DEU=Sie haben nur die empfohlenen Kreditorenposten fÅr %1 %2 erstellt.\ Es sind aber auch noch offene Kreditorenposten in anderen WÑhrungen als %2 vorhanden.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.';
      Text021@1021 : TextConst 'DEU=Sie haben nur die empfohlenen Kreditorenposten fÅr %1 %2 erstellt.\ Es sind keine offenen Kreditorenposten in anderen WÑhrungen vorhanden.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.';
      Text022@1022 : TextConst 'DEU=Sie haben Zahlungsvorschlagszeilen fÅr alle WÑhrungen erstellt.;ENU=You have created suggested vendor payment lines for all currencies.';
      Vend2@1023 : Record 23;
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1025 : Record 232;
      GenJnlLine@1026 : Record 81;
      DimSetEntry@1027 : Record 480;
      GenJnlLine2@1028 : Record 81;
      VendLedgEntry@1029 : Record 25;
      GLAcc@1030 : Record 15;
      BankAcc@1031 : Record 270;
      PayableVendLedgEntry@1032 : TEMPORARY Record 317;
      TempPaymentBuffer@1033 : TEMPORARY Record 372;
      OldTempPaymentBuffer@1034 : TEMPORARY Record 372;
      SelectedDim@1035 : Record 369;
      VendorLedgEntryTemp@1102601000 : TEMPORARY Record 25;
      GenJnlPostLine@1062 : Codeunit 12;
      NoSeriesMgt@1036 : Codeunit 396;
      VendEntryEdit@1037 : Codeunit 113;
      DimMgt@1038 : Codeunit 408;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      FirstLineNo@1050 : Integer;
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : ' ,Computer Check,Manual Check';
      BalAccType@1056 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text[250];
      GenJnlLineInserted@1059 : Boolean;
      SeveralCurrencies@1060 : Boolean;
      Text023@1061 : TextConst 'DEU=" ,Computer Scheck,Manueller Scheck";ENU=" ,Computer Check,Manual Check"';
      Text024@1102601001 : TextConst 'DEU=Es ist mindestens ein Eintrag vorhanden, fÅr den keine ZahlungsvorschlÑge gemacht wurden, weil das Buchungsdatum des betreffenden Eintrags spÑter liegt als das Buchungsdatum im Anforderungsfenster der Stapelverarbeitung ''Zahlungsvorschlag''. Mîchten Sie die betreffenden EintrÑge anzeigen?;ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the posting date in the Suggest Vendor Payments batch job request window. Do you want to see the entries?';
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      Text025@1063 : TextConst 'DEU=Das Element ''%1'' mit der Nummer %2 besitzt Folgendes: %3 (Nummer: %4).;ENU=The %1 with the number %2 has a %3 with the number %4.';
      VendorBalance@1065 : Decimal;

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,31129999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
          IF VendLedgEntry."Accepted Pmt. Disc. Tolerance" OR
             (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            VendEntryEdit.RUN(VendLedgEntry);
          END;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        VALIDATE("Posting Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Vendor;
        Vend2.GET(VendLedgEntry."Vendor No.");
        Vend2.CheckBlockedVendOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Vendor Posting Group";
        "Salespers./Purch. Code" := Vend2."Purchaser Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        IF GenJnlPostLine.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE)
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF OriginalAmtAvailable > 0 THEN
          AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine3@1000 : Record 81;
      TempDimBuf@1002 : Record 360;
      TempDimSetEntry@1006 : TEMPORARY Record 480;
      DimVal@1005 : Record 349;
      Vendor@1001 : Record 23;
      GLSetup@1069 : Record 98;
      DimBufMgt@1003 : Codeunit 411;
      EntryNo@1004 : Integer;
      NewDimensionID@1007 : Integer;
      DimSetIDArr@1111 : ARRAY [10] OF Integer;
      RemainingAmtAvailable@1008 : Decimal;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      GLSetup.GET;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF OriginalAmtAvailable <> 0 THEN BEGIN
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
      END;
      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            IF VendLedgEntry."Posting Date" <= PostingDate THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";

              IF SummarizePerDim THEN BEGIN
                TempDimBuf.RESET;
                TempDimBuf.DELETEALL;
                IF SelectedDim.FIND('-') THEN
                  REPEAT
                    IF DimSetEntry.GET(
                         VendLedgEntry."Dimension Set ID",SelectedDim."Dimension Code")
                    THEN BEGIN
                      TempDimBuf.INIT;
                      TempDimBuf."Table ID" := DATABASE::"Dimension Buffer";
                      TempDimBuf."Entry No." := 0;
                      TempDimBuf."Dimension Code" := DimSetEntry."Dimension Code";
                      TempDimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
                      TempDimBuf.INSERT;
                    END;
                  UNTIL SelectedDim.NEXT = 0;
                EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
                IF EntryNo = 0 THEN
                  EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);
                TempPaymentBuffer."Dimension Entry No." := EntryNo;
                IF TempPaymentBuffer."Dimension Entry No." <> 0 THEN BEGIN
                  IF DimCodeIsInTempDimBuf(GLSetup."Global Dimension 1 Code",TempDimBuf) THEN
                    TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code"
                  ELSE
                    TempPaymentBuffer."Global Dimension 1 Code" := '';
                  IF DimCodeIsInTempDimBuf(GLSetup."Global Dimension 2 Code",TempDimBuf) THEN
                    TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code"
                  ELSE
                    TempPaymentBuffer."Global Dimension 2 Code" := '';
                END ELSE BEGIN
                  TempPaymentBuffer."Global Dimension 1 Code" := '';
                  TempPaymentBuffer."Global Dimension 2 Code" := '';
                END;
                TempPaymentBuffer."Dimension Set ID" := NewDimensionID;
              END ELSE BEGIN
                TempPaymentBuffer."Dimension Entry No." := 0;
                TempPaymentBuffer."Global Dimension 1 Code" := '';
                TempPaymentBuffer."Global Dimension 2 Code" := '';
                TempPaymentBuffer."Dimension Set ID" := 0;
              END;

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF SummarizePerVend THEN BEGIN
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                IF TempPaymentBuffer.FIND THEN BEGIN
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                END ELSE BEGIN
                  TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                END;
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              END ELSE BEGIN
                GenJnlLine3.RESET;
                GenJnlLine3.SETCURRENTKEY(
                  "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
                GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Vendor);
                GenJnlLine3.SETRANGE("Account No.",VendLedgEntry."Vendor No.");
                GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry."Document Type");
                GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
                IF GenJnlLine3.FINDFIRST THEN
                  GenJnlLine3.FIELDERROR(
                    "Applies-to Doc. No.",
                    STRSUBSTNO(
                      Text016,
                      VendLedgEntry."Document Type",VendLedgEntry."Document No.",
                      VendLedgEntry."Vendor No."));

                TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                TempPaymentBuffer.INSERT;
              END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendEntryEdit.RUN(VendLedgEntry);
            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

            PayableVendLedgEntry.DELETE;
            IF OriginalAmtAvailable <> 0 THEN BEGIN
              RemainingAmtAvailable -= PayableVendLedgEntry."Amount (LCY)";
              RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
            END;

          UNTIL NOT PayableVendLedgEntry.FINDSET;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      TempPaymentBuffer.SETFILTER(
        "Vendor Ledg. Entry Doc. Type",'<>%1&<>%2',
        TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Refund,TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Payment);
      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            INIT;
            Window2.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            VALIDATE("Posting Date",PostingDate);
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerVend THEN
              "Document No." := TempPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempPaymentBuffer.Amount < 0 THEN
                  "Document Type" := "Document Type"::Refund;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              END ELSE
                IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
                   (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                END;
            "Account Type" := "Account Type"::Vendor;
            SetHideValidation(TRUE);
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            Vendor.GET(TempPaymentBuffer."Vendor No.");
            IF (Vendor."Pay-to Vendor No." <> '') AND (Vendor."Pay-to Vendor No." <> "Account No.") THEN
              MESSAGE(Text025,Vendor.TABLECAPTION,Vendor."No.",Vendor.FIELDCAPTION("Pay-to Vendor No."),
                Vendor."Pay-to Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerVend THEN BEGIN
              "Applies-to ID" := "Document No.";
              Description := STRSUBSTNO(Text014,TempPaymentBuffer."Vendor No.");
            END ELSE
              Description :=
                STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No.");
            "Source Line No." := TempPaymentBuffer."Vendor Ledg. Entry No.";
            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            "Dimension Set ID" := TempPaymentBuffer."Dimension Set ID";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";

            IF SummarizePerVend THEN BEGIN
              TempDimBuf.RESET;
              TempDimBuf.DELETEALL;
              TempDimSetEntry.RESET;
              TempDimSetEntry.DELETEALL;
              DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",TempDimBuf);
              IF TempDimBuf.FINDSET THEN
                REPEAT
                  DimVal.GET(TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code");
                  TempDimSetEntry."Dimension Code" := TempDimBuf."Dimension Code";
                  TempDimSetEntry."Dimension Value Code" := TempDimBuf."Dimension Value Code";
                  TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
                  TempDimSetEntry.INSERT;
                UNTIL TempDimBuf.NEXT = 0;
              NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
              "Dimension Set ID" := NewDimensionID;
            END;
            CreateDim(
              DimMgt.TypeToTableID1("Account Type"),"Account No.",
              DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
              DATABASE::Job,"Job No.",
              DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
              DATABASE::Campaign,"Campaign No.");
            IF TempPaymentBuffer."Dimension Set ID" <> "Dimension Set ID" THEN BEGIN
              DimSetIDArr[1] := TempPaymentBuffer."Dimension Set ID";
              DimSetIDArr[2] := "Dimension Set ID";
              "Dimension Set ID" :=
                DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
            END;
            INSERT;
            GenJnlLineInserted := TRUE;
          END;
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text[250]);
    BEGIN
      IF (Text <> '') AND GenJnlLineInserted THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 317;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FIND('-') THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FINDFIRST;

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(Text020,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(Text021,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record 4;
      PayableVendLedgEntry2@1001 : TEMPORARY Record 317;
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(PayableVendLedgEntry);
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

      WHILE PayableVendLedgEntry.NEXT <> 0 DO BEGIN
        TempCurrency.Code := PayableVendLedgEntry."Currency Code";
        CurrencyBalance := 0;
        IF TempCurrency.INSERT THEN BEGIN
          PayableVendLedgEntry2 := PayableVendLedgEntry;
          PayableVendLedgEntry.SETRANGE("Currency Code",PayableVendLedgEntry."Currency Code");
          REPEAT
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          UNTIL PayableVendLedgEntry.NEXT = 0;
          IF CurrencyBalance < 0 THEN
            PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
          PayableVendLedgEntry := PayableVendLedgEntry2;
        END;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInTempDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record 360) : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      EXIT(NOT DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableVendLedgEntry@1000 : Record 317;RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      WITH PayableVendLedgEntry DO BEGIN
        SETFILTER("Amount (LCY)",'>%1',RemainingAmtAvailable);
        DELETEALL;
        SETRANGE("Amount (LCY)");
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

