OBJECT Codeunit 951 Time Sheet Approval Management
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5200=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@="There is nothing to submit for line with Time Sheet No.=10, Line No.=10000.";ENU="There is nothing to submit for line with %1=%2, %3=%4.";ESP="No hay nada que enviar para la l°nea con %1=%2, %3=%4.";DEA="FÅr die Zeile mit %1=%2, %3=%4 gibt es nichts zu konvertieren."';
      Text002@1001 : TextConst 'ENU=You are not authorized to approve time sheet lines. Contact your time sheet administrator.;ESP=No tiene autorizaci¢n para aprobar las l°neas de hoja de horas. P¢ngase en contacto con el administrador de la hoja de horas.;DEA=Sie sind nicht zum Genehmigen von Arbeitszeittabellenzeilen autorisiert. Wenden Sie sich an den Arbeitszeittabellenadministrator.';
      Text003@1002 : TextConst 'ENU=Time sheet line cannot be reopened because there are linked service lines.;ESP=La l°nea de hoja de horas no se puede volver a abrir porque hay l°neas de servicio vinculadas.;DEA=Die Arbeitszeittabellenzeile kann nicht erneut geîffnet werden, da verknÅpfte Servicezeilen vorhanden sind.';
      Text004@1004 : TextConst 'ENU=&All open lines [%1 line(s)],&Selected line(s) only;ESP=&Todas las l°neas abiertas [%1 l°nea(s)],&Solo l°neas seleccionadas;DEA=&Alle offenen Zeilen [%1 Zeile(n)],&Nur ausgewÑhlte Zeilen';
      Text005@1003 : TextConst 'ENU=&All submitted lines [%1 line(s)],&Selected line(s) only;ESP=&Todas las l°neas enviadas [%1 l°nea(s)],&Solo l°neas seleccionadas;DEA=&Alle Åbermittelten Zeilen [%1 Zeile(n)],&Nur ausgewÑhlte Zeilen';
      Text006@1005 : TextConst 'ENU=&All approved lines [%1 line(s)],&Selected line(s) only;ESP=&Todas las l°neas aprobadas [%1 l°nea(s)],&Solo l°neas seleccionadas;DEA=&Alle genehmigten Zeilen [%1 Zeile(n)],&Nur ausgewÑhlte Zeilen';
      Text007@1007 : TextConst 'ENU=Submit for approval;ESP=Enviar para su aprobaci¢n;DEA=Zur Genehmigung Åbermitteln';
      Text008@1006 : TextConst 'ENU=Reopen for editing;ESP=Volver a abrir para su edici¢n;DEA=Status zur Bearbeitung zurÅcksetzen';
      Text009@1010 : TextConst 'ENU=Approve for posting;ESP=Aprobar para su registro;DEA=Zur Buchung freigeben';
      Text010@1008 : TextConst 'ENU=Reject for correction;ESP=Rechazar para su correcci¢n;DEA=Ablehnen zwecks Korrektur';

    PROCEDURE Submit@1(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      WITH TimeSheetLine DO BEGIN
        IF Status = Status::Submitted THEN
          EXIT;
        IF Type = Type::" " THEN
          FIELDERROR(Type);
        TestStatus;
        CALCFIELDS("Total Quantity");
        IF "Total Quantity" = 0 THEN
          ERROR(
            Text001,
            FIELDCAPTION("Time Sheet No."),
            "Time Sheet No.",
            FIELDCAPTION("Line No."),
            "Line No.");
        CASE Type OF
          Type::Job:
            BEGIN
              TESTFIELD("Job No.");
              TESTFIELD("Job Task No.");
            END;
          Type::Absence:
            TESTFIELD("Cause of Absence Code");
          Type::Service:
            TESTFIELD("Service Order No.");
        END;
        UpdateApproverID;
        Status := Status::Submitted;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE ReopenSubmitted@7(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      WITH TimeSheetLine DO BEGIN
        IF Status = Status::Open THEN
          EXIT;
        TESTFIELD(Status,Status::Submitted);
        Status := Status::Open;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE ReopenApproved@3(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      WITH TimeSheetLine DO BEGIN
        IF Status = Status::Submitted THEN
          EXIT;
        TESTFIELD(Status,Status::Approved);
        TESTFIELD(Posted,FALSE);
        CheckApproverPermissions(TimeSheetLine);
        CheckLinkedServiceDoc(TimeSheetLine);
        UpdateApproverID;
        Status := Status::Submitted;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE Reject@6(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      WITH TimeSheetLine DO BEGIN
        IF Status = Status::Rejected THEN
          EXIT;
        TESTFIELD(Status,Status::Submitted);
        CheckApproverPermissions(TimeSheetLine);
        Status := Status::Rejected;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE Approve@12(VAR TimeSheetLine@1000 : Record 951);
    BEGIN
      WITH TimeSheetLine DO BEGIN
        IF Status = Status::Approved THEN
          EXIT;
        TESTFIELD(Status,Status::Submitted);
        CheckApproverPermissions(TimeSheetLine);
        Status := Status::Approved;
        "Approved By" := USERID;
        "Approval Date" := TODAY;
        MODIFY(TRUE);
        IF Type = Type::Absence THEN
          PostAbsence(TimeSheetLine);
      END;
    END;

    LOCAL PROCEDURE PostAbsence@2(VAR TimeSheetLine@1000 : Record 951);
    VAR
      Resource@1005 : Record 156;
      TimeSheetHeader@1003 : Record 950;
      TimeSheetDetail@1004 : Record 952;
      Employee@1001 : Record 5200;
      EmployeeAbsence@1002 : Record 5207;
      TimeSheetMgt@1006 : Codeunit 950;
    BEGIN
      TimeSheetHeader.GET(TimeSheetLine."Time Sheet No.");
      Resource.GET(TimeSheetHeader."Resource No.");
      Employee.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      Employee.FINDFIRST;
      TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      TimeSheetDetail.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
      IF TimeSheetDetail.FINDSET(TRUE) THEN
        REPEAT
          EmployeeAbsence.INIT;
          EmployeeAbsence.VALIDATE("Employee No.",Employee."No.");
          EmployeeAbsence.VALIDATE("From Date",TimeSheetDetail.Date);
          EmployeeAbsence.VALIDATE("Cause of Absence Code",TimeSheetDetail."Cause of Absence Code");
          EmployeeAbsence.VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
          EmployeeAbsence.VALIDATE(Quantity,TimeSheetDetail.Quantity);
          EmployeeAbsence.INSERT(TRUE);

          TimeSheetDetail.Posted := TRUE;
          TimeSheetDetail.MODIFY;
          TimeSheetMgt.CreateTSPostingEntry(
            TimeSheetDetail,
            TimeSheetDetail.Quantity,
            TimeSheetDetail.Date,
            '',
            TimeSheetLine.Description);
        UNTIL TimeSheetDetail.NEXT = 0;

      TimeSheetLine.Posted := TRUE;
      TimeSheetLine.MODIFY;
    END;

    PROCEDURE CheckApproverPermissions@4(TimeSheetLine@1000 : Record 951);
    VAR
      UserSetup@1001 : Record 91;
    BEGIN
      UserSetup.GET(USERID);
      IF NOT UserSetup."Time Sheet Admin." THEN BEGIN
        IF TimeSheetLine."Approver ID" <> UPPERCASE(USERID) THEN
          ERROR(Text002);
      END;
    END;

    PROCEDURE ProcessManagerAction@5(VAR TimeSheetLine@1001 : Record 951;Action@1000 : 'Approve,Reject,Reopen');
    BEGIN
      IF TimeSheetLine.FINDSET THEN
        REPEAT
          CASE Action OF
            Action::Approve:
              Approve(TimeSheetLine);
            Action::Reject:
              Reject(TimeSheetLine);
            Action::Reopen:
              ReopenApproved(TimeSheetLine);
          END;
        UNTIL TimeSheetLine.NEXT = 0;
    END;

    PROCEDURE CheckLinkedServiceDoc@8(TimeSheetLine@1000 : Record 951);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",TimeSheetLine."Service Order No.");
      ServiceLine.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      ServiceLine.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
      IF NOT ServiceLine.ISEMPTY THEN
        ERROR(Text003);
    END;

    PROCEDURE GetTimeSheetDialogText@9(ActionType@1002 : 'Submit,Reopen';LinesQty@1001 : Integer) : Text[100];
    BEGIN
      CASE ActionType OF
        ActionType::Submit:
          EXIT(STRSUBSTNO(Text004,LinesQty));
        ActionType::Reopen:
          EXIT(STRSUBSTNO(Text005,LinesQty));
      END;
    END;

    PROCEDURE GetManagerTimeSheetDialogText@10(ActionType@1000 : 'Approve,Reopen,Reject';LinesQty@1001 : Integer) : Text[100];
    BEGIN
      CASE ActionType OF
        ActionType::Approve,
        ActionType::Reject:
          EXIT(STRSUBSTNO(Text005,LinesQty));
        ActionType::Reopen:
          EXIT(STRSUBSTNO(Text006,LinesQty));
      END;
    END;

    PROCEDURE GetTimeSheetDialogInstruction@11(ActionType@1000 : 'Submit,Reopen') : Text[100];
    BEGIN
      CASE ActionType OF
        ActionType::Submit:
          EXIT(Text007);
        ActionType::Reopen:
          EXIT(Text008);
      END;
    END;

    PROCEDURE GetManagerTimeSheetDialogInstruction@15(ActionType@1000 : 'Approve,Reopen,Reject') : Text[100];
    BEGIN
      CASE ActionType OF
        ActionType::Approve:
          EXIT(Text009);
        ActionType::Reject:
          EXIT(Text010);
        ActionType::Reopen:
          EXIT(Text008);
      END;
    END;

    BEGIN
    END.
  }
}

