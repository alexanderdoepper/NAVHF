OBJECT Table 167 Job
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               JobsSetup.GET;

               IF "No." = '' THEN BEGIN
                 JobsSetup.TESTFIELD("Job Nos.");
                 NoSeriesMgt.InitSeries(JobsSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF GETFILTER("Bill-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Bill-to Customer No.") = GETRANGEMAX("Bill-to Customer No.") THEN
                   VALIDATE("Bill-to Customer No.",GETRANGEMIN("Bill-to Customer No."));

               IF NOT "Apply Usage Link" THEN
                 VALIDATE("Apply Usage Link",JobsSetup."Apply Usage Link by Default");
               IF "WIP Method" = '' THEN
                 VALIDATE("WIP Method",JobsSetup."Default WIP Method");
               IF "Job Posting Group" = '' THEN
                 VALIDATE("Job Posting Group",JobsSetup."Default Job Posting Group");
               VALIDATE("WIP Posting Method",JobsSetup."Default WIP Posting Method");

               DimMgt.UpdateDefaultDim(
                 DATABASE::Job,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               InitWIPFields;

               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               CommentLine@1004 : Record 97;
               JobTask@1000 : Record 1001;
               JobResPrice@1001 : Record 1012;
               JobItemPrice@1002 : Record 1013;
               JobGLAccPrice@1003 : Record 1014;
             BEGIN
               MoveEntries.MoveJobEntries(Rec);

               JobTask.SETCURRENTKEY("Job No.");
               JobTask.SETRANGE("Job No.","No.");
               JobTask.DELETEALL(TRUE);

               JobResPrice.SETRANGE("Job No.","No.");
               JobResPrice.DELETEALL;

               JobItemPrice.SETRANGE("Job No.","No.");
               JobItemPrice.DELETEALL;

               JobGLAccPrice.SETRANGE("Job No.","No.");
               JobGLAccPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Job,"No.");
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Job;
               ESP=Proyecto;
               DEA=Projekt];
    LookupPageID=Page89;
    DrillDownPageID=Page89;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Description;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobsSetup.GET;
                                                                  NoSeriesMgt.TestManual(JobsSetup."Job Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§;
                                                              DEA=Nr.] }
    { 2   ;   ;Search Description  ;Code50        ;CaptionML=[ENU=Search Description;
                                                              ESP=Descripci¢n alias;
                                                              DEA=Suchbegriff] }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2;
                                                              DEA=Beschreibung 2] }
    { 5   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                  IF JobLedgEntryExist OR JobPlanningLineExist THEN
                                                                    ERROR(Text000,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                UpdateCust;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ESP=Factura-a N§ cliente;
                                                              DEA=Rech. an Deb.-Nr.] }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creaci¢n;
                                                              DEA=Errichtungsdatum];
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial;
                                                              DEA=Startdatum] }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final;
                                                              DEA=Enddatum] }
    { 19  ;   ;Status              ;Option        ;InitValue=Order;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status = Status::Completed THEN
                                                                    VALIDATE(Complete,TRUE);
                                                                  IF xRec.Status = xRec.Status::Completed THEN BEGIN
                                                                    IF DIALOG.CONFIRM(Text004) THEN
                                                                      VALIDATE(Complete,FALSE)
                                                                    ELSE
                                                                      Status := xRec.Status;
                                                                  END;
                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.MODIFYALL(Status,Status);
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ESP=Estado;
                                                              DEA=Status];
                                                   OptionCaptionML=[ENU=Planning,Quote,Order,Completed;
                                                                    ESP=Presupuesto,Oferta,Pedido,Terminado;
                                                                    DEA=Planung,Angebot,Auftrag,Abgeschlossen];
                                                   OptionString=Planning,Quote,Order,Completed }
    { 20  ;   ;Person Responsible  ;Code20        ;TableRelation=Resource WHERE (Type=CONST(Person));
                                                   CaptionML=[ENU=Person Responsible;
                                                              ESP=C¢d. responsable;
                                                              DEA=Verantwortlich] }
    { 21  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ESP=C¢d. dimensi¢n global 1;
                                                              DEA=Globaler Dimensionscode 1];
                                                   CaptionClass='1,1,1' }
    { 22  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ESP=C¢d. dimensi¢n global 2;
                                                              DEA=Globaler Dimensionscode 2];
                                                   CaptionClass='1,1,2' }
    { 23  ;   ;Job Posting Group   ;Code10        ;TableRelation="Job Posting Group";
                                                   CaptionML=[ENU=Job Posting Group;
                                                              ESP=Grupo contable proyecto;
                                                              DEA=Projektbuchungsgruppe] }
    { 24  ;   ;Blocked             ;Option        ;CaptionML=[ENU=Blocked;
                                                              ESP=Bloqueado;
                                                              DEA=Gesperrt];
                                                   OptionCaptionML=[ENU=" ,Posting,All";
                                                                    ESP=" ,Registro,Todos";
                                                                    DEA=" ,Buchen,Alle"];
                                                   OptionString=[ ,Posting,All] }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESP=Fecha £lt. modificaci¢n;
                                                              DEA=Korrigiert am];
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(Job),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario;
                                                              DEA=Bemerkung];
                                                   Editable=No }
    { 31  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ESP=Grupo dto. cliente;
                                                              DEA=Debitorenrabattgruppe] }
    { 32  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ESP=Grupo precio cliente;
                                                              DEA=Debitorenpreisgruppe] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ESP=C¢d. idioma;
                                                              DEA=Sprachcode] }
    { 49  ;   ;Scheduled Res. Qty. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                No.=FIELD(Resource Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Qty.;
                                                              ESP=Cdad. recurso programada;
                                                              DEA=Geplante Res.-Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;   ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=[ENU=Resource Filter;
                                                              ESP=Filtro recurso;
                                                              DEA=Ressourcenfilter] }
    { 51  ;   ;Posting Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Posting Date Filter;
                                                              ESP=Filtro fecha registro;
                                                              DEA=Buchungsdatumsfilter] }
    { 55  ;   ;Resource Gr. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=[ENU=Resource Gr. Filter;
                                                              ESP=Filtro fam. recurso;
                                                              DEA=Res.-Gruppenfilter] }
    { 56  ;   ;Scheduled Res. Gr. Qty.;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                Resource Group No.=FIELD(Resource Gr. Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Gr. Qty.;
                                                              ESP=Cdad. fam. recurso programada;
                                                              DEA=Geplante Res.-Grp.-Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ESP=Imagen;
                                                              DEA=Bild];
                                                   SubType=Bitmap }
    { 58  ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ESP=Fact. a-Nombre;
                                                              DEA=Rech. an Name] }
    { 59  ;   ;Bill-to Address     ;Text50        ;CaptionML=[ENU=Bill-to Address;
                                                              ESP=Fact. a-Direcci¢n;
                                                              DEA=Rech. an Adresse] }
    { 60  ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ESP=Fact. a-Direcci¢n 2;
                                                              DEA=Rech. an Adresse 2] }
    { 61  ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ESP=Fact. a-Poblaci¢n;
                                                              DEA=Rech. an Ort] }
    { 63  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ESP=Fact. a-Provincia;
                                                              DEA=Rech. an Bundesregion] }
    { 64  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ESP=Fact. a-C.P.;
                                                              DEA=Rech. an PLZ-Code] }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie;
                                                              DEA=Nummernserie];
                                                   Editable=No }
    { 67  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ESP=Fact. a-C¢d. pa¡s/regi¢n;
                                                              DEA=Rech. an Lnder-/Regionscode];
                                                   Editable=Yes }
    { 68  ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ESP=Fact. a-Nombre 2;
                                                              DEA=Rech. an Name 2] }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=[ENU=Reserve;
                                                              ESP=Reserva;
                                                              DEA=Reservieren];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ESP=Nunca,Opcional,Siempre;
                                                                    DEA=Nie,Optional,Immer];
                                                   OptionString=Never,Optional,Always }
    { 1000;   ;WIP Method          ;Code20        ;TableRelation="Job WIP Method".Code WHERE (Valid=CONST(Yes));
                                                   OnValidate=VAR
                                                                JobTask@1000 : Record 1001;
                                                                JobWIPMethod@1001 : Record 1006;
                                                              BEGIN
                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;

                                                                JobTask.SETRANGE("Job No.","No.");
                                                                JobTask.SETRANGE("WIP-Total",JobTask."WIP-Total"::Total);
                                                                IF JobTask.FINDFIRST THEN
                                                                  IF CONFIRM(Text014,TRUE,JobTask.FIELDCAPTION("WIP Method"),JobTask.TABLECAPTION,JobTask."WIP-Total") THEN
                                                                    JobTask.MODIFYALL("WIP Method","WIP Method",TRUE);
                                                              END;

                                                   CaptionML=[ENU=WIP Method;
                                                              ESP=Mtodo WIP;
                                                              DEA=WIP-Methode] }
    { 1001;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN
                                                                  IF NOT JobLedgEntryExist THEN BEGIN
                                                                    CurrencyUpdatePlanningLines;
                                                                    CurrencyUpdatePurchLines;
                                                                  END ELSE
                                                                    ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              DEA=Whrungscode] }
    { 1002;   ;Bill-to Contact No. ;Code20        ;OnValidate=BEGIN
                                                                IF Blocked >= Blocked::Posting THEN
                                                                  ERROR(Text000,FIELDCAPTION("Bill-to Contact No."),TABLECAPTION);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                    INIT;
                                                                    "No. Series" := xRec."No. Series";
                                                                    VALIDATE(Description,xRec.Description);
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text005,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;
                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Bill-to Customer No." <> '') AND Cont.GET("Bill-to Contact No.") THEN
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              ELSE
                                                                IF Cust.GET("Bill-to Customer No.") THEN BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                END ELSE
                                                                  Cont.SETFILTER("Company No.",'<>''''');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ESP=Fact. a-N§ contacto;
                                                              DEA=Rech. an Kontaktnr.] }
    { 1003;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ESP=Fact. a-Atenci¢n;
                                                              DEA=Rech. an Kontakt] }
    { 1004;   ;Planning Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Planning Date Filter;
                                                              ESP=Filtro fecha planif.;
                                                              DEA=Planungsdatumsfilter] }
    { 1005;   ;Total WIP Cost Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Job Complete=CONST(No),
                                                                                                              Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost Amount;
                                                              ESP=Total importe coste WIP;
                                                              DEA=WIP-Einstandsbetrag (gesamt)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1006;   ;Total WIP Cost G/L Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Accrued Costs|Applied Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost G/L Amount;
                                                              ESP=Total importe C/G coste WIP;
                                                              DEA=WIP-Einstandsbetrag fr Sachkonten (gesamt)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1007;   ;WIP Entries Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP Entries Exist;
                                                              ESP=Hay movs. WIP;
                                                              DEA=WIP-Posten vorhanden] }
    { 1008;   ;WIP Posting Date    ;Date          ;CaptionML=[ENU=WIP Posting Date;
                                                              ESP=Fecha registro WIP;
                                                              DEA=WIP-Buchungsdatum];
                                                   Editable=No }
    { 1009;   ;WIP G/L Posting Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job WIP G/L Entry"."WIP Posting Date" WHERE (Reversed=CONST(No),
                                                                                                                 Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP G/L Posting Date;
                                                              ESP=Fecha registro C/G WIP;
                                                              DEA=Buchungsdatum WIP auf Sachposten];
                                                   Editable=No }
    { 1011;   ;Invoice Currency Code;Code10       ;TableRelation=Currency;
                                                   CaptionML=[ENU=Invoice Currency Code;
                                                              ESP=C¢digo divisa factura;
                                                              DEA=Whrungscode Rechnung] }
    { 1012;   ;Exch. Calculation (Cost);Option    ;CaptionML=[ENU=Exch. Calculation (Cost);
                                                              ESP=C lculo cambio (coste);
                                                              DEA=Wechselkursberechnung (Einstandspreis)];
                                                   OptionCaptionML=[ENU=Fixed FCY,Fixed LCY;
                                                                    ESP=DL fijada,Otra divisa fijada;
                                                                    DEA=FW fest,MW fest];
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1013;   ;Exch. Calculation (Price);Option   ;CaptionML=[ENU=Exch. Calculation (Price);
                                                              ESP=C lculo cambio (precio);
                                                              DEA=Wechselkursberechnung (Verkaufspreis)];
                                                   OptionCaptionML=[ENU=Fixed FCY,Fixed LCY;
                                                                    ESP=DL fijada,Otra divisa fijada;
                                                                    DEA=FW fest,MW fest];
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1014;   ;Allow Schedule/Contract Lines;Boolean;
                                                   CaptionML=[ENU=Allow Schedule/Contract Lines;
                                                              ESP=Permitir l¡neas planif./contrato;
                                                              DEA=Plan-/Vertragszeilen zulassen] }
    { 1015;   ;Complete            ;Boolean       ;OnValidate=BEGIN
                                                                IF Complete <> xRec.Complete THEN
                                                                  ChangeJobCompletionStatus;
                                                              END;

                                                   CaptionML=[ENU=Complete;
                                                              ESP=Completo;
                                                              DEA=Komplettlieferung] }
    { 1017;   ;Recog. Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Type=FILTER(Recognized Sales)));
                                                   CaptionML=[ENU=Recog. Sales Amount;
                                                              ESP=Importe ventas reconoc.;
                                                              DEA=Deaktivierter Verkaufsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Recog. Sales G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reversed=CONST(No),
                                                                                                                  Type=FILTER(Recognized Sales)));
                                                   CaptionML=[ENU=Recog. Sales G/L Amount;
                                                              ESP=Importe C/G ventas reconoc.;
                                                              DEA=Deaktivierter Verkaufsbetrag in Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1019;   ;Recog. Costs Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Type=FILTER(Recognized Costs)));
                                                   CaptionML=[ENU=Recog. Costs Amount;
                                                              ESP=Importe costes reconoc.;
                                                              DEA=Deaktivierter Einstandsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Recog. Costs G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Type=FILTER(Recognized Costs)));
                                                   CaptionML=[ENU=Recog. Costs G/L Amount;
                                                              ESP=Importe C/G costes reconoc.;
                                                              DEA=Deaktivierter Einstandsbetrag auf Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;   ;Total WIP Sales Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales Amount;
                                                              ESP=Total importe ventas WIP;
                                                              DEA=WIP-Rechnungswert gesamt];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1022;   ;Total WIP Sales G/L Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Sales|Applied Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales G/L Amount;
                                                              ESP=Total importe C/G ventas WIP;
                                                              DEA=WIP-Rechnungswert gesamt in Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1023;   ;WIP Completion Calculated;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.),
                                                                                            Job Complete=CONST(Yes)));
                                                   CaptionML=[ENU=WIP Completion Calculated;
                                                              ESP=Finaliz. WIP calculada;
                                                              DEA=WIP-Abschluss berechnet] }
    { 1024;   ;Next Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job Planning Line"."Planning Date" WHERE (Job No.=FIELD(No.),
                                                                                                              Contract Line=CONST(Yes),
                                                                                                              Qty. Invoiced=CONST(0)));
                                                   CaptionML=[ENU=Next Invoice Date;
                                                              ESP=Siguiente fecha factura;
                                                              DEA=Nchstes Rechnungsdatum] }
    { 1025;   ;Apply Usage Link    ;Boolean       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                                JobLedgerEntry@1001 : Record 169;
                                                                JobUsageLink@1002 : Record 1020;
                                                              BEGIN
                                                                IF "Apply Usage Link" THEN BEGIN
                                                                  JobLedgerEntry.SETCURRENTKEY("Job No.");
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETRANGE("Entry Type",JobLedgerEntry."Entry Type"::Usage);
                                                                  IF JobLedgerEntry.FINDFIRST THEN BEGIN
                                                                    JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
                                                                    IF NOT JobUsageLink.FINDFIRST THEN
                                                                      ERROR(Text013,TABLECAPTION);
                                                                  END;

                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.SETRANGE("Schedule Line",TRUE);
                                                                  IF JobPlanningLine.FINDSET THEN
                                                                    REPEAT
                                                                      JobPlanningLine.VALIDATE("Usage Link",TRUE);
                                                                      IF JobPlanningLine."Planning Date" = 0D THEN
                                                                        JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
                                                                      JobPlanningLine.MODIFY(TRUE);
                                                                    UNTIL JobPlanningLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Apply Usage Link;
                                                              ESP=Aplicar v¡nculo utiliz.;
                                                              DEA=Verbrauchslink anwenden] }
    { 1026;   ;WIP Warnings        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Warning" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP Warnings;
                                                              ESP=Avisos WIP;
                                                              DEA=WIP-Warnungen];
                                                   Editable=No }
    { 1027;   ;WIP Posting Method  ;Option        ;OnValidate=VAR
                                                                JobLedgerEntry@1000 : Record 169;
                                                                JobWIPEntry@1001 : Record 1004;
                                                                JobWIPMethod@1002 : Record 1006;
                                                              BEGIN
                                                                IF xRec."WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobLedgerEntry.SETRANGE("Job No.","No.");
                                                                  JobLedgerEntry.SETFILTER("Amt. Posted to G/L",'<>%1',0);
                                                                  IF JobLedgerEntry.FINDFIRST THEN
                                                                    ERROR(Text015,FIELDCAPTION("WIP Posting Method"),xRec."WIP Posting Method");
                                                                END;

                                                                JobWIPEntry.SETRANGE("Job No.","No.");
                                                                IF JobWIPEntry.FINDFIRST THEN
                                                                  ERROR(Text016,FIELDCAPTION("WIP Posting Method"));

                                                                IF "WIP Posting Method" = "WIP Posting Method"::"Per Job Ledger Entry" THEN BEGIN
                                                                  JobWIPMethod.GET("WIP Method");
                                                                  IF NOT JobWIPMethod."WIP Cost" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Cost"));
                                                                  IF NOT JobWIPMethod."WIP Sales" THEN
                                                                    ERROR(Text017,FIELDCAPTION("WIP Posting Method"),FIELDCAPTION("WIP Method"),JobWIPMethod.FIELDCAPTION("WIP Sales"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=WIP Posting Method;
                                                              ESP=Mtodo registro WIP;
                                                              DEA=WIP-Buchungsmethode];
                                                   OptionCaptionML=[ENU=Per Job,Per Job Ledger Entry;
                                                                    ESP=Por proyecto,Por mov. proyecto;
                                                                    DEA=Pro Projekt,Pro Projektposten];
                                                   OptionString=Per Job,Per Job Ledger Entry }
    { 1028;   ;Applied Costs G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Costs)));
                                                   CaptionML=[ENU=Applied Costs G/L Amount;
                                                              ESP=Importe contab. costes liq.;
                                                              DEA=Ausgeglichener Einstandsbetrag auf Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1029;   ;Applied Sales G/L Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Reverse=CONST(No),
                                                                                                                  Job Complete=CONST(No),
                                                                                                                  Type=FILTER(Applied Sales)));
                                                   CaptionML=[ENU=Applied Sales G/L Amount;
                                                              ESP=Importe contab. ventas liq.;
                                                              DEA=Ausgeglichener Verkaufsbetrag auf Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1030;   ;Calc. Recog. Sales Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Sales Amount;
                                                              ESP=Calc. importe ventas reconoc.;
                                                              DEA=Berechn. deaktivierter Verkaufsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1031;   ;Calc. Recog. Costs Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Costs Amount;
                                                              ESP=Calc. importe costes reconoc.;
                                                              DEA=Berechn. deaktivierter Einstandsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1032;   ;Calc. Recog. Sales G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Sales G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Sales G/L Amount;
                                                              ESP=Calc. importe contab. ventas reconoc.;
                                                              DEA=Berechneter deaktivierter Verkaufsbetrag auf Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1033;   ;Calc. Recog. Costs G/L Amount;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Task"."Recognized Costs G/L Amount" WHERE (Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=Calc. Recog. Costs G/L Amount;
                                                              ESP=Calc. importe contab. costes reconoc.;
                                                              DEA=Berechneter deaktivierter Einstandsbetrag auf Sachkonten];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1034;   ;WIP Completion Posted;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP G/L Entry" WHERE (Job No.=FIELD(No.),
                                                                                                Job Complete=CONST(Yes)));
                                                   CaptionML=[ENU=WIP Completion Posted;
                                                              ESP=Finaliz. WIP registrada;
                                                              DEA=WIP-Abschluss gebucht] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Bill-to Customer No.                     }
    {    ;Description                             ;KeyGroups=SearchCol }
    {    ;Status                                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Bill-to Customer No.,Starting Date,Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because one or more entries are associated with this %2.;ESP=No puede cambiar el %1 porque hay uno o m s movimientos asociados con este %2.;DEA=%1 kann nicht gendert werden, weil mindestens ein Eintrag mit %2 verknpft ist.';
      JobsSetup@1004 : Record 315;
      PostCode@1015 : Record 225;
      Job@1014 : Record 167;
      Cust@1006 : Record 18;
      Cont@1005 : Record 5050;
      ContBusinessRelation@1001 : Record 5054;
      NoSeriesMgt@1010 : Codeunit 396;
      DimMgt@1012 : Codeunit 408;
      Text003@1022 : TextConst 'ENU=You must run the %1 and %2 functions to create and post the completion entries for this job.;ESP=Debe ejecutar las funciones %1 y %2 para crear y registrar los movimientos completados para este proyecto.;DEA=Sie mssen die Funktionen ''%1'' und ''%2'' ausfhren, um die Abschlussposten fr dieses Projekt zu erstellen und zu buchen.';
      Text004@1017 : TextConst 'ENU=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?;ESP=De esta manera eliminar  cualquier movimiento WIP no registrado para este proyecto y podr  revertir los registros completados para este proyecto.\\¨Desea continuar?;DEA=Hierdurch werden alle nicht gebuchten WIP-Posten fr dieses Projekt gelscht, und Sie knnen die Abschlussbuchungen fr das Projekt stornieren.\\Mchten Sie den Vorgang fortsetzen?';
      Text005@1019 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ESP=Contacto %1 %2 est  relacionado con una empresa diferente al cliente %3.;DEA=Kontakt %1 %2 ist mit einem anderen Unternehmen als Debitor %3 verknpft.';
      Text006@1018 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ESP=Contacto %1 %2 no est  relacionado con el cliente %3.;DEA=Kontakt %1 %2 ist nicht mit Debitor %3 verknpft.';
      Text007@1009 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ESP=Contacto %1 %2 no est  relacionado con un cliente.;DEA=Kontakt %1 %2 ist nicht mit einem Debitor verknpft.';
      Text008@1002 : TextConst 'ENU=%1 %2 must not be blocked with type %3.;ESP=El %1 %2 no debe estar bloqueado con el tipo %3.;DEA=%1 %2 darf nicht mit Typ %3 gesperrt werden.';
      Text009@1008 : TextConst 'ENU=You must run the %1 function to reverse the completion entries that have already been posted for this job.;ESP=Debe ejecutar la funci¢n %1 para revertir los movimientos completados registrados para este proyecto.;DEA=Sie mssen die %1-Funktion ausfhren, um die fr dieses Projekt bereits erstellten Abschlussposten zu stornieren.';
      MoveEntries@1003 : Codeunit 361;
      Text010@1007 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ESP=Para poder usar Online Map, primero debe rellenar la ventana Configuraci¢n Online Map.\Consulte Configuraci¢n de Online Map en la Ayuda.;DEA=Bevor Sie Online Map verwenden knnen, mssen Sie die Felder des Fensters ''Online Map-Einrichtung'' ausfllen.\Informationen hierzu finden Sie in der Hilfe zum Einrichten von Online Map.';
      Text011@1023 : TextConst 'ENU=%1 must be equal to or earlier than %2.;ESP=%1 debe ser igual o anterior a %2.;DEA=%1 muss mit %2 bereinstimmen oder davor liegen.';
      Text012@1011 : TextConst 'ENU=You cannot set %1 to %2, as this %3 has set %4 to %5.;ESP=No puede establecer %1 en %2, puesto que este %3 ha establecido %4 en %5.;DEA=''%1'' kann nicht auf ''%2'' festgelegt werden, da ''%4'' durch ''%3'' auf ''%5'' festgelegt wurde.';
      Text013@1013 : TextConst 'ENU=A usage link cannot be enabled for the entire %1 because usage without the usage link already has been posted.;ESP=No se puede activar un v¡nculo de uso para el %1 completo porque ya se ha registrado el uso sin v¡nculo de uso.;DEA=Ein Verbrauchslink kann nicht fr ''%1'' (gesamt) aktiviert werden, da bereits Verbrauch ohne den Verbrauchslink gebucht wurde.';
      Text014@1016 : TextConst 'ENU=Do you want to set the %1 on every %2 of type %3?;ESP=¨Desea establecer el %1 en cada %2 de tipo %3?;DEA=Mchten Sie ''%1'' fr alle %2-Elemente vom Typ ''%3'' festlegen?';
      Text015@1020 : TextConst 'ENU=%1 must be %2 because job WIP general ledger entries already were posted with this setting.;ESP=%1 debe ser %2 porque los Movs. contabilidad WIP proyecto ya se registraron con esta configuraci¢n.;DEA=''%1'' muss ''%2'' sein, da bereits WIP-Projektsachposten mit dieser Einstellung gebucht wurden.';
      Text016@1021 : TextConst 'ENU=%1 cannot be modified because the job has associated job WIP entries.;ESP=%1 no se puede modificar porque el proyecto se ha asociado a Movs. WIP proyecto.;DEA=''%1'' kann nicht gendert werden, da dem Projekt WIP-Projektposten zugeordnet sind.';
      Text017@1024 : TextConst 'ENU=The selected %1 requires the %2 to have %3 enabled.;ESP=El %1 seleccionado requiere que %2 tenga %3 activado.;DEA=Aufgrund des ausgewhlten Elements vom Typ ''%1'' muss fr ''%2'' die Option ''%3'' aktiviert sein.';
      Text018@1025 : TextConst 'ENU=%1 is set to %2.;ESP=%1 se establece en %2.;DEA=''%1'' wird auf ''%2'' festgelegt.';

    PROCEDURE AssistEdit@2(OldJob@1000 : Record 167) : Boolean;
    BEGIN
      WITH Job DO BEGIN
        Job := Rec;
        JobsSetup.GET;
        JobsSetup.TESTFIELD("Job Nos.");
        IF NoSeriesMgt.SelectSeries(JobsSetup."Job Nos.",OldJob."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := Job;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Job,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No.";
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE JobLedgEntryExist@5() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      EXIT(JobLedgEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE JobPlanningLineExist@3() : Boolean;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.","No.");
      EXIT(JobPlanningLine.FINDFIRST);
    END;

    PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.")
        ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text006,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE
        ERROR(Text007,Cont."No.",Cont.Name);
    END;

    PROCEDURE UpdateCust@4();
    BEGIN
      IF "Bill-to Customer No." <> '' THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.TESTFIELD("Customer Posting Group");
        Cust.TESTFIELD("Bill-to Customer No.",'');
        IF Cust.Blocked = Cust.Blocked::All THEN
          ERROR(
            Text012,
            FIELDCAPTION("Bill-to Customer No."),
            "Bill-to Customer No.",
            Cust.TABLECAPTION,
            FIELDCAPTION(Blocked),
            Cust.Blocked);
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        "Invoice Currency Code" := Cust."Currency Code";
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Customer Price Group" := Cust."Customer Price Group";
        "Language Code" := Cust."Language Code";
        "Bill-to County" := Cust.County;
        Reserve := Cust.Reserve;
        UpdateBillToCont("Bill-to Customer No.");
      END ELSE BEGIN
        "Bill-to Name" := '';
        "Bill-to Name 2" := '';
        "Bill-to Address" := '';
        "Bill-to Address 2" := '';
        "Bill-to City" := '';
        "Bill-to Post Code" := '';
        "Bill-to Country/Region Code" := '';
        "Invoice Currency Code" := '';
        "Customer Disc. Group" := '';
        "Customer Price Group" := '';
        "Language Code" := '';
        "Bill-to County" := '';
        VALIDATE("Bill-to Contact No.",'');
      END;
    END;

    PROCEDURE InitWIPFields@1();
    BEGIN
      "WIP Posting Date" := 0D;
      "WIP G/L Posting Date" := 0D;
    END;

    PROCEDURE TestBlocked@6();
    BEGIN
      IF Blocked = Blocked::" " THEN
        EXIT;
      ERROR(Text008,TABLECAPTION,"No.",Blocked);
    END;

    PROCEDURE CurrencyUpdatePlanningLines@10();
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
          IF JobPlanningLine."Qty. Transferred to Invoice" <> 0 THEN
            ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
          JobPlanningLine.VALIDATE("Currency Code","Currency Code");
          JobPlanningLine.VALIDATE("Currency Date");
          JobPlanningLine.MODIFY;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    PROCEDURE CurrencyUpdatePurchLines@17();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      MODIFY;
      PurchLine.SETRANGE("Job No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          PurchLine.VALIDATE("Job Currency Code","Currency Code");
          PurchLine.VALIDATE("Job Task No.");
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE ChangeJobCompletionStatus@7();
    VAR
      AllObjwithCaption@1003 : Record 2000000058;
      JobLedgerEntry@1000 : Record 169;
      JobCalcWIP@1001 : Codeunit 1000;
      ReportCaption1@1002 : Text[250];
      ReportCaption2@1004 : Text[250];
      EndingDate@1005 : Date;
    BEGIN
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Calculate WIP");
      ReportCaption1 := AllObjwithCaption."Object Caption";
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Post WIP to G/L");
      ReportCaption2 := AllObjwithCaption."Object Caption";

      IF Complete THEN BEGIN
        IF "Ending Date" = 0D THEN
          EndingDate := WORKDATE
        ELSE
          EndingDate := "Ending Date";

        JobLedgerEntry.SETRANGE("Job No.","No.");
        REPEAT
          IF JobLedgerEntry."Posting Date" > EndingDate THEN
            EndingDate := JobLedgerEntry."Posting Date";
        UNTIL JobLedgerEntry.NEXT = 0;

        IF "Ending Date" < EndingDate THEN
          VALIDATE("Ending Date",EndingDate);
        MESSAGE(Text018,FIELDCAPTION("Ending Date"),"Ending Date");

        MESSAGE(Text003,ReportCaption1,ReportCaption2);
      END ELSE BEGIN
        JobCalcWIP.ReOpenJob("No.");
        "WIP Posting Date" := 0D;
        MESSAGE(Text009,ReportCaption2);
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Job,GETPOSITION)
      ELSE
        MESSAGE(Text010);
    END;

    PROCEDURE GetQuantityAvailable@9(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];InEntryType@1004 : 'Usage,Sale,Both';Direction@1005 : 'Positive,Negative,Both') QtyBase : Decimal;
    VAR
      JobLedgEntry@1003 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.","Entry Type",Type,"No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      IF NOT (InEntryType = InEntryType::Both) THEN
        JobLedgEntry.SETRANGE("Entry Type",InEntryType);
      JobLedgEntry.SETRANGE(Type,JobLedgEntry.Type::Item);
      JobLedgEntry.SETRANGE("No.",ItemNo);
      IF JobLedgEntry.FINDSET THEN
        REPEAT
          IF (JobLedgEntry."Location Code" = LocationCode) AND
             (JobLedgEntry."Variant Code" = VariantCode) AND
             ((Direction = Direction::Both) OR
              ((Direction = Direction::Positive) AND (JobLedgEntry."Quantity (Base)" > 0)) OR
              ((Direction = Direction::Negative) AND (JobLedgEntry."Quantity (Base)" < 0)))
          THEN
            QtyBase := QtyBase + JobLedgEntry."Quantity (Base)";

        UNTIL JobLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDate@30();
    BEGIN
      IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
        ERROR(Text011,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
    END;

    PROCEDURE CalcAccWIPCostsAmount@15() : Decimal;
    BEGIN
      EXIT("Total WIP Cost Amount" + "Applied Costs G/L Amount");
    END;

    PROCEDURE CalcAccWIPSalesAmount@16() : Decimal;
    BEGIN
      EXIT("Total WIP Sales Amount" - "Applied Sales G/L Amount");
    END;

    PROCEDURE CalcRecognizedProfitAmount@11() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount");
    END;

    PROCEDURE CalcRecognizedProfitPercentage@12() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitAmount / "Calc. Recog. Sales Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE CalcRecognizedProfitGLAmount@14() : Decimal;
    BEGIN
      EXIT("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount");
    END;

    PROCEDURE CalcRecognProfitGLPercentage@13() : Decimal;
    BEGIN
      IF "Calc. Recog. Sales G/L Amount" <> 0 THEN
        EXIT((CalcRecognizedProfitGLAmount / "Calc. Recog. Sales G/L Amount") * 100);
      EXIT(0);
    END;

    PROCEDURE PercentCompleted@19() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      CL@1001 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYCostAmounts(CL);
      IF CL[4] <> 0 THEN
        EXIT((CL[8] / CL[4]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentInvoiced@20() : Decimal;
    VAR
      JobCalcStatistics@1000 : Codeunit 1008;
      PL@1002 : ARRAY [16] OF Decimal;
    BEGIN
      JobCalcStatistics.JobCalculateCommonFilters(Rec);
      JobCalcStatistics.CalculateAmounts;
      JobCalcStatistics.GetLCYPriceAmounts(PL);
      IF PL[12] <> 0 THEN
        EXIT((PL[16] / PL[12]) * 100);
      EXIT(0);
    END;

    PROCEDURE PercentOverdue@18() : Decimal;
    VAR
      JobPlanningLine@1000 : Record 1003;
      QtyOverdue@1001 : Decimal;
      QtyOnSchedule@1002 : Decimal;
      QtyTotal@1003 : Decimal;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.","No.");
      IF JobPlanningLine.FINDSET THEN
        REPEAT
          BEGIN
            IF (JobPlanningLine."Planning Date" < WORKDATE) AND (JobPlanningLine."Remaining Qty." > 0) THEN
              QtyOverdue += 1
            ELSE
              QtyOnSchedule += 1;
          END;
        UNTIL JobPlanningLine.NEXT = 0;
      QtyTotal := QtyOverdue + QtyOnSchedule;
      IF QtyTotal <> 0 THEN
        EXIT((QtyOverdue / QtyTotal) * 100);
      EXIT(0);
    END;

    BEGIN
    END.
  }
}

