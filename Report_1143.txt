OBJECT Report 1143 Import Cost Budget from Excel
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Cost Budget from Excel;
               ESP=Importar ppto. costes de Excel;
               DEA=Kostenbudget aus Excel importieren];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ToCostBudgetName = '' THEN
                    ERROR(STRSUBSTNO(Text000));

                  IF CostType.FIND('-') THEN BEGIN
                    REPEAT
                      TempCostType.INIT;
                      TempCostType := CostType;
                      TempCostType.INSERT;
                    UNTIL CostType.NEXT = 0;
                  END;

                  ExcelBuffer.LOCKTABLE;
                  "Cost Budget Buffer".LOCKTABLE;
                  CostBudgetEntry.SETRANGE("Budget Name",ToCostBudgetName);
                  IF NOT CostBudgetName.GET(ToCostBudgetName) THEN
                    CLEAR(CostBudgetName);

                  CostAccSetup.GET;

                  ExcelBuffer.OpenBook(ServerFileName,SheetName);
                  ExcelBuffer.ReadSheet;

                  AnalyzeData;
                END;

    OnPostReport=BEGIN
                   ExcelBuffer.DELETEALL;
                   "Cost Budget Buffer".DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table1114;
               DataItemTableView=SORTING(Cost Type No.,Cost Center Code,Cost Object Code,Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;

                               IF NOT CostBudgetName.GET(ToCostBudgetName) THEN BEGIN
                                 IF NOT CONFIRM(Text001,FALSE,CostBudgetName.TABLECAPTION,ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                                 CostBudgetName.Name := ToCostBudgetName;
                                 CostBudgetName.INSERT;
                               END ELSE BEGIN
                                 IF NOT CONFIRM(Text003,FALSE,LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text027))),ToCostBudgetName) THEN
                                   CurrReport.BREAK;
                               END;

                               IF CostBudgetEntry3.FINDLAST THEN
                                 EntryNo := CostBudgetEntry3."Entry No." + 1
                               ELSE
                                 EntryNo := 1;
                               LastEntryNoBeforeImport := CostBudgetEntry3."Entry No.";
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  IF RecNo = 1 THEN BEGIN
                                    Window.OPEN(
                                      Text028 +
                                      '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
                                    TotalRecNo := COUNT;
                                    Window.UPDATE(1,0);
                                  END;
                                  IF ImportOption = ImportOption::"Replace entries" THEN BEGIN
                                    CostBudgetEntry.SETRANGE("Cost Type No.","Cost Type No.");
                                    CostBudgetEntry.SETRANGE(Date,Date);
                                    CostBudgetEntry.SETFILTER("Entry No.",'<=%1',LastEntryNoBeforeImport);
                                    IF NOT CostBudgetEntry.ISEMPTY THEN
                                      CostBudgetEntry.DELETEALL(TRUE);
                                  END;

                                  IF Amount = 0 THEN
                                    CurrReport.SKIP;
                                  IF NOT IsLineTypeCostType("Cost Type No.") THEN
                                    CurrReport.SKIP;
                                  CostBudgetEntry.INIT;
                                  CostBudgetEntry."Entry No." := EntryNo;
                                  CostBudgetEntry."Budget Name" := ToCostBudgetName;
                                  CostBudgetEntry."Cost Type No." := "Cost Type No.";
                                  CostBudgetEntry.Date := Date;
                                  CostBudgetEntry.Amount := ROUND(Amount);
                                  CostBudgetEntry.Description := Description;
                                  CostBudgetEntry."Cost Center Code" := "Cost Center Code";
                                  CostBudgetEntry."Cost Object Code" := "Cost Object Code";
                                  CostBudgetEntry.INSERT(TRUE);
                                  EntryNo := EntryNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;

               OnPostDataItem=BEGIN
                                IF RecNo > 0 THEN
                                  MESSAGE(Text004,CostBudgetEntry.TABLECAPTION,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   FileName := '';
                   SheetName := '';
                 END;

      OnQueryClosePage=BEGIN
                         IF CloseAction = ACTION::OK THEN
                           ValidateServerFileName;
                       END;

    }
    CONTROLS
    {
      { 9   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 8   ;1   ;Group     ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones;
                             DEA=Optionen] }

      { 7   ;2   ;Group     ;
                  CaptionML=[ENU=Import from;
                             ESP=Importar de;
                             DEA=Importieren aus] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Workbook File Name;
                             ESP=Nombre fichero libro;
                             DEA=Arbeitsmappendateiname];
                  SourceExpr=FileName;
                  Editable=FALSE;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 RequestFile;
                                 SheetName := ExcelBuffer.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 10  ;3   ;Field     ;
                  CaptionML=[ENU=Worksheet Name;
                             ESP=Nombre hoja;
                             DEA=Tabellenname];
                  SourceExpr=SheetName;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 IF ServerFileName = '' THEN
                                   RequestFile;

                                 SheetName := ExcelBuffer.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Import to;
                             ESP=Importar a;
                             DEA=Importieren nach] }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Budget Name;
                             ESP=Nombre ppto.;
                             DEA=Budgetname];
                  SourceExpr=ToCostBudgetName;
                  TableRelation="Cost Budget Name" }

      { 2   ;3   ;Field     ;
                  CaptionML=[ENU=Option;
                             ESP=Opci¢n;
                             DEA=Option];
                  OptionCaptionML=[ENU=Replace entries,Add entries;
                                   ESP=Reemplazar movs.,A§adir movs.;
                                   DEA=Posten ersetzen,Posten hinzufÅgen];
                  SourceExpr=ImportOption }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Description;
                             ESP=Descripci¢n;
                             DEA=Beschreibung];
                  SourceExpr=Description }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1021 : Record 370;
      CostBudgetEntry@1020 : Record 1109;
      CostAccSetup@1019 : Record 1108;
      CostType@1018 : Record 1103;
      TempCostType@1017 : TEMPORARY Record 1103;
      CostBudgetName@1016 : Record 1110;
      CostBudgetEntry3@1015 : Record 1109;
      FileMgt@1030 : Codeunit 419;
      Window@1007 : Dialog;
      FileName@1014 : Text;
      ServerFileName@1025 : Text;
      SheetName@1013 : Text[250];
      ToCostBudgetName@1012 : Code[10];
      EntryNo@1011 : Integer;
      LastEntryNoBeforeImport@1010 : Integer;
      TotalRecNo@1009 : Integer;
      RecNo@1008 : Integer;
      Description@1006 : Text[50];
      ImportOption@1005 : 'Replace entries,Add entries';
      Text000@1038 : TextConst 'ENU=You must specify a budget name to which to import.;ESP=Debe especificar un nombre de ppto. al que importar.;DEA=Geben Sie als Ziel fÅr den Import einen Budgetnamen an.';
      Text001@1037 : TextConst 'ENU=Do you want to create %1 with the name %2?;ESP=®Desea crear %1 con el nombre %2?;DEA=Mîchten Sie ''%1'' mit dem Namen ''%2'' erstellen?';
      Text003@1035 : TextConst 'ENU=Are you sure that you want to %1 for the budget name %2?;ESP=®Est† seguro de que desea %1 para el nombre ppto. %2?;DEA=Mîchten Sie fÅr den Budgetnamen ''%2'' wirklich die folgende Aktion ausfÅhren: %1?';
      Text004@1034 : TextConst 'ENU=%1 table has been successfully updated with %2 entries.;ESP=%1 tabla se ha actualizado correctamente con %2 movs.;DEA=Die Tabelle ''%1'' wurde erfolgreich mit %2 Posten aktualisiert.';
      Text006@1032 : TextConst 'ENU=Import Excel File;ESP=Importar fich. Excel;DEA=Excel-Datei importieren';
      Text007@1031 : TextConst 'ENU=Analyzing Data...\\;ESP=Analizar Datos...\\;DEA=Daten werden analysiert ...\\';
      Text009@1029 : TextConst 'ENU=Cost Type No;ESP=Nß tipo coste;DEA=Kostenartnr.';
      Text011@1027 : TextConst 'ENU=The text %1 can only be specified once in the Excel worksheet.;ESP=El texto %1 s¢lo se puede especificar una vez en la hoja de Excel.;DEA=Der Text ''%1'' kann in der Excel-Tabelle nur einmal angegeben werden.';
      Text014@1026 : TextConst 'ENU=Date;ESP=Fecha;DEA=Datum';
      Text017@1023 : TextConst 'ENU=Cost Center Code;ESP=C¢digo centro coste;DEA=Kostenstellencode';
      Text018@1022 : TextConst 'ENU=Cost Object Code;ESP=C¢digo objeto coste;DEA=KostentrÑgercode';
      Text019@1004 : TextConst 'ENU=You cannot import %1 value, which is not available in the %2 table.;ESP=No puede importar el valor %1, que no est† disponible en la tabla %2.;DEA=Der Wert ''%1'' kann nicht importiert werden, da er in der Tabelle ''%2'' nicht verfÅgbar ist.';
      Text023@1003 : TextConst 'ENU=You cannot import the same information more than once.;ESP=No puede importar la misma informaci¢n m†s de una vez.;DEA=Die gleichen Informationen kînnen nicht mehrmals importiert werden.';
      Text025@1002 : TextConst 'ENU=Cost Types have not been found in the Excel worksheet.;ESP=Los tipos de coste no se han encontrado en la hoja de Excel.;DEA=In der Excel-Tabelle wurden keine Kostenarten gefunden.';
      Text026@1001 : TextConst 'ENU=Dates have not been recognized in the Excel worksheet.;ESP=Las fechas no se han reorganizado en la hoja de Excel.;DEA=In der Excel-Tabelle wurden keine Datumsangaben erkannt.';
      Text027@1000 : TextConst 'ENU=Replace entries,Add entries;ESP=Reemplazar movs.,A§adir movs.;DEA=Posten ersetzen,Posten hinzufÅgen';
      Text028@1024 : TextConst 'ENU=Importing from Excel worksheet;ESP=Importando desde hoja de trabajo de Excel;DEA=Import aus Excel-Arbeitsblatt wird ausgefÅhrt...';
      Text029@1028 : TextConst 'ENU=You must enter a file name.;ESP=Debe introd. nombre fichero.;DEA=Sie mÅssen einen Dateinamen angeben.';

    LOCAL PROCEDURE AnalyzeData@2();
    VAR
      TempExcelBuffer@1000 : TEMPORARY Record 370;
      CostBudgetBuffer@1001 : Record 1114;
      CostBudgetBuffer2@1002 : Record 1114;
      CostCenter@1004 : Record 1112;
      CostObject@1007 : Record 1113;
      HeaderRowNo@1003 : Integer;
      TestDateTime@1005 : DateTime;
      OldRowNo@1006 : Integer;
    BEGIN
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuffer.COUNT;
      RecNo := 0;
      CostBudgetBuffer2.INIT;
      CostBudgetBuffer.DELETEALL;

      IF ExcelBuffer.FIND('-') THEN BEGIN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          CASE TRUE OF
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text009)) <> 0:
              BEGIN
                IF HeaderRowNo = 0 THEN BEGIN
                  HeaderRowNo := ExcelBuffer."Row No.";
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text009);
                END ELSE
                  ERROR(Text011,Text009);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text017)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text017)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text017);
              END;
            STRPOS(UPPERCASE(ExcelBuffer."Cell Value as Text"),UPPERCASE(Text018)) <> 0:
              BEGIN
                IF HeaderRowNo = ExcelBuffer."Row No." THEN
                  InsertTempExcelBuffer(ExcelBuffer,TempExcelBuffer,Text018)
                ELSE
                  IF (HeaderRowNo < ExcelBuffer."Row No.") AND (HeaderRowNo <> 0) THEN
                    ERROR(Text011,Text018);
              END;
            ExcelBuffer."Row No." = HeaderRowNo:
              BEGIN
                TempExcelBuffer := ExcelBuffer;
                IF EVALUATE(TestDateTime,TempExcelBuffer."Cell Value as Text") THEN BEGIN
                  TempExcelBuffer."Cell Value as Text" := FORMAT(DT2DATE(TestDateTime));
                  TempExcelBuffer.Comment := Text014;
                  TempExcelBuffer.INSERT;
                END;
              END;
            (ExcelBuffer."Row No." > HeaderRowNo) AND (HeaderRowNo > 0):
              BEGIN
                IF ExcelBuffer."Row No." <> OldRowNo THEN BEGIN
                  OldRowNo := ExcelBuffer."Row No.";
                  CLEAR(CostBudgetBuffer2);
                END;
                TempExcelBuffer.SETRANGE("Column No.",ExcelBuffer."Column No.");
                IF TempExcelBuffer.FIND('-') THEN
                  CASE TempExcelBuffer.Comment OF
                    Text009:
                      BEGIN
                        TempCostType.SETRANGE(
                          "No.",
                          COPYSTR(
                            ExcelBuffer."Cell Value as Text",
                            1,MAXSTRLEN(CostBudgetBuffer2."Cost Type No.")));
                        IF TempCostType.FINDFIRST THEN
                          CostBudgetBuffer2."Cost Type No." :=
                            COPYSTR(
                              ExcelBuffer."Cell Value as Text",
                              1,MAXSTRLEN(CostBudgetBuffer2."Cost Type No."))
                        ELSE
                          CostBudgetBuffer2."Cost Type No." := '';
                      END;
                    Text017:
                      BEGIN
                        IF CostCenter.GET(COPYSTR(
                               ExcelBuffer."Cell Value as Text",1,MAXSTRLEN(CostBudgetBuffer2."Cost Center Code")))
                        THEN
                          CostBudgetBuffer2."Cost Center Code" := CostCenter.Code
                        ELSE
                          ERROR(Text019,CostBudgetBuffer2.FIELDCAPTION("Cost Center Code"),CostCenter.TABLECAPTION);
                      END;
                    Text018:
                      BEGIN
                        IF CostObject.GET(COPYSTR(
                               ExcelBuffer."Cell Value as Text",1,MAXSTRLEN(CostBudgetBuffer2."Cost Object Code")))
                        THEN
                          CostBudgetBuffer2."Cost Object Code" := CostObject.Code
                        ELSE
                          ERROR(Text019,CostBudgetBuffer2.FIELDCAPTION("Cost Object Code"),CostObject.TABLECAPTION);
                      END;
                    Text014:
                      IF CostBudgetBuffer2."Cost Type No." <> '' THEN BEGIN
                        CostBudgetBuffer := CostBudgetBuffer2;
                        EVALUATE(CostBudgetBuffer.Date,TempExcelBuffer."Cell Value as Text");
                        EVALUATE(CostBudgetBuffer.Amount,ExcelBuffer."Cell Value as Text");
                        IF NOT CostBudgetBuffer.FIND('=') THEN
                          CostBudgetBuffer.INSERT
                        ELSE
                          ERROR(Text023);
                      END;
                  END;
              END;
          END;
        UNTIL ExcelBuffer.NEXT = 0;
      END;

      Window.CLOSE;
      TempExcelBuffer.RESET;
      TempExcelBuffer.SETRANGE(Comment,Text009);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text025);
      TempExcelBuffer.SETRANGE(Comment,Text014);
      IF NOT TempExcelBuffer.FINDFIRST THEN
        ERROR(Text026);
    END;

    PROCEDURE SetGLBudgetName@3(NewToCostBudgetName@1000 : Code[10]);
    BEGIN
      ToCostBudgetName := NewToCostBudgetName;
    END;

    PROCEDURE RequestFile@6();
    BEGIN
      IF FileName <> '' THEN
        ServerFileName := FileMgt.UploadFile(Text006,FileName)
      ELSE
        ServerFileName := FileMgt.UploadFile(Text006,'.xlsx');

      ValidateServerFileName;
      FileName := FileMgt.GetFileName(ServerFileName);
    END;

    PROCEDURE IsLineTypeCostType@7(CostTypeNo@1001 : Code[20]) : Boolean;
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      IF NOT CostType.GET(CostTypeNo) THEN
        EXIT(FALSE);
      EXIT(CostType.Type = CostType.Type::"Cost Type");
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@8();
    BEGIN
      RequestFile;
    END;

    PROCEDURE InsertTempExcelBuffer@9(VAR ExcelBuffer@1003 : Record 370;VAR TempExcelBuffer@1002 : TEMPORARY Record 370;Text@1001 : Text[250]);
    BEGIN
      TempExcelBuffer := ExcelBuffer;
      TempExcelBuffer.Comment := Text;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE ValidateServerFileName@5();
    BEGIN
      IF ServerFileName = '' THEN BEGIN
        FileName := '';
        SheetName := '';
        ERROR(Text029);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

