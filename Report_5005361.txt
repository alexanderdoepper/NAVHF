OBJECT Report 5005361 Make New Phys. Invt. Recording
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVDACH7.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Make New Phys. Invt. Recording;
               DEA=Neue Inventurerfassung erst.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  HeaderCount := 0;
                END;

    OnPostReport=BEGIN
                   CASE HeaderCount OF
                     0:
                       MESSAGE(
                         Text1140000,
                         PhysInvtRecordingHeader.TABLECAPTION,
                         "Phys. Inventory Order Line".TABLECAPTION );
                     1:
                       MESSAGE(
                         Text1140001,
                         PhysInvtRecordingHeader.TABLECAPTION,
                         PhysInvtRecordingHeader.FIELDCAPTION("Order No."),PhysInvtRecordingHeader."Order No.",
                         PhysInvtRecordingHeader.FIELDCAPTION("Recording No."),PhysInvtRecordingHeader."Recording No." );
                     ELSE
                       MESSAGE(
                         Text1140002,
                         HeaderCount,
                         PhysInvtRecordingHeader.TABLECAPTION );
                   END;
                 END;

  }
  DATASET
  {
    { 3530;    ;DataItem;                    ;
               DataItemTable=Table5005350;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  TESTFIELD(Status,Status::Open);
                                END;

               ReqFilterFields=No. }

    { 8887;1   ;DataItem;                    ;
               DataItemTable=Table5005351;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               HeaderInserted := FALSE;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF CheckOrderline("Phys. Inventory Order Line") THEN BEGIN
                                    IF NOT HeaderInserted THEN BEGIN
                                      RecordingHeaderInsert("Phys. Inventory Order Header");
                                      HeaderInserted := TRUE;
                                      NextLineNo := 10000;
                                      HeaderCount := HeaderCount + 1;
                                    END;
                                    RecordingLineInsert("Phys. Inventory Order Line");
                                  END;
                                END;

               ReqFilterFields=Item No.,Location Code,Bin Code,Shelf/Bin No.,Inventory Posting Group;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             DEA=Optionen] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Only Lines Not In Recordings;
                             DEA=Nur nicht erfasste Zeilen];
                  SourceExpr=OnlyLinesNotInRecordings }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Recording Without Order Permit;
                             DEA=Erfassung ohne Auftrag erlaubt];
                  SourceExpr=RecWithoutOrderPermit }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=No %1 has been created, because no correct %2 was found.;DEA=Es wurde keine %1 wurde erstellt, weil keine zutreffende %2 gefunden wurde.';
      Text1140001@1140001 : TextConst 'ENU=The %1 with %2 %3, %4 %5 has been created.;DEA=Die %1 mit %2 %3, %4 %5 wurde erstellt.';
      Text1140002@1140002 : TextConst 'ENU=%1 different %2 has been created.;DEA=%1 verschiedene %2 wurden erstellt.';
      PhysInvtRecordingHeader@1140003 : Record 5005352;
      PhysInvtRecordingLine@1140004 : Record 5005353;
      NextLineNo@1140005 : Integer;
      HeaderCount@1140006 : Integer;
      OnlyLinesNotInRecordings@1140007 : Boolean;
      HeaderInserted@1140008 : Boolean;
      RecWithoutOrderPermit@1140009 : Boolean;

    PROCEDURE CheckOrderline@1140000(PhysInvtOrderLine@1140000 : Record 5005351) : Boolean;
    VAR
      PhysInvtRecordingLine2@1140001 : Record 5005353;
    BEGIN
      WITH PhysInvtOrderLine DO BEGIN
        IF EmptyLine THEN
          EXIT(FALSE);
        TESTFIELD("Item No.");
        IF OnlyLinesNotInRecordings THEN BEGIN
          PhysInvtRecordingLine2.SETCURRENTKEY(
            "Order No.","Item No.","Variant Code","Location Code","Bin Code");
          PhysInvtRecordingLine2.SETRANGE("Order No.","Document No.");
          PhysInvtRecordingLine2.SETRANGE("Item No.","Item No.");
          PhysInvtRecordingLine2.SETRANGE("Variant Code","Variant Code");
          PhysInvtRecordingLine2.SETRANGE("Location Code","Location Code");
          PhysInvtRecordingLine2.SETRANGE("Bin Code","Bin Code");
          IF PhysInvtRecordingLine2.FINDFIRST THEN
            EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RecordingHeaderInsert@1140001(PhysInvtOrderHeader@1140000 : Record 5005350);
    BEGIN
      WITH PhysInvtOrderHeader DO BEGIN
        PhysInvtRecordingHeader.INIT;
        PhysInvtRecordingHeader."Order No." := "No.";
        PhysInvtRecordingHeader."Recording No." := 0;
        PhysInvtRecordingHeader."Person Responsible" := "Person Responsible";
        PhysInvtRecordingHeader."Location Code" := "Location Code";
        PhysInvtRecordingHeader."Bin Code" := "Bin Code";
        PhysInvtRecordingHeader."Recording without order permit" := RecWithoutOrderPermit;
        PhysInvtRecordingHeader.INSERT(TRUE);
      END;
    END;

    PROCEDURE RecordingLineInsert@1140002(PhysInvtOrderLine@1140000 : Record 5005351);
    BEGIN
      WITH PhysInvtOrderLine DO BEGIN
        PhysInvtRecordingLine.INIT;
        PhysInvtRecordingLine."Order No." := PhysInvtRecordingHeader."Order No.";
        PhysInvtRecordingLine."Recording No." := PhysInvtRecordingHeader."Recording No.";
        PhysInvtRecordingLine."Line No." := NextLineNo;

        PhysInvtRecordingLine.VALIDATE("Item No.","Item No.");
        PhysInvtRecordingLine.VALIDATE("Variant Code","Variant Code");
        PhysInvtRecordingLine.VALIDATE("Location Code","Location Code");
        PhysInvtRecordingLine.VALIDATE("Bin Code","Bin Code");

        PhysInvtRecordingLine.Description := Description;
        PhysInvtRecordingLine."Description 2" := "Description 2";

        PhysInvtRecordingLine."Use Tracking Lines" := "Use Tracking Lines";

        PhysInvtRecordingLine.VALIDATE("Unit of Measure Code","Base Unit of Measure Code");
        PhysInvtRecordingLine.Recorded := FALSE;

        PhysInvtRecordingLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

