OBJECT Table 5062 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record 5062;
               "NextAttachmentNo."@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               IF Attachment2.FINDLAST THEN
                 "NextAttachmentNo." := Attachment2."No." + 1
               ELSE
                 "NextAttachmentNo." := 1;

               "No." := "NextAttachmentNo.";

               RMSetup.GET;
               "Storage Type" := RMSetup."Attachment Storage Type";
               IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
                 RMSetup.TESTFIELD("Attachment Storage Location");
                 "Storage Pointer" := RMSetup."Attachment Storage Location";
               END;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=[ENU=Attachment;
               ESP=Anexo;
               DEA=Dateianhang];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[ENU=No.;
                                                              ESP=Nß;
                                                              DEA=Nr.];
                                                   NotBlank=Yes }
    { 2   ;   ;Attachment          ;BLOB          ;CaptionML=[ENU=Attachment;
                                                              ESP=Anexo;
                                                              DEA=Dateianhang] }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=[ENU=Storage Type;
                                                              ESP=Tipo almacenamiento;
                                                              DEA=Speicherungsart];
                                                   OptionCaptionML=[ENU=Embedded,Disk File,Exchange Storage;
                                                                    ESP=Incorporado,Archivo disco,Almacenamiento Exchange;
                                                                    DEA=Eingebettet,Extern,Speicherort Ñndern];
                                                   OptionString=Embedded,Disk File,Exchange Storage }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=[ENU=Storage Pointer;
                                                              ESP=Ruta archivo;
                                                              DEA=Speicherverweis] }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=[ENU=File Extension;
                                                              ESP=Extensi¢n archivo;
                                                              DEA=Dateierweiterung] }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=[ENU=Read Only;
                                                              ESP=S¢lo lectura;
                                                              DEA=SchreibgeschÅtzt] }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESP=Fecha £lt. modificaci¢n;
                                                              DEA=Korrigiert am] }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ESP=Èlt. hora modificaci¢n;
                                                              DEA=Korrigiert um] }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=[ENU=Merge Source;
                                                              ESP=Origen fusi¢n;
                                                              DEA=Datenquelle fÅr Seriendruck] }
    { 14  ;   ;Email Message ID    ;BLOB          ;CaptionML=[ENU=Email Message ID;
                                                              ESP=Id. mensaje correo elect.;
                                                              DEA=E-Mail-ID] }
    { 15  ;   ;Email Entry ID      ;BLOB          ;CaptionML=[ENU=Email Entry ID;
                                                              ESP=Id. mov. correo elect.;
                                                              DEA=E-Mail-Posten-ID] }
    { 16  ;   ;Email Message Checksum;Integer     ;CaptionML=[ENU=Email Message Checksum;
                                                              ESP=Suma comprob. mensaje correo elect.;
                                                              DEA=E-Mail-PrÅfsumme] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Email Message Checksum                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'ENU=The attachment is empty.;ESP=El anexo est† vac°o.;DEA=Der Dateianhang ist leer.';
      Text003@1003 : TextConst 'ENU=Attachment is already in use on this machine.;ESP=El anexo ya est† utiliz†ndose en esta m†quina.;DEA=Der Dateianhang wird auf diesem Computer bereits verwendet.';
      Text004@1004 : TextConst 'ENU=When you have saved your document, click Yes to import the document.;ESP=Cuando haya guardado su documento, pulse S° para importarlo.;DEA=Nachdem Sie Ihr Dokument gespeichert haben, klicken Sie auf Ja, um das Dokument zu importieren.';
      Text005@1005 : TextConst 'ENU=Export Attachment;ESP=Exportar anexo;DEA=Dateianhang exportieren';
      Text006@1006 : TextConst 'ENU=Import Attachment;ESP=Importar anexo;DEA=Dateianhang importieren';
      Text007@1007 : TextConst 'ENU=All Files (*.*)|*.*;ESP=Todos los archivos (*.*)|*.*;DEA=Alle Dateien (*.*)|*.*';
      Text008@1008 : TextConst 'ENU=Error during copying file.;ESP=Error al copiar el archivo.;DEA=Fehler beim Kopieren der Datei.';
      Text009@1009 : TextConst 'ENU=Do you want to remove %1?;ESP=®Confirma que desea eliminar %1?;DEA=Mîchten Sie %1 entfernen?';
      Text010@1010 : TextConst 'ENU=External file could not be removed.;ESP=Un archivo externo no se puede eliminar.;DEA=Externe Datei konnte nicht entfernt werden.';
      Text013@1013 : TextConst 'ENU=You can only print Microsoft Word documents.;ESP=S¢lo puede imprimir documentos de Microsoft Word.;DEA=Nur Microsoft Word-Dokumente kînnen gedruckt werden.';
      Text014@1014 : TextConst 'ENU=You can only fax Microsoft Word documents.;ESP=S¢lo puede enviar por fax documentos de Microsoft Word.;DEA=Nur Microsoft Word-Dokumente kînnen gefaxt werden.';
      Text015@1001 : TextConst 'ENU=The e-mail can not be displayed or has been deleted.;ESP=No se puede mostrar el mensaje de correo electr¢nico o se ha eliminado.;DEA=Die E-Mail kann nicht angezeigt werden oder wurde gelîscht.';
      Text016@1011 : TextConst 'ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?;ESP=Cuando haya terminado de trabajar con un documento, debe borrar el archivo temporal asociado. Por favor, tenga en cuenta que esto no eliminar† el documento.\\®Desea borrar el archivo temporal?;DEA=Wenn Sie die Arbeit an einem Dokument beendet haben, sollten Sie die zugehîrige temporÑre Datei lîschen. Beachten Sie, dass das Dokument dabei nicht gelîscht wird.\\Mîchten Sie die temporÑre Datei lîschen?';
      Text020@1022 : TextConst 'ENU=An Outlook dialog box is open. Close it and try again.;ESP=Hay un cuadro de di†logo de Outlook abierto. CiÇrrelo e intÇntelo de nuevo.;DEA=Ein Outlook-Dialogfeld ist geîffnet. Schlie·en Sie es, und wiederholen Sie anschlie·end den Vorgang.';
      TempBlob@1020 : Record 99008535;
      RMSetup@1015 : Record 5079;
      FileMgt@1000 : Codeunit 419;
      AttachmentMgt@1021 : Codeunit 5052;
      Text021@1012 : TextConst '@@@=Default.;ENU=Default.;ESP=Predeterminado.;DEA=Standard.';

    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean);
    VAR
      WordManagement@1002 : Codeunit 5054;
      FileName@1004 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN BEGIN
        CALCFIELDS(Attachment);
        IF NOT Attachment.HASVALUE THEN
          ERROR(Text002);
      END;

      FileName := ConstFilename;
      IF NOT DeleteFile(FileName) THEN
        ERROR(Text003);
      ExportAttachment(FileName);
      IF WordManagement.IsWordDocumentExtension("File Extension") THEN BEGIN
        WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary);
      END ELSE BEGIN
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachment(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record 5077;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean);
    VAR
      WordManagement@1003 : Codeunit 5054;
      FileName@1005 : Text;
    BEGIN
      IF WordManagement.IsWordDocumentExtension("File Extension") THEN
        WordManagement.ShowMergedDocument(SegLine,Rec,WordCaption,IsTemporary)
      ELSE BEGIN
        FileName := ConstFilename;
        IF "Storage Type" = "Storage Type"::Embedded THEN
          CALCFIELDS(Attachment);
        ExportAttachment(FileName);
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachment(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ExportAttachment@2(VAR ExportToFile@1000 : Text) : Boolean;
    VAR
      FileName@1002 : Text;
      FileFilter@1003 : Text[260];
    BEGIN
      RMSetup.GET;
      CASE "Storage Type" OF
        "Storage Type"::Embedded:
          BEGIN
            IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
              RMSetup.TESTFIELD("Attachment Storage Location");
            CALCFIELDS(Attachment);
            IF Attachment.HASVALUE THEN BEGIN
              TempBlob.Blob := Attachment;
              IF ExportToFile = '' THEN BEGIN
                FileName := Text021 + "File Extension";
                ExportToFile := FileMgt.BLOBExport(TempBlob,FileName,TRUE);
              END ELSE
                // If a filename is provided, the file will be treated as temp file.
                ExportToFile := FileMgt.BLOBExport(TempBlob,ExportToFile,FALSE);

              EXIT(TRUE);
            END;
            EXIT(FALSE)
          END;
        "Storage Type"::"Disk File":
          BEGIN
            IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
              RMSetup.TESTFIELD("Attachment Storage Location");

            FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
            EXIT(DOWNLOAD(ConstDiskFileName,Text005,'',FileFilter,ExportToFile))
          END;
      END;
    END;

    PROCEDURE ImportAttachment@5(ImportFromFile@1000 : Text;IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      FileName@1005 : Text;
      ServerFileName@1010 : Text;
      NewAttachmentNo@1003 : Integer;
    BEGIN
      IF IsTemporary THEN BEGIN
        FileName := FileMgt.BLOBImport(TempBlob,ImportFromFile);
        IF FileName <> '' THEN BEGIN
          Attachment := TempBlob.Blob;
          "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;

      TESTFIELD("Read Only",FALSE);
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");
      IF "Storage Pointer" = '' THEN
        "Storage Pointer" := RMSetup."Attachment Storage Location";

      IF IsInherited THEN BEGIN
        NewAttachmentNo := AttachmentMgt.InsertAttachment("No.");
        GET(NewAttachmentNo);
      END ELSE
        IF "No." = 0 THEN
          NewAttachmentNo := AttachmentMgt.InsertAttachment(0)
        ELSE
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);

      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN BEGIN
        ServerFileName := ConstDiskFileName;
        FileName := ImportFromFile;
        IF NOT UPLOAD(Text006,'',Text007,FileName,ServerFileName) THEN
          ERROR(Text008);
        IF FileName = '' THEN
          EXIT(FALSE);
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "Storage Type" := "Storage Type"::"Disk File";
        IF MODIFY(TRUE) THEN;
      END ELSE BEGIN
        FileName := ImportFromFile;
        FileName := FileMgt.BLOBImport(TempBlob,FileName);
        IF FileName = '' THEN
          EXIT(FALSE);
        Attachment := TempBlob.Blob;
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        "Storage Type" := "Storage Type"::Embedded;
        IF MODIFY(TRUE) THEN;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := FALSE;
      DeleteYesNo := TRUE;
      IF Prompt THEN
        IF NOT CONFIRM(
             Text009,FALSE,TABLECAPTION)
        THEN
          DeleteYesNo := FALSE;

      IF DeleteYesNo THEN BEGIN
        IF "Storage Type" = "Storage Type"::"Disk File" THEN
          IF NOT DeleteFile(ConstDiskFileName) THEN
            MESSAGE(Text010);
        DELETE(TRUE);
        DeleteOK := TRUE;
      END;
    END;

    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record 5062);
    VAR
      FileName@1001 : Text;
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      CASE FromAttachment."Storage Type" OF
        FromAttachment."Storage Type"::"Disk File":
          BEGIN
            FileName := FileMgt.BLOBImport(TempBlob,FromAttachment.ConstDiskFileName);
            IF FileName = '' THEN
              EXIT;
            Attachment := TempBlob.Blob;
          END;
        FromAttachment."Storage Type"::Embedded:
          BEGIN
            FromAttachment.CALCFIELDS(Attachment);
            IF FromAttachment.Attachment.HASVALUE THEN
              Attachment := FromAttachment.Attachment;
          END;
      END;
    END;

    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record 5062;
    BEGIN
      WITH RMSetup DO BEGIN
        GET;
        IF "Attachment Storage Type" = "Attachment Storage Type"::Embedded THEN BEGIN
          "Storage Pointer" := '';
          EXIT;
        END;
      END;

      "Storage Pointer" := RMSetup."Attachment Storage Location";

      WITH Attachment2 DO BEGIN
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      END;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    PROCEDURE DeleteFile@10(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile(FileName) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    PROCEDURE ConstFilename@9() FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName("File Extension");
    END;

    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text;
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.';
    END;

    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : ' ,Hard Copy,E-Mail,Fax') ErrorText@1000 : Text[80];
    BEGIN
      CASE CorrespondenceType OF
        CorrespondenceType::"Hard Copy":
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text013);
        CorrespondenceType::Fax:
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text014);
      END;
    END;

    PROCEDURE LinkToMessage@12(MessageID@1006 : Text;EntryID@1000 : Text;RunTrigger@1001 : Boolean);
    BEGIN
      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := TRUE;

      SetMessageID(MessageID);
      SetEntryID(EntryID);

      MODIFY(RunTrigger);
    END;

    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookHelper" RUNONCLIENT;
      Status@1002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookStatusCode" RUNONCLIENT;
    BEGIN
      Status := OutlookHelper.DisplayMailFromPublicFolder(GetEntryID);

      IF Status.Equals(Status.ModalDialogOpened) THEN
        ERROR(Text020);

      IF NOT Status.Equals(Status.Ok) THEN
        ERROR(Text015);
    END;

    PROCEDURE Checksum@14(MessageID@1000 : Text) ChecksumValue : Integer;
    VAR
      CharNo@1002 : Integer;
      DecValue@1003 : Decimal;
      MaxInteger@1004 : Integer;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;

      FOR CharNo := 1 TO STRLEN(MessageID) DO
        DecValue := (DecValue + (((MessageID[CharNo] MOD 43) + 1) * RANDOM((MaxInteger DIV 44)))) MOD MaxInteger;
      ChecksumValue := DecValue;
    END;

    PROCEDURE GetMessageID@15() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Message ID");
      "Email Message ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetMessageID@16(MessageID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Message ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(MessageID);
      "Email Message Checksum" := Checksum(MessageID);
    END;

    PROCEDURE GetEntryID@17() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Entry ID");
      "Email Entry ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetEntryID@18(EntryID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Entry ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(EntryID);
    END;

    BEGIN
    END.
  }
}

