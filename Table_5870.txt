OBJECT Table 5870 BOM Buffer
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=;
    DataCaptionFields=No.,Description;
    CaptionML=[ENU=BOM Buffer;
               ESP=Almacenaje L.M.;
               DEA=StÅcklistenpuffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ESP=Nß mov.;
                                                              DEA=Lfd. Nr.] }
    { 2   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo;
                                                              DEA=Art];
                                                   OptionCaptionML=[ENU=,Item,Machine Center,Work Center,Resource;
                                                                    ESP=,Producto,Centro m†quina,Centro trabajo,Recurso;
                                                                    DEA=,Artikel,Arbeitsplatz,Arbeitsplatzgruppe,Ressource];
                                                   OptionString=,Item,Machine Center,Work Center,Resource }
    { 3   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   CaptionML=[ENU=No.;
                                                              ESP=Nß;
                                                              DEA=Nr.] }
    { 5   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 6   ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida;
                                                              DEA=Einheitencode] }
    { 7   ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              DEA=Variantencode] }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacÇn;
                                                              DEA=Lagerortcode] }
    { 9   ;   ;Replenishment System;Option        ;CaptionML=[ENU=Replenishment System;
                                                              ESP=Sistema reposici¢n;
                                                              DEA=Beschaffungsmethode];
                                                   OptionCaptionML=[ENU=Purchase,Prod. Order, ,Assembly;
                                                                    ESP=Compra,Orden prod., ,Ensamblado;
                                                                    DEA=Einkauf,Fertigungsauftrag, ,Montage];
                                                   OptionString=Purchase,Prod. Order, ,Assembly }
    { 10  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ESP=Indentar;
                                                              DEA=EinrÅckung] }
    { 11  ;   ;Is Leaf             ;Boolean       ;CaptionML=[ENU=Is Leaf;
                                                              ESP=Es una hoja;
                                                              DEA=Ist Blatt] }
    { 13  ;   ;Bottleneck          ;Boolean       ;CaptionML=[ENU=Bottleneck;
                                                              ESP=Cuello de botella;
                                                              DEA=Flaschenhals] }
    { 15  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ESP=Nß ruta;
                                                              DEA=Arbeitsplannr.] }
    { 16  ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header";
                                                   CaptionML=[ENU=Production BOM No.;
                                                              ESP=Nß L.M. producci¢n;
                                                              DEA=Fert.-StÅcklistennr.] }
    { 20  ;   ;Lot Size            ;Decimal       ;CaptionML=[ENU=Lot Size;
                                                              ESP=Tama§o lote;
                                                              DEA=Losgrî·e];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              ESP=C¢d. nivel m†s bajo;
                                                              DEA=StÅcklistenebene];
                                                   Editable=No }
    { 22  ;   ;Rounding Precision  ;Decimal       ;InitValue=1;
                                                   CaptionML=[ENU=Rounding Precision;
                                                              ESP=Precisi¢n redondeo;
                                                              DEA=RundungsprÑzision];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Qty. per Parent     ;Decimal       ;CaptionML=[ENU=Qty. per Parent;
                                                              ESP=Cdad. por elemento primario;
                                                              DEA=Menge pro Åbergeord. Element];
                                                   DecimalPlaces=0:5 }
    { 31  ;   ;Qty. per Top Item   ;Decimal       ;CaptionML=[ENU=Qty. per Top Item;
                                                              ESP=Cdad. por prod. ppal.;
                                                              DEA=Menge pro Åbergeord. Artikel];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Able to Make Top Item;Decimal      ;CaptionML=[ENU=Able to Make Top Item;
                                                              ESP=Puede hacer prod. ppal.;
                                                              DEA=Festlegen als Åbergeord. Artikel mîglich];
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Able to Make Parent ;Decimal       ;CaptionML=[ENU=Able to Make Parent;
                                                              ESP=Puede hacer elemento primario;
                                                              DEA=Festlegen als Åbergeord. Element mîglich];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Available Quantity  ;Decimal       ;CaptionML=[ENU=Available Quantity;
                                                              ESP=Cdad. disponible;
                                                              DEA=VerfÅgbare Menge];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Gross Requirement   ;Decimal       ;CaptionML=[ENU=Gross Requirement;
                                                              ESP=Necesidades brutas;
                                                              DEA=Bruttobedarf];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Scheduled Receipts  ;Decimal       ;CaptionML=[ENU=Scheduled Receipts;
                                                              ESP=Recep. previstas;
                                                              DEA=Geplante ZugÑnge];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Unused Quantity     ;Decimal       ;CaptionML=[ENU=Unused Quantity;
                                                              ESP=Cantidad no utilizada;
                                                              DEA=Nicht verwendete Menge];
                                                   DecimalPlaces=0:5 }
    { 40  ;   ;Lead Time Calculation;DateFormula  ;CaptionML=[ENU=Lead Time Calculation;
                                                              ESP=Plazo entrega (d°as);
                                                              DEA=Beschaffungszeit] }
    { 41  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=[ENU=Lead-Time Offset;
                                                              ESP=Desfase plazo entrega;
                                                              DEA=Vorlaufzeitverschiebung] }
    { 42  ;   ;Rolled-up Lead-Time Offset;Integer ;CaptionML=[ENU=Rolled-up Lead-Time Offset;
                                                              ESP=Distrib. desfase plazo entrega;
                                                              DEA=Mehrstufige Vorlaufzeitverschiebung] }
    { 43  ;   ;Needed by Date      ;Date          ;CaptionML=[ENU=Needed by Date;
                                                              ESP=Fecha en que se necesita;
                                                              DEA=Benîtigt am] }
    { 45  ;   ;Safety Lead Time    ;DateFormula   ;CaptionML=[ENU=Safety Lead Time;
                                                              ESP=Plazo de seguridad;
                                                              DEA=Sicherh.-Zuschl. Beschaff.-Zt.] }
    { 50  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario;
                                                              DEA=Einstandspreis];
                                                   AutoFormatType=2 }
    { 52  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto;
                                                              DEA=Indirekte Kosten %];
                                                   DecimalPlaces=0:5 }
    { 54  ;   ;Overhead Rate       ;Decimal       ;CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales;
                                                              DEA=Gemeinkostensatz];
                                                   AutoFormatType=2 }
    { 55  ;   ;Scrap %             ;Decimal       ;CaptionML=[ENU=Scrap %;
                                                              ESP=% Rechazo;
                                                              DEA=Ausschuss %];
                                                   BlankZero=Yes }
    { 56  ;   ;Scrap Qty. per Parent;Decimal      ;CaptionML=[ENU=Scrap Qty. per Parent;
                                                              ESP=Cdad. rechazo por elemento primario;
                                                              DEA=Ausschussmenge pro Åbergeord. Element];
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Scrap Qty. per Top Item;Decimal    ;CaptionML=[ENU=Scrap Qty. per Top Item;
                                                              ESP=Cdad. rechazo por prod. ppal.;
                                                              DEA=Ausschussmenge pro Åbergeord. Artikel];
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Resource Usage Type ;Option        ;CaptionML=[ENU=Resource Usage Type;
                                                              ESP=Tipo utiliz. recursos;
                                                              DEA=Ressourcenverbrauchsart];
                                                   OptionCaptionML=[ENU=Direct,Fixed;
                                                                    ESP=Directo,Fijo;
                                                                    DEA=Direkt,Fix];
                                                   OptionString=Direct,Fixed }
    { 61  ;   ;Single-Level Material Cost;Decimal ;CaptionML=[ENU=Single-Level Material Cost;
                                                              ESP=Coste material a un nivel;
                                                              DEA=Einstufige Materialkosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 62  ;   ;Single-Level Capacity Cost;Decimal ;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              ESP=Coste capacidad a un nivel;
                                                              DEA=Einstufige KapazitÑtskosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 63  ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              ESP=Coste subcontrat. a un nivel;
                                                              DEA=Einstufige Fremdarbeitskosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 64  ;   ;Single-Level Cap. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              ESP=Costes gen. cap. a un nivel;
                                                              DEA=Einstufige Kap.-Gemeinkosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 65  ;   ;Single-Level Mfg. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              ESP=Coste gen. fab. a un nivel;
                                                              DEA=Einstufige Prod.-Gemeinkosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   AutoFormatType=2 }
    { 66  ;   ;Single-Level Scrap Cost;Decimal    ;CaptionML=[ENU=Single-Level Scrap Cost;
                                                              ESP=Coste rechazo a un nivel;
                                                              DEA=Einstufige Ausschusskosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
    { 71  ;   ;Rolled-up Material Cost;Decimal    ;CaptionML=[ENU=Rolled-up Material Cost;
                                                              ESP=Coste material distribuido;
                                                              DEA=Mehrstufige Materialkosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 72  ;   ;Rolled-up Capacity Cost;Decimal    ;CaptionML=[ENU=Rolled-up Capacity Cost;
                                                              ESP=Coste capacidad distribuida;
                                                              DEA=Mehrstufige KapazitÑtskosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 73  ;   ;Rolled-up Subcontracted Cost;Decimal;
                                                   CaptionML=[ENU=Rolled-up Subcontracted Cost;
                                                              ESP=Coste subcontratado distrib.;
                                                              DEA=Mehrstufige Fremdarbeitskosten];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 74  ;   ;Rolled-up Capacity Ovhd. Cost;Decimal;
                                                   CaptionML=[ENU=Rolled-up Capacity Ovhd. Cost;
                                                              ESP=Coste gen. capacidad distribuida;
                                                              DEA=Mehrstufige KapazitÑtsgemeinkosten];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 75  ;   ;Rolled-up Mfg. Ovhd Cost;Decimal   ;CaptionML=[ENU=Rolled-up Mfg. Ovhd Cost;
                                                              ESP=Costes gen. fabr. distrib.;
                                                              DEA=Mehrstufige Prod.-Gemeinkosten];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 76  ;   ;Rolled-up Scrap Cost;Decimal       ;CaptionML=[ENU=Rolled-up Scrap Cost;
                                                              ESP=Coste rechazo distrib.;
                                                              DEA=Mehrstufige Ausschusskosten];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
    { 81  ;   ;Total Cost          ;Decimal       ;CaptionML=[ENU=Total Cost;
                                                              ESP=Coste total;
                                                              DEA=Einstandsbetrag];
                                                   DecimalPlaces=2:5;
                                                   BlankZero=Yes }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Low-Level Code                           }
    {    ;Type,No.,Indentation                    ;SumIndexFields=Able to Make Parent }
    {    ;Total Cost                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1009 : Record 98;
      Text001@1008 : TextConst 'ENU=The Low-level Code for Item %1 has not been calculated.;ESP=El c¢digo de bajo nivel para el producto %1 no se ha calculado.;DEA=Die StÅcklistenebene fÅr Artikel %1 wurde nicht berechnet.';
      Text002@1007 : TextConst 'ENU=The Quantity per. field in the BOM for Item %1 has not been set.;ESP=El campo Cantidad por de la L.M. del producto %1 no se ha establecido.;DEA=Die Komponentenmenge pro Feld in der StÅckliste fÅr Artikel %1 wurde nicht festgelegt.';
      Text003@1006 : TextConst 'ENU=Routing %1 has not been certified.;ESP=La ruta %1 no se ha certificado.;DEA=Arbeitsplan %1 wurde nicht zertifiziert.';
      Text004@1005 : TextConst 'ENU=Production BOM %1 has not been certified.;ESP=La L.M. de producci¢n %1 no se ha certificado.;DEA=FertigungsstÅckliste %1 wurde nicht zertifiziert.';
      Text005@1004 : TextConst 'ENU=Item %1 is not a BOM. Therefore, the Replenishment System field must be set to Purchase.;ESP=El producto %1 no es una L.M. Por lo tanto, el campo Sistema reposici¢n debe esta establecido en Compra.;DEA=Artikel %1 ist keine StÅckliste. Als Beschaffungsmethode muss daher ''Einkauf'' festgelegt werden.';
      Text006@1003 : TextConst 'ENU=Replenishment System for Item %1 is Assembly, but the item is not an assembly BOM. Verify that this is correct.;ESP=El sistema de reposici¢n para el producto %1 es Ensamblado, pero el producto no es una L.M. de ensamblado. Compruebe que esto es correcto.;DEA=Die Beschaffungsmethode fÅr Artikel %1 lautet ''Montage'', aber der Artikel ist keine MontagestÅckliste. öberprÅfen Sie die Richtigkeit dieser Einstellung.';
      Text007@1002 : TextConst 'ENU=Replenishment System for Item %1 is Prod. Order, but the item does not have a production BOM. Verify that this is correct.;ESP=El sistema de reposici¢n para el producto %1 es Ord. prod., pero el producto no tiene una L.M. de producci¢n. Compruebe que esto es correcto.;DEA=Die Beschaffungsmethode fÅr Artikel %1 lautet ''Fertigungsauftrag'', aber der Artikel ist keine FertigungsstÅckliste. öberprÅfen Sie die Richtigkeit dieser Einstellung.';
      Text008@1001 : TextConst 'ENU=Item %1 is a BOM, but the Replenishment System field is not set to Assembly or Prod. Order. Verify that the value is correct.;ESP=El producto %1 tiene una L.M. pero el sistema de reposici¢n no es Ensamblado o Ord. prod. Compruebe que el valor es correcto.;DEA=Artikel %1 ist eine StÅckliste, aber die Beschaffungsmethode lautet nicht ''Montage'' oder ''Fertigungsauftrag''. öberprÅfen Sie die Richtigkeit dieser Einstellung.';
      GLSetupRead@1010 : Boolean;

    PROCEDURE TransferFromItem@4(VAR EntryNo@1003 : Integer;Item@1001 : Record 27;DemandDate@1002 : Date);
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      InitFromItem(Item);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Needed by Date" := DemandDate;
      Indentation := 0;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromAsmHeader@7(VAR EntryNo@1001 : Integer;AsmHeader@1003 : Record 900);
    VAR
      BOMItem@1000 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmHeader."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Location Code" := AsmHeader."Location Code";
      "Variant Code" := AsmHeader."Variant Code";
      "Needed by Date" := AsmHeader."Due Date";
      Indentation := 0;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromAsmLine@8(VAR EntryNo@1001 : Integer;AsmLine@1000 : Record 901);
    VAR
      BOMItem@1002 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmLine."No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := AsmLine."Quantity per";
      "Qty. per Top Item" := AsmLine."Quantity per";
      "Unit of Measure Code" := AsmLine."Unit of Measure Code";
      "Location Code" := AsmLine."Location Code";
      "Variant Code" := AsmLine."Variant Code";
      "Needed by Date" := AsmLine."Due Date";
      "Lead-Time Offset" := AsmLine."Lead-Time Offset";
      Indentation := 1;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromBOMComp@5(VAR EntryNo@1003 : Integer;BOMComp@1002 : Record 90;NewIndentation@1004 : Integer;ParentQtyPer@1001 : Decimal;ParentScrapQtyPer@1005 : Decimal;NeedByDate@1008 : Date;ParentLocationCode@1006 : Code[10]);
    VAR
      BOMItem@1000 : Record 27;
      BOMRes@1007 : Record 156;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      CASE BOMComp.Type OF
        BOMComp.Type::Item:
          BEGIN
            BOMItem.GET(BOMComp."No.");
            InitFromItem(BOMItem);
          END;
        BOMComp.Type::Resource:
          BEGIN
            BOMRes.GET(BOMComp."No.");
            InitFromRes(BOMRes);
            "Resource Usage Type" := BOMComp."Resource Usage Type";
          END;
      END;

      "Qty. per Parent" := BOMComp."Quantity per";
      "Qty. per Top Item" := ROUND(BOMComp."Quantity per" * ParentQtyPer,0.00001);

      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" - ROUND((ParentQtyPer - ParentScrapQtyPer) * "Qty. per Parent",0.00001);

      "Unit of Measure Code" := BOMComp."Unit of Measure Code";
      "Variant Code" := BOMComp."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := BOMComp."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromProdComp@6(VAR EntryNo@1007 : Integer;ProdBOMLine@1000 : Record 99000772;NewIndentation@1003 : Integer;ParentQtyPer@1002 : Decimal;ParentScrapQtyPer@1006 : Decimal;ParentScrapPct@1017 : Decimal;NeedByDate@1001 : Date;ParentLocationCode@1005 : Code[10];RoutingNo@1011 : Code[20];LotSize@1012 : Decimal);
    VAR
      BOMItem@1004 : Record 27;
      UOMMgt@1010 : Codeunit 5402;
      CostCalculationMgt@1020 : Codeunit 5836;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdBOMLine."No.");
      InitFromItem(BOMItem);

      IF LotSize = 0 THEN
        LotSize := 1;

      "Qty. per Parent" :=
        ROUND(
          CostCalculationMgt.CalcCompItemQtyBase(
            ProdBOMLine,WORKDATE,
            CostCalculationMgt.CalcQtyAdjdForBOMScrap(LotSize,ParentScrapPct),RoutingNo,TRUE) /
          UOMMgt.GetQtyPerUnitOfMeasure(BOMItem,ProdBOMLine."Unit of Measure Code") / LotSize,
          0.00001);
      "Qty. per Top Item" := ROUND("Qty. per Parent" * ParentQtyPer,0.00001);

      "Scrap Qty. per Parent" := "Qty. per Parent" - ProdBOMLine."Quantity per";
      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" -
        ROUND((ParentQtyPer - ParentScrapQtyPer) * ("Qty. per Parent" - "Scrap Qty. per Parent"),0.00001);

      "Unit of Measure Code" := ProdBOMLine."Unit of Measure Code";
      "Variant Code" := ProdBOMLine."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := ProdBOMLine."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromProdOrderLine@26(VAR EntryNo@1001 : Integer;ProdOrderLine@1003 : Record 5406);
    VAR
      BOMItem@1000 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderLine."Item No.");
      InitFromItem(BOMItem);

      "Scrap %" := ProdOrderLine."Scrap %";
      "Production BOM No." := ProdOrderLine."Production BOM No.";
      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Needed by Date" := ProdOrderLine."Due Date";
      Indentation := 0;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromProdOrderComp@25(VAR EntryNo@1003 : Integer;ProdOrderComp@1000 : Record 5407);
    VAR
      BOMItem@1002 : Record 27;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderComp."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := ProdOrderComp."Quantity per";
      "Qty. per Top Item" := ProdOrderComp."Quantity per";
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Needed by Date" := ProdOrderComp."Due Date";
      "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
      Indentation := 1;

      INSERT(TRUE);
    END;

    PROCEDURE TransferFromProdRouting@14(VAR EntryNo@1007 : Integer;RoutingLine@1000 : Record 99000764;NewIndentation@1005 : Integer;ParentQtyPer@1004 : Decimal;NeedByDate@1003 : Date;ParentLocationCode@1002 : Code[10]);
    VAR
      MachineCtr@1001 : Record 99000758;
      WorkCtr@1006 : Record 99000754;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      CASE RoutingLine.Type OF
        RoutingLine.Type::"Machine Center":
          BEGIN
            MachineCtr.GET(RoutingLine."No.");
            InitFromMachCtr(MachineCtr);
          END;
        RoutingLine.Type::"Work Center":
          BEGIN
            WorkCtr.GET(RoutingLine."No.");
            InitFromWorkCtr(WorkCtr);
          END;
      END;

      "Qty. per Parent" := RoutingLine."Setup Time" + RoutingLine."Run Time" + RoutingLine."Wait Time" + RoutingLine."Move Time";
      "Qty. per Top Item" := "Qty. per Parent" * ParentQtyPer;
      "Location Code" := ParentLocationCode;
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(TRUE);
    END;

    LOCAL PROCEDURE InitFromItem@19(Item@1001 : Record 27);
    BEGIN
      Type := Type::Item;
      "No." := Item."No.";
      Description := Item.Description;
      "Unit of Measure Code" := Item."Base Unit of Measure";

      "Production BOM No." := Item."Production BOM No.";
      "Routing No." := Item."Routing No.";
      "Replenishment System" := Item."Replenishment System";
      "Lot Size" := Item."Lot Size";
      "Scrap %" := Item."Scrap %";
      "Indirect Cost %" := Item."Indirect Cost %";
      "Overhead Rate" := Item."Overhead Rate";
      "Low-Level Code" := Item."Low-Level Code";
      "Rounding Precision" := Item."Rounding Precision";
      "Lead Time Calculation" := Item."Lead Time Calculation";
      "Safety Lead Time" := Item."Safety Lead Time";
    END;

    PROCEDURE InitFromRes@3(Res@1000 : Record 156);
    BEGIN
      Type := Type::Resource;
      "No." := Res."No.";
      Description := Res.Name;
      "Unit of Measure Code" := Res."Base Unit of Measure";
      "Replenishment System" := "Replenishment System"::" ";
      "Is Leaf" := TRUE;
    END;

    PROCEDURE InitFromMachCtr@10(MachineCtr@1000 : Record 99000758);
    BEGIN
      Type := Type::"Machine Center";
      "No." := MachineCtr."No.";
      Description := MachineCtr.Name;

      "Replenishment System" := "Replenishment System"::" ";
      "Is Leaf" := TRUE;
    END;

    PROCEDURE InitFromWorkCtr@11(WorkCtr@1000 : Record 99000754);
    BEGIN
      Type := Type::"Work Center";
      "No." := WorkCtr."No.";
      Description := WorkCtr.Name;
      "Unit of Measure Code" := WorkCtr."Unit of Measure Code";

      "Replenishment System" := "Replenishment System"::" ";
      "Is Leaf" := TRUE;
    END;

    LOCAL PROCEDURE SetAbleToMakeToZeroIfNegative@1();
    BEGIN
      IF "Able to Make Parent" < 0 THEN
        "Able to Make Parent" := 0;
      IF "Able to Make Top Item" < 0 THEN
        "Able to Make Top Item" := 0;
    END;

    PROCEDURE UpdateAbleToMake@2(AvailQty@1000 : Decimal);
    BEGIN
      IF "Is Leaf" THEN BEGIN
        IF "Qty. per Parent" <> 0 THEN
          "Able to Make Parent" := ROUND(AvailQty / "Qty. per Parent",0.00001);
        IF "Qty. per Top Item" <> 0 THEN
          "Able to Make Top Item" := ROUND(AvailQty / "Qty. per Top Item",0.00001);
      END ELSE
        IF Indentation = 0 THEN BEGIN
          "Able to Make Parent" := "Able to Make Parent";
          "Able to Make Top Item" := "Able to Make Top Item";
        END ELSE BEGIN
          IF "Qty. per Parent" <> 0 THEN
            "Able to Make Parent" := ROUND((AvailQty + "Able to Make Parent") / "Qty. per Parent",0.00001);
          IF "Qty. per Top Item" <> 0 THEN
            "Able to Make Top Item" := ROUND(AvailQty / "Qty. per Top Item" + "Able to Make Top Item",0.00001);
        END;

      SetAbleToMakeToZeroIfNegative;
    END;

    PROCEDURE AddMaterialCost@20(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Material Cost" += SingleLvlCostAmt;
      "Rolled-up Material Cost" += RolledUpCostAmt;
    END;

    PROCEDURE AddCapacityCost@9(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Capacity Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Cost" += RolledUpCostAmt;
    END;

    PROCEDURE AddSubcontrdCost@18(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Subcontrd. Cost" += SingleLvlCostAmt;
      "Rolled-up Subcontracted Cost" += RolledUpCostAmt;
    END;

    PROCEDURE AddCapOvhdCost@17(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Cap. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Ovhd. Cost" += RolledUpCostAmt;
    END;

    PROCEDURE AddMfgOvhdCost@12(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Mfg. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Mfg. Ovhd Cost" += RolledUpCostAmt;
    END;

    PROCEDURE AddScrapCost@23(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Scrap Cost" += SingleLvlCostAmt;
      "Rolled-up Scrap Cost" += RolledUpCostAmt;
    END;

    PROCEDURE GetItemCosts@13();
    VAR
      Item@1000 : Record 27;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      TESTFIELD(Type,Type::Item);
      Item.GET("No.");

      "Unit Cost" := Item."Unit Cost";
      "Single-Level Material Cost" := "Unit Cost";
      "Rolled-up Material Cost" := "Single-Level Material Cost";

      IF "Qty. per Parent" <> 0 THEN
        "Single-Level Scrap Cost" := "Single-Level Material Cost" * "Scrap Qty. per Parent" / "Qty. per Parent";
      IF "Qty. per Top Item" <> 0 THEN
        "Rolled-up Scrap Cost" := "Rolled-up Material Cost" * "Scrap Qty. per Top Item" / "Qty. per Top Item";
      RoundCosts(UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    PROCEDURE GetResCosts@15();
    VAR
      Res@1000 : Record 156;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      TESTFIELD(Type,Type::Resource);
      Res.GET("No.");

      "Unit Cost" := Res."Unit Cost";
      "Indirect Cost %" := Res."Indirect Cost %";

      "Single-Level Capacity Cost" := Res."Direct Unit Cost";
      "Single-Level Cap. Ovhd Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      "Rolled-up Capacity Cost" := Res."Direct Unit Cost";
      "Rolled-up Capacity Ovhd. Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      IF "Resource Usage Type" = "Resource Usage Type"::Fixed THEN
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Parent")
      ELSE
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    PROCEDURE RoundCosts@77(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      "Single-Level Material Cost" := RoundUnitAmt("Single-Level Material Cost",ShareOfTotalCost);
      "Single-Level Capacity Cost" := RoundUnitAmt("Single-Level Capacity Cost",ShareOfTotalCost);
      "Single-Level Subcontrd. Cost" := RoundUnitAmt("Single-Level Subcontrd. Cost",ShareOfTotalCost);
      "Single-Level Cap. Ovhd Cost" := RoundUnitAmt("Single-Level Cap. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Scrap Cost" := RoundUnitAmt("Single-Level Scrap Cost",ShareOfTotalCost);

      "Rolled-up Material Cost" := RoundUnitAmt("Rolled-up Material Cost",ShareOfTotalCost);
      "Rolled-up Capacity Cost" := RoundUnitAmt("Rolled-up Capacity Cost",ShareOfTotalCost);
      "Rolled-up Subcontracted Cost" := RoundUnitAmt("Rolled-up Subcontracted Cost",ShareOfTotalCost);
      "Rolled-up Capacity Ovhd. Cost" := RoundUnitAmt("Rolled-up Capacity Ovhd. Cost",ShareOfTotalCost);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",ShareOfTotalCost);
      "Rolled-up Scrap Cost" := RoundUnitAmt("Rolled-up Scrap Cost",ShareOfTotalCost);
    END;

    LOCAL PROCEDURE RoundUnitAmt@39(Amt@1001 : Decimal;ShareOfCost@1000 : Decimal) : Decimal;
    BEGIN
      GetGLSetup;
      EXIT(ROUND(Amt * ShareOfCost,GLSetup."Unit-Amount Rounding Precision"));
    END;

    PROCEDURE CalcOvhdCost@21();
    VAR
      Item@1002 : Record 27;
      UOMMgt@1001 : Codeunit 5402;
      LotSize@1000 : Decimal;
    BEGIN
      LotSize := 1;
      IF "Lot Size" <> 0 THEN
        LotSize := "Lot Size";

      Item.GET("No.");

      "Overhead Rate" :=
        RoundUnitAmt("Overhead Rate",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");

      "Single-Level Mfg. Ovhd Cost" +=
        (("Single-Level Material Cost" +
          "Single-Level Capacity Cost" +
          "Single-Level Subcontrd. Cost" +
          "Single-Level Cap. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",1);

      "Rolled-up Mfg. Ovhd Cost" +=
        (("Rolled-up Material Cost" +
          "Rolled-up Capacity Cost" +
          "Rolled-up Subcontracted Cost" +
          "Rolled-up Capacity Ovhd. Cost" +
          "Rolled-up Mfg. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",1);
    END;

    PROCEDURE CalcDirectCost@27() : Decimal;
    BEGIN
      EXIT(
        "Single-Level Material Cost" +
        "Single-Level Capacity Cost" +
        "Single-Level Subcontrd. Cost");
    END;

    PROCEDURE CalcIndirectCost@24() : Decimal;
    BEGIN
      EXIT("Single-Level Mfg. Ovhd Cost" + "Single-Level Cap. Ovhd Cost");
    END;

    PROCEDURE CalcUnitCost@16();
    BEGIN
      "Total Cost" := CalcDirectCost + CalcIndirectCost;
      "Unit Cost" := 0;
      IF "Qty. per Top Item" <> 0 THEN
        "Unit Cost" := ROUND("Total Cost" / "Qty. per Top Item",0.00001);
    END;

    PROCEDURE CalcScrapCost@22(ScrapPct@1000 : Decimal);
    BEGIN
      "Single-Level Scrap Cost" :=
        ("Single-Level Material Cost" +
         "Single-Level Capacity Cost" +
         "Single-Level Subcontrd. Cost" +
         "Single-Level Cap. Ovhd Cost" +
         "Single-Level Mfg. Ovhd Cost" +
         "Single-Level Scrap Cost") *
        ScrapPct / 100;
      "Single-Level Scrap Cost" := RoundUnitAmt("Single-Level Scrap Cost",1);

      "Rolled-up Scrap Cost" :=
        ("Rolled-up Material Cost" +
         "Rolled-up Capacity Cost" +
         "Rolled-up Subcontracted Cost" +
         "Rolled-up Capacity Ovhd. Cost" +
         "Rolled-up Mfg. Ovhd Cost" +
         "Rolled-up Scrap Cost") *
        ScrapPct / 100;
      "Rolled-up Scrap Cost" := RoundUnitAmt("Rolled-up Scrap Cost",1);
    END;

    LOCAL PROCEDURE IsLowLevelOk@33(LogWarning@1000 : Boolean;VAR BOMWarningLog@1005 : Record 5874) : Boolean;
    VAR
      Item@1004 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      IF TraverseIsLowLevelOk(Item) THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text001,Item."No."),DATABASE::Item,Item.GETPOSITION);
    END;

    LOCAL PROCEDURE TraverseIsLowLevelOk@36(ParentItem@1000 : Record 27) : Boolean;
    VAR
      ParentBOMBuffer@1001 : Record 5870;
      ChildItem@1004 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      ParentItem.GET("No.");
      ParentBOMBuffer := Rec;
      WHILE (NEXT <> 0) AND (ParentBOMBuffer.Indentation < Indentation) DO
        IF (ParentBOMBuffer.Indentation + 1 = Indentation) AND (Type = Type::Item) AND ("No." <> '') THEN BEGIN
          ChildItem.GET("No.");
          IF ParentItem."Low-Level Code" >= ChildItem."Low-Level Code" THEN BEGIN
            Rec := ParentBOMBuffer;
            EXIT(FALSE);
          END;
        END;

      Rec := ParentBOMBuffer;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsQtyPerOk@32(LogWarning@1000 : Boolean;VAR BOMWarningLog@1004 : Record 5874) : Boolean;
    VAR
      Item@1002 : Record 27;
      CopyOfBOMBuffer@1001 : Record 5870;
      ProdBOMHeader@1005 : Record 99000771;
    BEGIN
      IF "Qty. per Parent" <> 0 THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);
      IF Indentation = 0 THEN
        EXIT(TRUE);
      IF Type IN [Type::"Machine Center",Type::"Work Center"] THEN
        EXIT(TRUE);

      IF LogWarning THEN BEGIN
        CopyOfBOMBuffer.COPY(Rec);
        RESET;
        SETRANGE(Indentation,0,Indentation);
        SETRANGE(Type,Type::Item);
        WHILE (NEXT(-1) <> 0) AND (Indentation >= CopyOfBOMBuffer.Indentation) DO
          ;
        IF "Entry No." <> CopyOfBOMBuffer."Entry No." THEN BEGIN
          Item.GET("No.");
          Item.CALCFIELDS("Assembly BOM");
          IF Item."Assembly BOM" THEN
            BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::Item,Item.GETPOSITION)
          ELSE
            IF ProdBOMHeader.GET(Item."Production BOM No.") THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION)
        END;
        COPY(CopyOfBOMBuffer);
      END;
    END;

    LOCAL PROCEDURE IsProdBOMOk@31(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      ProdBOMHeader@1000 : Record 99000771;
    BEGIN
      IF "Production BOM No." = '' THEN
        EXIT(TRUE);
      ProdBOMHeader.GET("Production BOM No.");
      IF ProdBOMHeader.Status = ProdBOMHeader.Status::Certified THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text004,ProdBOMHeader."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsRoutingOk@30(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      IF "Routing No." = '' THEN
        EXIT(TRUE);
      RoutingHeader.GET("Routing No.");
      IF RoutingHeader.Status = RoutingHeader.Status::Certified THEN
        EXIT(TRUE);

      IF LogWarning THEN
        BOMWarningLog.SetWarning(STRSUBSTNO(Text003,RoutingHeader."No."),DATABASE::"Routing Header",RoutingHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsReplenishmentOk@29(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      IF "Is Leaf" THEN BEGIN
        IF Item."Replenishment System" IN ["Replenishment System"::Purchase,"Replenishment System"::" "] THEN
          EXIT(TRUE);
        IF LogWarning THEN
          BOMWarningLog.SetWarning(STRSUBSTNO(Text005,Item."No."),DATABASE::Item,Item.GETPOSITION);
      END ELSE BEGIN
        IF Item."Replenishment System" IN ["Replenishment System"::"Prod. Order","Replenishment System"::Assembly] THEN
          EXIT(IsBOMOk(LogWarning,BOMWarningLog));
        IF LogWarning THEN
          BOMWarningLog.SetWarning(STRSUBSTNO(Text008,Item."No."),DATABASE::Item,Item.GETPOSITION);
      END;
    END;

    LOCAL PROCEDURE IsBOMOk@28(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record 5874) : Boolean;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(TRUE);
      IF "No." = '' THEN
        EXIT(TRUE);

      Item.GET("No.");
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            Item.CALCFIELDS("Assembly BOM");
            IF Item."Assembly BOM" THEN
              EXIT(TRUE);
            IF LogWarning THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text006,Item."No."),DATABASE::Item,Item.GETPOSITION);
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            IF Item."Production BOM No." <> '' THEN
              EXIT(TRUE);
            IF LogWarning THEN
              BOMWarningLog.SetWarning(STRSUBSTNO(Text007,Item."No."),DATABASE::Item,Item.GETPOSITION);
          END;
        ELSE
          EXIT(TRUE);
      END;
    END;

    PROCEDURE IsLineOk@34(LogWarning@1000 : Boolean;VAR BOMWarningLog@1001 : Record 5874) : Boolean;
    BEGIN
      EXIT(
        IsLowLevelOk(LogWarning,BOMWarningLog) AND
        IsQtyPerOk(LogWarning,BOMWarningLog) AND
        IsProdBOMOk(LogWarning,BOMWarningLog) AND
        IsRoutingOk(LogWarning,BOMWarningLog) AND
        IsReplenishmentOk(LogWarning,BOMWarningLog));
    END;

    PROCEDURE AreAllLinesOk@35(VAR BOMWarningLog@1000 : Record 5874) IsOk : Boolean;
    VAR
      CopyOfBOMBuffer@1001 : Record 5870;
    BEGIN
      IsOk := TRUE;
      CopyOfBOMBuffer.COPY(Rec);

      BOMWarningLog.RESET;
      BOMWarningLog.DELETEALL;

      RESET;
      IF FINDSET THEN
        REPEAT
          IF NOT IsLineOk(TRUE,BOMWarningLog) THEN
            IsOk := FALSE;
        UNTIL NEXT = 0;
      COPY(CopyOfBOMBuffer);
    END;

    LOCAL PROCEDURE GetGLSetup@37();
    BEGIN
      IF GLSetupRead THEN
        EXIT;
      GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    BEGIN
    END.
  }
}

