OBJECT Table 99000829 Planning Component
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ReservePlanningComponent.VerifyQuantity(Rec,xRec);

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

               GetReqLine;
               "Planning Line Origin" := ReqLine."Planning Line Origin";
               IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
                 TESTFIELD("Worksheet Template Name");

               "Due Date" := ReqLine."Starting Date";
             END;

    OnModify=BEGIN
               ReservePlanningComponent.VerifyChange(Rec,xRec);
             END;

    OnDelete=BEGIN
               ReservePlanningComponent.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Planning Component;
               ESP=Planif. componente;
               DEA=Planungskomponente];
    LookupPageID=Page99000861;
    DrillDownPageID=Page99000861;
  }
  FIELDS
  {
    { 1   ;   ;Worksheet Template Name;Code10     ;TableRelation="Req. Wksh. Template";
                                                   CaptionML=[ENU=Worksheet Template Name;
                                                              ESP=Nombre libro hoja dem.;
                                                              DEA=Vorschlagsvorlagenname] }
    { 2   ;   ;Worksheet Batch Name;Code10        ;TableRelation="Requisition Wksh. Name".Name WHERE (Worksheet Template Name=FIELD(Worksheet Template Name));
                                                   CaptionML=[ENU=Worksheet Batch Name;
                                                              ESP=Nombre secci¢n hoja;
                                                              DEA=Vorschlagsname] }
    { 3   ;   ;Worksheet Line No.  ;Integer       ;TableRelation="Requisition Line"."Line No." WHERE (Worksheet Template Name=FIELD(Worksheet Template Name),
                                                                                                      Journal Batch Name=FIELD(Worksheet Batch Name));
                                                   CaptionML=[ENU=Worksheet Line No.;
                                                              ESP=N§ l¡nea hoja;
                                                              DEA=Vorschlagszeilennr.] }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea;
                                                              DEA=Zeilennr.];
                                                   BlankZero=Yes }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                ReservePlanningComponent.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(DATABASE::Item,"Item No.");
                                                                  EXIT;
                                                                END;

                                                                GetItem;
                                                                Description := Item.Description;
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                GetUpdateFromSKU;
                                                                CreateDim(DATABASE::Item,"Item No.");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto;
                                                              DEA=Artikelnr.] }
    { 12  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 13  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Item No.");

                                                                GetItem;
                                                                GetGLSetup;

                                                                "Unit Cost" := Item."Unit Cost";

                                                                IF "Unit of Measure Code" <> '' THEN BEGIN
                                                                  "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      Item."Unit Cost" * "Qty. per Unit of Measure",
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                "Indirect Cost %" := ROUND(Item."Indirect Cost %" * "Qty. per Unit of Measure",0.00001);

                                                                "Overhead Rate" :=
                                                                  ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                "Direct Unit Cost" :=
                                                                  ROUND(
                                                                    ("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida;
                                                              DEA=Einheitencode] }
    { 14  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad;
                                                              DEA=Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 15  ;   ;Position            ;Code10        ;CaptionML=[ENU=Position;
                                                              ESP=Posici¢n;
                                                              DEA=Position] }
    { 16  ;   ;Position 2          ;Code10        ;CaptionML=[ENU=Position 2;
                                                              ESP=Posici¢n 2;
                                                              DEA=Position 2] }
    { 17  ;   ;Position 3          ;Code10        ;CaptionML=[ENU=Position 3;
                                                              ESP=Posici¢n 3;
                                                              DEA=Position 3] }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=[ENU=Lead-Time Offset;
                                                              ESP=Desfase plazo entrega;
                                                              DEA=Vorlaufzeitverschiebung] }
    { 19  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   OnValidate=VAR
                                                                PlanningRtngLine@1001 : Record 99000830;
                                                              BEGIN
                                                                VALIDATE("Expected Quantity",Quantity * PlanningNeeds);

                                                                "Due Date" := ReqLine."Starting Date";
                                                                "Due Time" := ReqLine."Starting Time";
                                                                IF "Routing Link Code" <> '' THEN BEGIN
                                                                  PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                                                  PlanningRtngLine.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
                                                                  PlanningRtngLine.SETRANGE("Worksheet Line No.","Worksheet Line No.");
                                                                  PlanningRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
                                                                  IF PlanningRtngLine.FINDFIRST THEN BEGIN
                                                                    "Due Date" := PlanningRtngLine."Starting Date";
                                                                    "Due Time" := ReqLine."Starting Time";
                                                                  END;
                                                                END;
                                                                IF FORMAT("Lead-Time Offset") <> '' THEN BEGIN
                                                                  IF "Due Date" = 0D THEN
                                                                    "Due Date" := ReqLine."Ending Date";
                                                                  "Due Date" :=
                                                                    "Due Date" -
                                                                    (CALCDATE("Lead-Time Offset",WORKDATE) - WORKDATE);
                                                                  "Due Time" := 0T;
                                                                END;
                                                                VALIDATE("Due Date");
                                                              END;

                                                   CaptionML=[ENU=Routing Link Code;
                                                              ESP=C¢d. conexi¢n ruta;
                                                              DEA=Verbindungscode] }
    { 20  ;   ;Scrap %             ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Expected Quantity",Quantity * PlanningNeeds);
                                                              END;

                                                   CaptionML=[ENU=Scrap %;
                                                              ESP=% Rechazo;
                                                              DEA=Ausschuss %];
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100;
                                                   BlankNumbers=BlankNeg }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                ReservePlanningComponent.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);
                                                                GetUpdateFromSKU;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              DEA=Variantencode] }
    { 25  ;   ;Expected Quantity   ;Decimal       ;OnValidate=BEGIN
                                                                IF Item.GET("Item No.") AND ("Ref. Order Type" <> "Ref. Order Type"::Assembly) THEN
                                                                  IF Item."Rounding Precision" > 0 THEN
                                                                    "Expected Quantity" := ROUND("Expected Quantity",Item."Rounding Precision",'>');
                                                                "Expected Quantity (Base)" := ROUND("Expected Quantity" * "Qty. per Unit of Measure",0.00001);
                                                                "Net Quantity (Base)" := "Expected Quantity (Base)" - "Original Expected Qty. (Base)";

                                                                ReservePlanningComponent.VerifyQuantity(Rec,xRec);

                                                                "Cost Amount" := ROUND("Expected Quantity" * "Unit Cost");
                                                                "Overhead Amount" :=
                                                                  ROUND(
                                                                    "Expected Quantity" *
                                                                    (("Direct Unit Cost" * "Indirect Cost %" / 100) + "Overhead Rate"));
                                                                "Direct Cost Amount" := ROUND("Expected Quantity" * "Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Expected Quantity;
                                                              ESP=Cantidad esperada;
                                                              DEA=Erw. Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 28  ;   ;Flushing Method     ;Option        ;CaptionML=[ENU=Flushing Method;
                                                              ESP=Mtodo de baja;
                                                              DEA=Buchungsmethode];
                                                   OptionCaptionML=[ENU=Manual,Forward,Back;
                                                                    ESP=Manual,Anticipada,Retroactiva;
                                                                    DEA=Manuell,Vorwrts,Rckwrts];
                                                   OptionString=Manual,Forward,Back }
    { 30  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                ReservePlanningComponent.VerifyChange(Rec,xRec);
                                                                GetUpdateFromSKU;
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn;
                                                              DEA=Lagerortcode] }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1;
                                                              DEA=Shortcutdimensionscode 1];
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2;
                                                              DEA=Shortcutdimensionscode 2];
                                                   CaptionClass='1,2,2' }
    { 33  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                ReservePlanningComponent.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n;
                                                              DEA=Lagerplatzcode] }
    { 35  ;   ;Supplied-by Line No.;Integer       ;TableRelation="Requisition Line" WHERE (Worksheet Template Name=FIELD(Worksheet Template Name),
                                                                                           Journal Batch Name=FIELD(Worksheet Batch Name),
                                                                                           Line No.=FIELD(Supplied-by Line No.));
                                                   CaptionML=[ENU=Supplied-by Line No.;
                                                              ESP=Suminis. por l¡nea N§;
                                                              DEA=Beliefert von Zeilennr.] }
    { 36  ;   ;Planning Level Code ;Integer       ;CaptionML=[ENU=Planning Level Code;
                                                              ESP=C¢d. nivel planif.;
                                                              DEA=Planungsebenennr.];
                                                   Editable=No }
    { 37  ;   ;Ref. Order Status   ;Option        ;CaptionML=[ENU=Ref. Order Status;
                                                              ESP=Estado orden ref.;
                                                              DEA=Ref.-Status];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released;
                                                                    ESP=Simulada,Planificada,Planificada en firme,Lanzada;
                                                                    DEA=Simuliert,Geplant,Fest geplant,Freigegeben];
                                                   OptionString=Simulated,Planned,Firm Planned,Released }
    { 38  ;   ;Ref. Order No.      ;Code20        ;CaptionML=[ENU=Ref. Order No.;
                                                              ESP=N§ orden ref.;
                                                              DEA=Ref.-Nr.] }
    { 39  ;   ;Ref. Order Line No. ;Integer       ;CaptionML=[ENU=Ref. Order Line No.;
                                                              ESP=N§ l¡n. orden ref.;
                                                              DEA=Ref. Zeilennr.] }
    { 40  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              ESP=Longitud;
                                                              DEA=Lnge];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Width;
                                                              ESP=Ancho;
                                                              DEA=Breite];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Weight;
                                                              ESP=Peso;
                                                              DEA=Gewicht];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Depth               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Depth;
                                                              ESP=Altura;
                                                              DEA=Tiefe];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Calculation Formula ;Option        ;OnValidate=BEGIN
                                                                CASE "Calculation Formula" OF
                                                                  "Calculation Formula"::" ":
                                                                    Quantity := "Quantity per";
                                                                  "Calculation Formula"::Length:
                                                                    Quantity := ROUND(Length * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width":
                                                                    Quantity := ROUND(Length * Width * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width * Depth":
                                                                    Quantity := ROUND(Length * Width * Depth * "Quantity per",0.00001);
                                                                  "Calculation Formula"::Weight:
                                                                    Quantity := ROUND(Weight * "Quantity per",0.00001);
                                                                END;
                                                                "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                VALIDATE("Expected Quantity",Quantity * PlanningNeeds);
                                                              END;

                                                   CaptionML=[ENU=Calculation Formula;
                                                              ESP=Tipo c lculo;
                                                              DEA=Formel];
                                                   OptionCaptionML=[ENU=" ,Length,Length * Width,Length * Width * Depth,Weight";
                                                                    ESP=" ,Largo,Largo * Ancho,Largo * Ancho * Alto,Peso";
                                                                    DEA=" ,Lnge,Lnge * Breite,Lnge * Breite * Tiefe,Gewicht"];
                                                   OptionString=[ ,Length,Length * Width,Length * Width * Depth,Weight] }
    { 45  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Quantity per;
                                                              ESP=Cantidad por;
                                                              DEA=Komponentenmenge];
                                                   DecimalPlaces=0:5 }
    { 46  ;   ;Ref. Order Type     ;Option        ;CaptionML=[ENU=Ref. Order Type;
                                                              ESP=Tipo orden ref.;
                                                              DEA=Ref. Auftragsart];
                                                   OptionCaptionML=[ENU=" ,Purchase,Prod. Order,Transfer,Assembly";
                                                                    ESP=" ,Compra,Orden prod.,Transferencia,Ensamblado";
                                                                    DEA=" ,Einkauf,Fertigungsauftrag,Umlagerung,Montage"];
                                                   OptionString=[ ,Purchase,Prod. Order,Transfer,Assembly];
                                                   Editable=No }
    { 50  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");

                                                                GetItem;
                                                                GetGLSetup;

                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                  "Unit Cost" :=
                                                                    ROUND(Item."Unit Cost" * "Qty. per Unit of Measure");
                                                                  "Indirect Cost %" :=
                                                                    ROUND(Item."Indirect Cost %" * "Qty. per Unit of Measure",0.00001);
                                                                  "Overhead Rate" :=
                                                                    ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                  "Direct Unit Cost" :=
                                                                    ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                VALIDATE("Expected Quantity");
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario;
                                                              DEA=Einstandspreis];
                                                   AutoFormatType=1 }
    { 51  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              ESP=Importe coste;
                                                              DEA=Einstandsbetrag];
                                                   AutoFormatType=2 }
    { 52  ;   ;Due Date            ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                CheckDateConflict.PlanningComponentCheck(Rec,CurrFieldNo <> 0);
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento;
                                                              DEA=Flligkeitsdatum] }
    { 53  ;   ;Due Time            ;Time          ;OnValidate=BEGIN
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Due Time;
                                                              ESP=Tiempo fin.;
                                                              DEA=Flligkeitszeit] }
    { 55  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=[ENU=Direct Unit Cost;
                                                              ESP=Coste unit. directo;
                                                              DEA=EK-Preis];
                                                   DecimalPlaces=2:5 }
    { 56  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                "Direct Unit Cost" :=
                                                                  ROUND("Unit Cost" / (1 + "Indirect Cost %" / 100) - "Overhead Rate");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto;
                                                              DEA=Indirekte Kosten %];
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales;
                                                              DEA=Gemeinkostensatz];
                                                   DecimalPlaces=0:5 }
    { 58  ;   ;Direct Cost Amount  ;Decimal       ;CaptionML=[ENU=Direct Cost Amount;
                                                              ESP=Imp. coste directo;
                                                              DEA=Betrag direkte Kosten];
                                                   DecimalPlaces=2:2 }
    { 59  ;   ;Overhead Amount     ;Decimal       ;CaptionML=[ENU=Overhead Amount;
                                                              ESP=Imp. costes gen.;
                                                              DEA=Gemeinkostenbetrag];
                                                   DecimalPlaces=2:2 }
    { 60  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida;
                                                              DEA=Menge pro Einheit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 62  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base);
                                                              DEA=Menge (Basis)];
                                                   DecimalPlaces=0:5 }
    { 63  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Worksheet Template Name),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(99000829),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Source Batch Name=FIELD(Worksheet Batch Name),
                                                                                                                 Source Prod. Order Line=FIELD(Worksheet Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base);
                                                              DEA=Reservierte Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 71  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Worksheet Batch Name),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(99000829),
                                                                                                        Source Subtype=CONST(0),
                                                                                                        Source Batch Name=FIELD(Worksheet Batch Name),
                                                                                                        Source Prod. Order Line=FIELD(Worksheet Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada;
                                                              DEA=Reservierte Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 73  ;   ;Expected Quantity (Base);Decimal   ;CaptionML=[ENU=Expected Quantity (Base);
                                                              ESP=Cantidad prevista (base);
                                                              DEA=Erw. Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 74  ;   ;Original Expected Qty. (Base);Decimal;
                                                   CaptionML=[ENU=Original Expected Qty. (Base);
                                                              ESP=Cdad. esperada original (base);
                                                              DEA=Urspr. Erw. Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 75  ;   ;Net Quantity (Base) ;Decimal       ;CaptionML=[ENU=Net Quantity (Base);
                                                              ESP=Cantidad neta (base);
                                                              DEA=Nettomenge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 76  ;   ;Due Date-Time       ;DateTime      ;OnValidate=BEGIN
                                                                "Due Date" := DT2DATE("Due Date-Time");
                                                                "Due Time" := DT2TIME("Due Date-Time");
                                                                VALIDATE("Due Date");
                                                              END;

                                                   CaptionML=[ENU=Due Date-Time;
                                                              ESP=Fecha vto.-Tiempo;
                                                              DEA=Fllkeitsdatum/-zeit] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESP=Id. grupo dimensiones;
                                                              DEA=Dimensionssatz-ID];
                                                   Editable=No }
    { 99000875;;Critical           ;Boolean       ;CaptionML=[ENU=Critical;
                                                              ESP=Cr¡tico;
                                                              DEA=Kritisch] }
    { 99000915;;Planning Line Origin;Option       ;CaptionML=[ENU=Planning Line Origin;
                                                              ESP=Planif. origen l¡nea;
                                                              DEA=Planungszeilenherkunft];
                                                   OptionCaptionML=[ENU=" ,Action Message,Planning,Order Planning";
                                                                    ESP=" ,Mensaje acci¢n,Planificaci¢n,Planificaci¢n de pedidos";
                                                                    DEA=" ,Ereignismeldung,Planung,Auftragsplanung"];
                                                   OptionString=[ ,Action Message,Planning,Order Planning];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Worksheet Template Name,Worksheet Batch Name,Worksheet Line No.,Line No.;
                                                   SumIndexFields=Cost Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Item No.,Variant Code,Location Code,Due Date,Planning Line Origin;
                                                   SumIndexFields=Expected Quantity (Base),Cost Amount;
                                                   MaintainSIFTIndex=No }
    { No ;Item No.,Variant Code,Location Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Planning Line Origin,Due Date;
                                                   SumIndexFields=Expected Quantity (Base),Cost Amount;
                                                   KeyGroups=Item(Dim);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Worksheet Template Name,Worksheet Batch Name,Worksheet Line No.,Item No.;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.;DEA=Sie knnen eine %1 nicht umbenennen.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ESP=No se puede cambiar %1 cuando %2 es %3.;DEA=Sie knnen %1 nicht ndern, wenn %2 %3 ist.';
      Item@1003 : Record 27;
      ReservEntry@1004 : Record 337;
      GLSetup@1018 : Record 98;
      ReqLine@1011 : Record 246;
      Location@1006 : Record 14;
      Reservation@1013 : Page 498;
      ReservEngineMgt@1007 : Codeunit 99000831;
      ReservePlanningComponent@1008 : Codeunit 99000840;
      UOMMgt@1009 : Codeunit 5402;
      DimMgt@1019 : Codeunit 408;
      GLSetupRead@1005 : Boolean;

    PROCEDURE Caption@5() : Text[100];
    VAR
      ReqWkshName@1000 : Record 245;
      ReqLine@1001 : Record 246;
    BEGIN
      IF GETFILTERS = '' THEN
        EXIT('');

      IF NOT ReqWkshName.GET("Worksheet Template Name","Worksheet Batch Name") THEN
        EXIT('');

      IF NOT ReqLine.GET("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.") THEN
        CLEAR(ReqLine);

      EXIT(
        STRSUBSTNO('%1 %2 %3 %4 %5',
          "Worksheet Batch Name",ReqWkshName.Description,ReqLine.Type,ReqLine."No.",ReqLine.Description));
    END;

    PROCEDURE PlanningNeeds@1() : Decimal;
    VAR
      PlanningRtngLine@1001 : Record 99000830;
    BEGIN
      GetReqLine;

      "Due Date" := ReqLine."Starting Date";

      PlanningRtngLine.RESET;
      PlanningRtngLine.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      PlanningRtngLine.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      PlanningRtngLine.SETRANGE("Worksheet Line No.","Worksheet Line No.");
      IF "Routing Link Code" <> '' THEN
        PlanningRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
      IF PlanningRtngLine.FINDFIRST THEN
        EXIT(
          ReqLine.Quantity *
          (1 + ReqLine."Scrap %" / 100) *
          (1 + PlanningRtngLine."Scrap Factor % (Accumulated)") *
          (1 + "Scrap %" / 100) +
          PlanningRtngLine."Fixed Scrap Qty. (Accum.)");

      EXIT(ReqLine.Quantity * (1 + ReqLine."Scrap %" / 100) * (1 + "Scrap %" / 100));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      Reservation.SetPlanningComponent(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD("Item No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE TransferFromComponent@3(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
      "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
      "Ref. Order Status" := ProdOrderComp.Status;
      "Ref. Order No." := ProdOrderComp."Prod. Order No.";
      "Ref. Order Line No." := ProdOrderComp."Prod. Order Line No.";
      "Line No." := ProdOrderComp."Line No.";
      "Item No." := ProdOrderComp."Item No.";
      Description := ProdOrderComp.Description;
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Quantity per" := ProdOrderComp."Quantity per";
      Quantity := ProdOrderComp.Quantity;
      Position := ProdOrderComp.Position;
      "Position 2" := ProdOrderComp."Position 2";
      "Position 3" := ProdOrderComp."Position 3";
      "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
      "Routing Link Code" := ProdOrderComp."Routing Link Code";
      "Scrap %" := ProdOrderComp."Scrap %";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Expected Quantity" := ProdOrderComp."Expected Quantity";
      "Location Code" := ProdOrderComp."Location Code";
      "Dimension Set ID" := ProdOrderComp."Dimension Set ID";
      "Shortcut Dimension 1 Code" := ProdOrderComp."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := ProdOrderComp."Shortcut Dimension 2 Code";
      "Bin Code" := ProdOrderComp."Bin Code";
      Length := ProdOrderComp.Length;
      Width := ProdOrderComp.Width;
      Weight := ProdOrderComp.Weight;
      Depth := ProdOrderComp.Depth;
      "Calculation Formula" := ProdOrderComp."Calculation Formula";
      "Planning Level Code" := ProdOrderComp."Planning Level Code";
      "Unit Cost" := ProdOrderComp."Unit Cost";
      "Cost Amount" := ProdOrderComp."Cost Amount";
      "Due Date" := ProdOrderComp."Due Date";
      "Direct Unit Cost" := ProdOrderComp."Direct Unit Cost";
      "Indirect Cost %" := ProdOrderComp."Indirect Cost %";
      "Overhead Rate" := ProdOrderComp."Overhead Rate";
      "Direct Cost Amount" := ProdOrderComp."Direct Cost Amount";
      "Overhead Amount" := ProdOrderComp."Overhead Amount";
      "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
      "Quantity (Base)" := ProdOrderComp."Quantity (Base)";
      "Expected Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
      "Original Expected Qty. (Base)" := ProdOrderComp."Expected Qty. (Base)";
      UpdateDatetime;
    END;

    PROCEDURE TransferFromAsmLine@11(VAR AsmLine@1000 : Record 901);
    BEGIN
      "Ref. Order Type" := "Ref. Order Type"::Assembly;
      "Ref. Order Status" := AsmLine."Document Type";
      "Ref. Order No." := AsmLine."Document No.";
      "Ref. Order Line No." := AsmLine."Line No.";
      "Line No." := AsmLine."Line No.";
      "Item No." := AsmLine."No.";
      Description := COPYSTR(AsmLine.Description,1,MAXSTRLEN(Description));
      "Unit of Measure Code" := AsmLine."Unit of Measure Code";
      "Quantity per" := AsmLine."Quantity per";
      Quantity := AsmLine."Quantity per";
      "Lead-Time Offset" := AsmLine."Lead-Time Offset";
      Position := AsmLine.Position;
      "Position 2" := AsmLine."Position 2";
      "Position 3" := AsmLine."Position 3";
      "Variant Code" := AsmLine."Variant Code";
      "Expected Quantity" := AsmLine.Quantity;
      "Location Code" := AsmLine."Location Code";
      "Dimension Set ID" := AsmLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := AsmLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := AsmLine."Shortcut Dimension 2 Code";
      "Bin Code" := AsmLine."Bin Code";
      "Unit Cost" := AsmLine."Unit Cost";
      "Cost Amount" := AsmLine."Cost Amount";
      "Due Date" := AsmLine."Due Date";
      "Qty. per Unit of Measure" := AsmLine."Qty. per Unit of Measure";
      "Quantity (Base)" := AsmLine."Quantity per";
      "Expected Quantity (Base)" := AsmLine."Quantity (Base)";
      "Original Expected Qty. (Base)" := AsmLine."Quantity (Base)";
      UpdateDatetime;
    END;

    PROCEDURE GetUpdateFromSKU@4();
    VAR
      SKU@1000 : Record 5700;
      GetPlanningParameters@1001 : Codeunit 99000855;
    BEGIN
      GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
      VALIDATE("Flushing Method",SKU."Flushing Method");
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      ReservePlanningComponent.Block(SetBlock);
    END;

    PROCEDURE UpdateDatetime@20();
    BEGIN
      "Due Date-Time" := CREATEDATETIME("Due Date","Due Time");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      IF "Item No." <> '' THEN
        ReservePlanningComponent.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@12(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" := DimMgt.GetDefaultDimID(TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    PROCEDURE ValidateShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@10(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetItem@2();
    BEGIN
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE GetReqLine@6();
    BEGIN
      ReqLine.GET("Worksheet Template Name","Worksheet Batch Name","Worksheet Line No.");
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF (Quantity * xRec.Quantity > 0) AND
         ("Item No." = xRec."Item No.") AND
         ("Location Code" = xRec."Location Code") AND
         ("Variant Code" = xRec."Variant Code")
      THEN
        EXIT;

      "Bin Code" := '';
      IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
      END;
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.");
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      Item.COPYFILTER("Global Dimension 1 Filter","Shortcut Dimension 1 Code");
      Item.COPYFILTER("Global Dimension 2 Filter","Shortcut Dimension 2 Code");
      SETFILTER("Quantity (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE FindCurrForecastName@40(VAR ForecastName@1001 : Code[10]) : Boolean;
    VAR
      UntrackedPlngElement@1000 : Record 99000855;
    BEGIN
      UntrackedPlngElement.SETRANGE("Worksheet Template Name","Worksheet Template Name");
      UntrackedPlngElement.SETRANGE("Worksheet Batch Name","Worksheet Batch Name");
      UntrackedPlngElement.SETRANGE("Item No.","Item No.");
      UntrackedPlngElement.SETRANGE("Source Type",DATABASE::"Production Forecast Entry");
      IF UntrackedPlngElement.FINDFIRST THEN BEGIN
        ForecastName := COPYSTR(UntrackedPlngElement."Source ID",1,10);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ShowDimensions@7();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",
          STRSUBSTNO(
            '%1 %2 %3',"Worksheet Template Name","Worksheet Batch Name",
            "Worksheet Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    BEGIN
    END.
  }
}

