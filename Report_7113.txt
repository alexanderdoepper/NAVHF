OBJECT Report 7113 Export Analysis Rep. to Excel
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Analysis Rep. to Excel;
               ESP=Exportar inf. an lisis a Excel;
               DEA=Analysebericht nach Excel exp.];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=VAR
                                  Window@1000 : Dialog;
                                  RecNo@1001 : Integer;
                                  TotalRecNo@1002 : Integer;
                                  RowNo@1003 : Integer;
                                  ColumnNo@1004 : Integer;
                                BEGIN
                                  Window.OPEN(
                                    Text000 +
                                    '@1@@@@@@@@@@@@@@@@@@@@@\');
                                  Window.UPDATE(1,0);
                                  TotalRecNo := AnalysisLine.COUNT;
                                  RecNo := 0;

                                  TempExcelBuffer.DELETEALL;
                                  CLEAR(TempExcelBuffer);

                                  AnalysisLineTemplate.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name");
                                  IF AnalysisLineTemplate."Item Analysis View Code" <> '' THEN
                                    ItemAnalysisView.GET(AnalysisLineTemplate."Analysis Area",AnalysisLineTemplate."Item Analysis View Code");
                                  GLSetup.GET;

                                  RowNo := 1;
                                  EnterCell(RowNo,1,Text001,FALSE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                  IF AnalysisLine.GETFILTER("Date Filter") <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      AnalysisLine.GETFILTER("Date Filter"),
                                      AnalysisLine.FIELDCAPTION("Date Filter"),
                                      '',
                                      TempExcelBuffer."Cell Type"::Date);
                                  END;
                                  IF AnalysisLine.GETFILTER("Item Budget Filter") <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      AnalysisLine.GETFILTER("Item Budget Filter"),
                                      AnalysisLine.FIELDCAPTION("Item Budget Filter"),
                                      '',
                                      TempExcelBuffer."Cell Type"::Text);
                                  END;
                                  IF AnalysisLine.GETFILTER("Dimension 1 Filter") <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      AnalysisLine.GETFILTER("Dimension 1 Filter"),
                                      GetDimFilterCaption(1),
                                      '',
                                      TempExcelBuffer."Cell Type"::Text);
                                  END;
                                  IF AnalysisLine.GETFILTER("Dimension 2 Filter") <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      AnalysisLine.GETFILTER("Dimension 2 Filter"),
                                      GetDimFilterCaption(2),
                                      '',
                                      TempExcelBuffer."Cell Type"::Text);
                                  END;
                                  IF AnalysisLine.GETFILTER("Dimension 3 Filter") <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      AnalysisLine.GETFILTER("Dimension 3 Filter"),
                                      GetDimFilterCaption(3),
                                      '',
                                      TempExcelBuffer."Cell Type"::Text);
                                  END;

                                  RowNo := RowNo + 1;
                                  IF GLSetup."LCY Code" <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(
                                      RowNo,
                                      GLSetup."LCY Code",
                                      Currency.TABLECAPTION,
                                      '',
                                      TempExcelBuffer."Cell Type"::Text);
                                  END;

                                  RowNo := RowNo + 1;
                                  IF AnalysisLine.FIND('-') THEN BEGIN
                                    IF ColumnLayout.FIND('-') THEN BEGIN
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      REPEAT
                                        ColumnNo := ColumnNo + 1;
                                        EnterCell(
                                          RowNo,
                                          ColumnNo,
                                          ColumnLayout."Column Header",
                                          FALSE,
                                          FALSE,
                                          FALSE,
                                          '',
                                          TempExcelBuffer."Cell Type"::Text);
                                      UNTIL ColumnLayout.NEXT = 0;
                                    END;
                                    REPEAT
                                      RecNo := RecNo + 1;
                                      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      EnterCell(
                                        RowNo,
                                        ColumnNo,
                                        AnalysisLine.Description,
                                        AnalysisLine.Bold,
                                        AnalysisLine.Italic,
                                        AnalysisLine.Underline,
                                        '',
                                        TempExcelBuffer."Cell Type"::Text);
                                      IF ColumnLayout.FIND('-') THEN BEGIN
                                        REPEAT
                                          ColumnValue := AnalysisReportManagement.CalcCell(AnalysisLine,ColumnLayout,FALSE);
                                          IF AnalysisReportManagement.GetDivisionError THEN
                                            ColumnValue := 0;
                                          ColumnNo := ColumnNo + 1;
                                          IF ColumnValue <> 0 THEN
                                            EnterCell(
                                              RowNo,
                                              ColumnNo,
                                              FORMAT(ColumnValue),
                                              AnalysisLine.Bold,
                                              AnalysisLine.Italic,
                                              AnalysisLine.Underline,
                                              '#,##0.00',
                                              TempExcelBuffer."Cell Type"::Number)
                                          ELSE
                                            EnterCell(
                                              RowNo,
                                              ColumnNo,
                                              '',
                                              AnalysisLine.Bold,
                                              AnalysisLine.Italic,
                                              AnalysisLine.Underline,
                                              '',
                                              TempExcelBuffer."Cell Type"::Number);
                                        UNTIL ColumnLayout.NEXT = 0;
                                      END;
                                    UNTIL AnalysisLine.NEXT = 0;
                                  END;

                                  Window.CLOSE;

                                  IF Option = Option::"Update Workbook" THEN BEGIN
                                    TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                                    TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    TempExcelBuffer.OverwriteAndOpenExistingExcel(ClientFileName);
                                  END ELSE BEGIN
                                    TempExcelBuffer.CreateBook(AnalysisTemplateName);
                                    TempExcelBuffer.WriteSheet(AnalysisLine.Description,COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    TempExcelBuffer.OpenExcel;
                                  END;

                                  TempExcelBuffer.GiveUserControl;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SheetNameEnable := TRUE;
               FileNameEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   UpdateRequestForm;
                 END;

      OnQueryClosePage=BEGIN
                         IF (Option = Option::"Update Workbook") AND (CloseAction = ACTION::OK) THEN
                           ValidateServerFileName;
                       END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones;
                             DEA=Optionen] }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Option;
                             ESP=Opci¢n;
                             DEA=Option];
                  OptionCaptionML=[ENU=Create Workbook,Update Workbook;
                                   ESP=Crear libro,Actualizar libro;
                                   DEA=Arbeitsmappe erstellen,Arbeitsmappe aktualisieren];
                  SourceExpr=Option;
                  OnValidate=BEGIN
                               UpdateRequestForm;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=FileName;
                  CaptionML=[ENU=Workbook File Name;
                             ESP=Nombre fichero libro;
                             DEA=Arbeitsmappendateiname];
                  SourceExpr=FileName;
                  Enabled=FileNameEnable;
                  Editable=FALSE;
                  OnValidate=BEGIN
                               FileNameOnAfterValidate;
                             END;

                  OnAssistEdit=BEGIN
                                 RequestFile;
                                 SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                               END;
                                }

      { 3   ;2   ;Field     ;
                  Name=SheetName;
                  CaptionML=[ENU=Worksheet Name;
                             ESP=Nombre hoja;
                             DEA=Tabellenname];
                  SourceExpr=SheetName;
                  Enabled=SheetNameEnable;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 IF ServerFileName = '' THEN
                                   RequestFile;

                                 SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Analyzing Data...\\;ESP=Analizar Datos...\\;DEA=Daten werden analysiert ...\\';
      Text001@1001 : TextConst 'ENU=Filters;ESP=Filtros;DEA=Filter';
      Text002@1002 : TextConst 'ENU=Update Workbook;ESP=Actualizar libro;DEA=Arbeitsmappe aktualisieren';
      AnalysisLineTemplate@1003 : Record 7112;
      AnalysisLine@1004 : Record 7114;
      ColumnLayout@1005 : Record 7118;
      TempExcelBuffer@1006 : TEMPORARY Record 370;
      GLSetup@1013 : Record 98;
      ItemAnalysisView@1014 : Record 7152;
      Currency@1015 : Record 4;
      AnalysisReportManagement@1007 : Codeunit 7110;
      FileMgt@1017 : Codeunit 419;
      ColumnValue@1009 : Decimal;
      FileName@1010 : Text;
      ServerFileName@1008 : Text;
      ClientFileName@1018 : Text;
      SheetName@1011 : Text[250];
      Option@1012 : 'Create Workbook,Update Workbook';
      AnalysisTemplateName@1102601000 : Code[10];
      FileNameEnable@19078740 : Boolean INDATASET;
      SheetNameEnable@19012330 : Boolean INDATASET;
      Text003@1016 : TextConst 'ENU=You must enter a file name.;ESP=Debe introd. nombre fichero.;DEA=Sie mssen einen Dateinamen angeben.';

    PROCEDURE SetOptions@3(VAR AnalysisLine2@1000 : Record 7114;ColumnLayoutName2@1001 : Code[10];NewAnalysisTemplateName@1002 : Code[10]);
    BEGIN
      AnalysisTemplateName := NewAnalysisTemplateName;
      AnalysisLine.COPYFILTERS(AnalysisLine2);
      AnalysisLine := AnalysisLine2;
      AnalysisLine.SETFILTER("Analysis Line Template Name",NewAnalysisTemplateName);
      ColumnLayout.SETRANGE("Analysis Area",AnalysisLine2."Analysis Area");
      ColumnLayout.SETRANGE("Analysis Column Template",ColumnLayoutName2);
    END;

    PROCEDURE UpdateRequestForm@1();
    BEGIN
      PageUpdateRequestForm;
    END;

    LOCAL PROCEDURE EnterFilterInCell@5(RowNo@1000 : Integer;Filter@1001 : Text[250];FieldName@1002 : Text[100];Format@1003 : Text[30];CellType@1004 : Option);
    BEGIN
      IF Filter <> '' THEN BEGIN
        EnterCell(RowNo,1,FieldName,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,Filter,FALSE,FALSE,FALSE,Format,CellType);
      END;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;Format@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := Format;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE GetDimFilterCaption@4(DimFilterNo@1000 : Integer) : Text[80];
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN
        CASE DimFilterNo OF
          1:
            Dimension.GET(GLSetup."Global Dimension 1 Code");
          2:
            Dimension.GET(GLSetup."Global Dimension 2 Code");
        END
      ELSE
        CASE DimFilterNo OF
          1:
            Dimension.GET(ItemAnalysisView."Dimension 1 Code");
          2:
            Dimension.GET(ItemAnalysisView."Dimension 2 Code");
          3:
            Dimension.GET(ItemAnalysisView."Dimension 3 Code");
        END;
      EXIT(COPYSTR(Dimension.GetMLFilterCaption(GLOBALLANGUAGE),1,80));
    END;

    PROCEDURE RequestFile@6();
    BEGIN
      IF FileName = '' THEN
        ClientFileName := FileMgt.OpenFileDialog(Text002,FileName,'')
      ELSE
        ClientFileName := FileMgt.OpenFileDialog(Text002,'.xlsx','');

      FileName := FileMgt.GetFileName(ClientFileName);
      ServerFileName := FileMgt.UploadFileSilent(ClientFileName);
      ValidateServerFileName;
    END;

    LOCAL PROCEDURE FileNameOnAfterValidate@19040090();
    BEGIN
      RequestFile;
    END;

    LOCAL PROCEDURE PageUpdateRequestForm@19031953();
    BEGIN
      IF Option = Option::"Update Workbook" THEN BEGIN
        FileNameEnable := TRUE;
        SheetNameEnable := TRUE;
      END ELSE BEGIN
        FileName := '';
        SheetName := '';
        FileNameEnable := FALSE;
        SheetNameEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE ValidateServerFileName@9();
    BEGIN
      IF ServerFileName = '' THEN BEGIN
        FileName := '';
        SheetName := '';
        ERROR(Text003);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

