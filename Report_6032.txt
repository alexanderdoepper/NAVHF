OBJECT Report 6032 Post Prepaid Contract Entries
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5907=rm;
    CaptionML=[ENU=Post Prepaid Contract Entries;
               ESP=Registrar movs. contr. prepago;
               DEA=Vorausbez. Vertragsposten buchen];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   PostingDate := WORKDATE;
                 END;

    OnPreReport=BEGIN
                  ServLedgerFilters := "Service Ledger Entry".GETFILTERS;
                END;

    OnPostReport=BEGIN
                   IF PostPrepaidContracts = PostPrepaidContracts::"Post Prepaid Transactions" THEN
                     Window.CLOSE;
                 END;

  }
  DATASET
  {
    { 1141;    ;DataItem;                    ;
               DataItemTable=Table5907;
               DataItemTableView=SORTING(Service Contract No.)
                                 WHERE(Type=CONST(Service Contract),
                                       Moved from Prepaid Acc.=CONST(No),
                                       Open=CONST(No));
               OnPreDataItem=BEGIN
                               IF PostPrepaidContracts = PostPrepaidContracts::"Print Only" THEN BEGIN
                                 CLEAR(PrepaidContractEntriesTest);
                                 PrepaidContractEntriesTest.InitVariables(UntilDate,PostingDate);
                                 PrepaidContractEntriesTest.SETTABLEVIEW("Service Ledger Entry");
                                 PrepaidContractEntriesTest.RUNMODAL;
                                 CurrReport.BREAK;
                               END;

                               IF PostPrepaidContracts = PostPrepaidContracts::"Post Prepaid Transactions" THEN BEGIN
                                 ServContractHdr.SETFILTER("Contract No.",GETFILTER("Service Contract No."));
                                 IF ServContractHdr.FIND('-') THEN BEGIN
                                   REPEAT
                                     ServContractHdr.CALCFIELDS("No. of Unposted Credit Memos");
                                     IF ServContractHdr."No. of Unposted Credit Memos" <> 0 THEN
                                       ERROR(Text005,Text007,Text008,ServContractHdr."Contract No.",Text006);
                                   UNTIL ServContractHdr.NEXT = 0;
                                 END;
                               END;

                               LastFieldNo := FIELDNO("Entry No.");
                               LastContract := '';
                               LastServiceLedgerEntryNo := 0;
                               IF UntilDate = 0D THEN
                                 ERROR(Text000);
                               IF PostingDate = 0D THEN
                                 ERROR(Text001);

                               SETRANGE("Posting Date",0D,UntilDate);

                               NoOfContracts := COUNT;

                               Window.OPEN(
                                 Text002 +
                                 Text003 +
                                 '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

                               ServMgtSetup.GET;
                               ServMgtSetup.TESTFIELD("Prepaid Posting Document Nos.");
                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Service Management");
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter := Counter + 1;
                                  Window.UPDATE(1,"Service Contract No.");
                                  Window.UPDATE(2,ROUND(Counter / NoOfContracts * 10000,1));

                                  ServLedgEntry.GET("Entry No.");
                                  ServLedgEntry."Moved from Prepaid Acc." := TRUE;
                                  ServLedgEntry.MODIFY;

                                  IF (TotalAmount <> 0) AND (LastContract <> '') AND (LastContract <> "Service Contract No.") THEN
                                    PostGenJnlLine;

                                  LastServiceLedgerEntryNo := "Entry No.";
                                  LastContract := "Service Contract No.";
                                  TotalAmount := TotalAmount + ROUND(("Amount (LCY)" / (1 - ("Discount %" / 100))));
                                END;

               OnPostDataItem=VAR
                                UpdateAnalysisView@1000 : Codeunit 410;
                              BEGIN
                                IF PostPrepaidContracts = PostPrepaidContracts::"Post Prepaid Transactions" THEN
                                  IF TotalAmount <> 0 THEN BEGIN
                                    PostGenJnlLine;
                                    UpdateAnalysisView.UpdateAll(0,TRUE);
                                  END;
                              END;

               ReqFilterFields=Service Contract No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones;
                             DEA=Optionen] }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Post until Date;
                             ESP=Registra hasta fecha;
                             DEA=Buchung bis Datum];
                  SourceExpr=UntilDate;
                  MultiLine=Yes }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Date;
                             ESP=Fecha registro;
                             DEA=Buchungsdatum];
                  SourceExpr=PostingDate;
                  MultiLine=Yes }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Action;
                             ESP=Acci¢n;
                             DEA=Aktion];
                  OptionCaptionML=[ENU=Post Prepaid Transactions,Print Only;
                                   ESP=Regis. transacciones prepag.,S¢lo imprimir;
                                   DEA=Vorausbezahlte Transaktionen buchen,Nur Drucken];
                  SourceExpr=PostPrepaidContracts }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must fill in the Post Until Date field.;ESP=Debe rellenar el campo Registra hasta fecha.;DEA=Sie mÅssen das Feld Buchung bis Datum ausfÅllen.';
      Text001@1001 : TextConst 'ENU=You must fill in the Posting Date field.;ESP=Debe rellenar el campo Fecha registro.;DEA=Sie mÅssen das Feld Buchungsdatum ausfÅllen.';
      Text002@1002 : TextConst 'ENU=Posting prepaid contract entries...\;ESP=Registrando movs. contrato prepag....\;DEA=Vorausbezahlte Posten werden gebucht ...\';
      Text003@1003 : TextConst 'ENU=Service Contract: #1###############\\;ESP=Contrato servicio: #1###############\\;DEA=Servicevertrag: #1###############\\';
      Text004@1004 : TextConst 'ENU=Service Contract;ESP=Contrato servicio;DEA=Servicevertrag';
      GenJnlLine@1005 : Record 81;
      ServLedgEntry@1006 : Record 5907;
      ServLedgEntry2@1007 : Record 5907;
      ServContractAccGr@1028 : Record 5973;
      ServMgtSetup@1008 : Record 5911;
      SourceCodeSetup@1009 : Record 242;
      ServContractHdr@1029 : Record 5965;
      NoSeriesMgt@1012 : Codeunit 396;
      GenJnlPostLine@1014 : Codeunit 12;
      PrepaidContractEntriesTest@1027 : Report 5986;
      Window@1015 : Dialog;
      PostPrepaidContracts@1016 : 'Post Prepaid Transactions,Print Only';
      DocNo@1017 : Code[20];
      LastFieldNo@1018 : Integer;
      UntilDate@1019 : Date;
      PostingDate@1020 : Date;
      NoOfContracts@1021 : Integer;
      Counter@1022 : Integer;
      TotalAmount@1023 : Decimal;
      LastContract@1024 : Code[20];
      LastServiceLedgerEntryNo@1025 : Integer;
      ServLedgerFilters@1026 : Text[250];
      Text005@1030 : TextConst 'ENU=You cannot post %1 because %2 %3 has at least one %4 linked to it.;ESP=No puede registrar %1 porque %2 %3 tiene al menos un %4 vinculado.;DEA=%1 kann nicht gebucht werden, weil mit %2 %3 mindestens ein(e) %4 verknÅpft ist.';
      Text006@1102601000 : TextConst 'ENU=Unposted Credit Memo;ESP=Abono no registrado;DEA=Nicht gebuchte Gutschrift';
      Text007@1102601001 : TextConst 'ENU=Prepaid Contract Entries;ESP=Mov. contrato prepago;DEA=Vorausbezahlte Vertragsposten';
      Text008@1102601002 : TextConst 'ENU=Service Contract;ESP=Contrato servicio;DEA=Servicevertrag';

    PROCEDURE PostGenJnlLine@1();
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      IF NOT ServLedgEntry2.GET(LastServiceLedgerEntryNo) THEN
        EXIT;

      DocNo := NoSeriesMgt.GetNextNo(ServMgtSetup."Prepaid Posting Document Nos.",WORKDATE,TRUE);

      GenJnlLine.RESET;
      GenJnlLine.INIT;
      GenJnlLine."Document No." := DocNo;
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
      ServContractAccGr.GET(ServLedgEntry2."Serv. Contract Acc. Gr. Code");
      ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
      GenJnlLine.VALIDATE("Account No.",ServContractAccGr."Non-Prepaid Contract Acc.");
      GenJnlLine."Posting Date" := PostingDate;
      GenJnlLine.Description := Text004;
      GenJnlLine."External Document No." := ServLedgEntry2."Service Contract No.";
      GenJnlLine.VALIDATE(Amount,TotalAmount);
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServLedgEntry2."Service Contract No.");
      ServiceLedgerEntry.SETRANGE("Entry Type",ServiceLedgerEntry."Entry Type"::Usage);
      IF ServiceLedgerEntry.FINDFIRST THEN BEGIN
        GenJnlLine."Shortcut Dimension 1 Code" := ServiceLedgerEntry."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := ServiceLedgerEntry."Global Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := ServiceLedgerEntry."Dimension Set ID";
      END;
      GenJnlLine."Source Code" := SourceCodeSetup."Service Management";
      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::" ";
      GenJnlLine."Gen. Bus. Posting Group" := '';
      GenJnlLine."Gen. Prod. Posting Group" := '';
      GenJnlLine."VAT Bus. Posting Group" := '';
      GenJnlLine."VAT Prod. Posting Group" := '';
      GenJnlPostLine.RUN(GenJnlLine);

      ServContractAccGr.GET(ServLedgEntry2."Serv. Contract Acc. Gr. Code");
      ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
      GenJnlLine.VALIDATE("Account No.",ServContractAccGr."Prepaid Contract Acc.");
      GenJnlLine.VALIDATE(Amount,-TotalAmount);
      IF ServiceLedgerEntry.FINDFIRST THEN BEGIN
        GenJnlLine."Shortcut Dimension 1 Code" := ServiceLedgerEntry."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := ServiceLedgerEntry."Global Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := ServiceLedgerEntry."Dimension Set ID";
      END;
      GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::" ";
      GenJnlLine."Gen. Bus. Posting Group" := '';
      GenJnlLine."Gen. Prod. Posting Group" := '';
      GenJnlLine."VAT Bus. Posting Group" := '';
      GenJnlLine."VAT Prod. Posting Group" := '';
      GenJnlPostLine.RUN(GenJnlLine);

      TotalAmount := 0;
    END;

    PROCEDURE InitializeRequest@2(UntilDateFrom@1000 : Date;PostingDateFrom@1001 : Date;PostPrepaidContractsFrom@1002 : 'Post Prepaid Transactions,Print Only');
    BEGIN
      UntilDate := UntilDateFrom;
      PostingDate := PostingDateFrom;
      PostPrepaidContracts := PostPrepaidContractsFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

