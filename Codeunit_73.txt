OBJECT Codeunit 73 Purch.-Explode BOM
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=VAR
            Selection@1004 : Integer;
          BEGIN
            TESTFIELD(Type,Type::Item);
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Return Qty. Shipped",0);
            TESTFIELD("Reserved Qty. (Base)",0);
            IF "Sales Order No." <> '' THEN
              ERROR(
                Text000,
                "Sales Order No.");

            PurchHeader.GET("Document Type","Document No.");
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
            FromBOMComp.SETRANGE("Parent Item No.","No.");
            NoOfBOMComp := FromBOMComp.COUNT;
            IF NoOfBOMComp = 0 THEN
              ERROR(
                Text001,
                "No.");

            Selection := STRMENU(Text005,2);
            IF Selection = 0 THEN
              EXIT;

            ToPurchLine.RESET;
            ToPurchLine.SETRANGE("Document Type","Document Type");
            ToPurchLine.SETRANGE("Document No.","Document No.");
            ToPurchLine := Rec;
            IF ToPurchLine.FIND('>') THEN BEGIN
              LineSpacing := (ToPurchLine."Line No." - "Line No.") DIV (1 + NoOfBOMComp);
              IF LineSpacing = 0 THEN
                ERROR(Text003);
            END ELSE
              LineSpacing := 10000;

            ToPurchLine := Rec;
            ToPurchLine.INIT;
            ToPurchLine.Description := Description;
            ToPurchLine."Description 2" := "Description 2";
            ToPurchLine.MODIFY;

            FromBOMComp.FIND('-');
            NextLineNo := "Line No.";
            REPEAT
              ToPurchLine.INIT;
              NextLineNo := NextLineNo + LineSpacing;
              ToPurchLine."Line No." := NextLineNo;
              CASE FromBOMComp.Type OF
                FromBOMComp.Type::" ":
                  ToPurchLine.Type := ToPurchLine.Type::" ";
                FromBOMComp.Type::Item:
                  BEGIN
                    Item.GET(FromBOMComp."No.");
                    ToPurchLine.Type := ToPurchLine.Type::Item;
                    ToPurchLine.VALIDATE("No.",FromBOMComp."No.");
                    ToPurchLine.VALIDATE("Variant Code",FromBOMComp."Variant Code");
                    ToPurchLine.VALIDATE("Unit of Measure Code",FromBOMComp."Unit of Measure Code");
                    ToPurchLine."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,ToPurchLine."Unit of Measure Code");
                    ToPurchLine.VALIDATE(
                      Quantity,
                      ROUND(
                        "Quantity (Base)" * FromBOMComp."Quantity per" *
                        UOMMgt.GetQtyPerUnitOfMeasure(Item,ToPurchLine."Unit of Measure Code") /
                        ToPurchLine."Qty. per Unit of Measure",
                        0.00001));
                  END;
                FromBOMComp.Type::Resource:
                  ToPurchLine.Type := ToPurchLine.Type::"3"; // Resource
              END;

              IF (FromBOMComp.Type <> FromBOMComp.Type::" ") AND
                 (PurchHeader."Expected Receipt Date" <> "Expected Receipt Date")
              THEN
                ToPurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");

              IF PurchHeader."Language Code" = '' THEN
                ToPurchLine.Description := FromBOMComp.Description
              ELSE
                IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",PurchHeader."Language Code") THEN
                  ToPurchLine.Description := FromBOMComp.Description;
              IF ToPurchLine.Type = ToPurchLine.Type::"3" THEN // Resource
                MESSAGE(
                  Text004,
                  FromBOMComp."No.")
              ELSE
                ToPurchLine.INSERT;

              IF Selection = 1 THEN BEGIN
                ToPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                ToPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                ToPurchLine."Dimension Set ID" := "Dimension Set ID";
                ToPurchLine.MODIFY;
              END;
            UNTIL FromBOMComp.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The BOM cannot be exploded on the purchase lines because it is associated with sales order %1.;ESP=La lista de materiales no se puede desplegar en la l°nea de compras porque est† asociada al pedido de venta %1.;DEA=Die StÅckliste kann auf der Einkaufszeile nicht entfaltet werden, da sie Auftrag %1 zugeordnet ist.';
      Text001@1001 : TextConst 'ENU=Item %1 is not a BOM.;ESP=El producto %1 no es una L.M.;DEA=Artikel %1 ist keine StÅckliste.';
      Text003@1002 : TextConst 'ENU=There is not enough space to explode the BOM.;ESP=No hay suficiente espacio para desplegar la lista de materiales.;DEA=Es ist nicht genÅgend Platz, um die StÅckliste zu entfalten.';
      Text004@1003 : TextConst 'ENU=You cannot purchase resources. Resource %1 was not transferred.;ESP=No se pueden comprar recursos. El recurso %1 no se ha transferido.;DEA=Sie kînnen Ressourcen nicht einkaufen. Ressource %1 wurde nicht Åbertragen.';
      Text005@1004 : TextConst 'ENU=&Copy dimensions from BOM,&Retrieve dimensions from components;ESP=&Copiar dim. de L.M.,&Recuperar dimensiones por componentes;DEA=Dimensionen von StÅckliste &kopieren,Dimensionen von Komponenten &Åbernehmen';
      ToPurchLine@1005 : Record 39;
      FromBOMComp@1006 : Record 90;
      PurchHeader@1007 : Record 38;
      ItemTranslation@1008 : Record 30;
      Item@1009 : Record 27;
      UOMMgt@1010 : Codeunit 5402;
      LineSpacing@1011 : Integer;
      NextLineNo@1012 : Integer;
      NoOfBOMComp@1013 : Integer;

    BEGIN
    END.
  }
}

