OBJECT Codeunit 824 Encryption Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      KeyNotFoundError@1001 : TextConst 'ENU=Encryption key was not found.;ESP=No se encontr¢ la clave de cifrado.;DEA=VerschlÅsselungsschlÅssel wurde nicht gefunden.';
      KeyFilePath@1000 : Text;

    PROCEDURE Encrypt@1(Input@1000 : Text[1024]) : Text[1024];
    VAR
      Encrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      IF NOT Encrypter.KeyExists THEN
        ERROR(KeyNotFoundError);
      EXIT(Encrypter.Encrypt(Input));
    END;

    PROCEDURE Decrypt@2(Input@1000 : Text[1024]) : Text[1024];
    VAR
      Decrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Decrypter);
      IF NOT Decrypter.KeyExists THEN
        ERROR(KeyNotFoundError);
      EXIT(Decrypter.Decrypt(Input));
    END;

    PROCEDURE Import@4(Filename@1001 : Text);
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.ImportKey(Filename);
    END;

    PROCEDURE Export@5(Filename@1000 : Text);
    VAR
      Encrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      IF NOT Encrypter.KeyExists THEN
        ERROR(KeyNotFoundError);

      Encrypter.ExportKey(Filename);
    END;

    PROCEDURE HasKey@8() : Boolean;
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      EXIT(Encrypter.KeyExists);
    END;

    PROCEDURE CreateKey@6();
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.CreateKey;
    END;

    PROCEDURE DeleteKey@7();
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.DeleteKey;
    END;

    PROCEDURE SetKeyFilePath@12(NewKeyFilePath@1000 : Text);
    BEGIN
      KeyFilePath := NewKeyFilePath;
    END;

    LOCAL PROCEDURE CreateEncrypter@3(VAR Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider");
    VAR
      NewProvider@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.RSAMachineKeyProvider";
    BEGIN
      IF KeyFilePath <> '' THEN
        NewProvider := NewProvider.RSAMachineKeyProvider(KeyFilePath)
      ELSE
        NewProvider := NewProvider.RSAMachineKeyProvider;

      Encrypter := NewProvider;
    END;

    BEGIN
    END.
  }
}

