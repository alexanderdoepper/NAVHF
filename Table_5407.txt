OBJECT Table 5407 Prod. Order Component
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Status,Prod. Order No.;
    OnInsert=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000);

               ReserveProdOrderComp.VerifyQuantity(Rec,xRec);

               IF Status = Status::Released THEN
                 WhseProdRelease.ReleaseLine(Rec,xRec);
             END;

    OnModify=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000);

               WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
               ReserveProdOrderComp.VerifyChange(Rec,xRec);
               IF Status = Status::Released THEN
                 WhseProdRelease.ReleaseLine(Rec,xRec);
             END;

    OnDelete=VAR
               ProdOrderLine@1000 : Record 5406;
               ProdOrderBOMComment@1001 : Record 5416;
               ItemTrackingMgt@1002 : Codeunit 6500;
               NewQuantity@1003 : Decimal;
             BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000);
               IF Status = Status::Released THEN BEGIN
                 ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.");
                 ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
                 ItemLedgEntry.SETRANGE("Order No.","Prod. Order No.");
                 ItemLedgEntry.SETRANGE("Order Line No.","Prod. Order Line No.");
                 ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
                 ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.","Line No.");
                 IF ItemLedgEntry.FINDFIRST THEN
                   ERROR(Text99000000,ItemLedgEntry."Item No.","Line No.");
               END;

               WhseValidateSourceLine.ProdComponentDelete(Rec);
               ReserveProdOrderComp.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               IF "Supplied-by Line No." > 0 THEN
                 IF ProdOrderLine.GET(Status,"Prod. Order No.","Supplied-by Line No.") THEN BEGIN
                   NewQuantity := ProdOrderLine.Quantity - "Expected Quantity";
                   IF NewQuantity = 0 THEN BEGIN
                     ProdOrderLine.BlockDynamicTracking(TRUE);
                     ProdOrderLine.SetCalledFromComponent(TRUE);
                     ProdOrderLine.DELETE(TRUE);
                   END ELSE BEGIN
                     ProdOrderLine.VALIDATE(Quantity,NewQuantity);
                     ProdOrderLine.MODIFY;
                     ProdOrderLine.UpdateProdOrderComp(ProdOrderLine."Qty. per Unit of Measure");
                   END;
                 END;

               ProdOrderBOMComment.SETRANGE(Status,Status);
               ProdOrderBOMComment.SETRANGE("Prod. Order No.","Prod. Order No.");
               ProdOrderBOMComment.SETRANGE("Prod. Order Line No.","Prod. Order Line No.");
               ProdOrderBOMComment.SETRANGE("Prod. Order BOM Line No.","Line No.");
               ProdOrderBOMComment.DELETEALL;

               WhseProdRelease.DeleteLine(Rec);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Prod. Order Component",Status,"Prod. Order No.",'',
                 "Prod. Order Line No.","Line No.","Location Code",TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text99000001,TABLECAPTION);
             END;

    CaptionML=[ENU=Prod. Order Component;
               ESP=Componente orden producci¢n;
               DEA=FA-Komponente];
    PasteIsValid=No;
    LookupPageID=Page5407;
    DrillDownPageID=Page5407;
  }
  FIELDS
  {
    { 1   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado;
                                                              DEA=Status];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ESP=Simulada,Planificada,Planif. en firme,Lanzada,Terminada;
                                                                    DEA=Simuliert,Geplant,Fest geplant,Freigegeben,Beendet];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 2   ;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FIELD(Status));
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n;
                                                              DEA=FA-Nr.] }
    { 3   ;   ;Prod. Order Line No.;Integer       ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FIELD(Status),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ESP=N§ l¡n. orden producc.;
                                                              DEA=FA-Zeilennr.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea;
                                                              DEA=Zeilennr.] }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
                                                                ReserveProdOrderComp.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);
                                                                TESTFIELD("Remaining Qty. (Base)","Expected Qty. (Base)");
                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(DATABASE::Item,"Item No.");
                                                                  EXIT;
                                                                END;

                                                                Item.GET("Item No.");
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  GetDefaultBin;
                                                                  ClearCalcFormula;
                                                                  IF "Quantity per" <> 0 THEN
                                                                    VALIDATE("Quantity per");
                                                                END;
                                                                Description := Item.Description;
                                                                Item.TESTFIELD("Base Unit of Measure");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                GetUpdateFromSKU;
                                                                CreateDim(DATABASE::Item,"Item No.");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto;
                                                              DEA=Artikelnr.] }
    { 12  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 13  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);

                                                                Item.GET("Item No.");
                                                                GetGLSetup;

                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                UpdateUnitCost;

                                                                VALIDATE("Expected Quantity",Quantity * ProdOrderNeeds);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida;
                                                              DEA=Einheitencode] }
    { 14  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad;
                                                              DEA=Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 15  ;   ;Position            ;Code10        ;CaptionML=[ENU=Position;
                                                              ESP=Posici¢n;
                                                              DEA=Position] }
    { 16  ;   ;Position 2          ;Code10        ;CaptionML=[ENU=Position 2;
                                                              ESP=Posici¢n 2;
                                                              DEA=Position 2] }
    { 17  ;   ;Position 3          ;Code10        ;CaptionML=[ENU=Position 3;
                                                              ESP=Posici¢n 3;
                                                              DEA=Position 3] }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=[ENU=Lead-Time Offset;
                                                              ESP=Desfase plazo entrega;
                                                              DEA=Vorlaufzeitverschiebung] }
    { 19  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   OnValidate=VAR
                                                                ProdOrderLine@1000 : Record 5406;
                                                                ProdOrderRtngLine@1001 : Record 5409;
                                                              BEGIN
                                                                VALIDATE("Expected Quantity",Quantity * ProdOrderNeeds);

                                                                ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

                                                                "Due Date" := ProdOrderLine."Starting Date";
                                                                "Due Time" := ProdOrderLine."Starting Time";
                                                                IF "Routing Link Code" <> '' THEN BEGIN
                                                                  ProdOrderRtngLine.SETRANGE(Status,Status);
                                                                  ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
                                                                  IF ProdOrderRtngLine.FINDFIRST THEN BEGIN
                                                                    "Due Date" := ProdOrderRtngLine."Starting Date";
                                                                    "Due Time" := ProdOrderRtngLine."Starting Time";
                                                                  END;
                                                                END;
                                                                IF FORMAT("Lead-Time Offset") <> '' THEN BEGIN
                                                                  "Due Date" :=
                                                                    "Due Date" -
                                                                    (CALCDATE("Lead-Time Offset",WORKDATE) - WORKDATE);
                                                                  "Due Time" := 0T;
                                                                END;
                                                                VALIDATE("Due Date");

                                                                IF "Routing Link Code" <> xRec."Routing Link Code" THEN
                                                                  UpdateBin(Rec,FIELDNO("Routing Link Code"),FIELDCAPTION("Routing Link Code"));
                                                              END;

                                                   CaptionML=[ENU=Routing Link Code;
                                                              ESP=C¢d. conexi¢n ruta;
                                                              DEA=Verbindungscode] }
    { 20  ;   ;Scrap %             ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Scrap %;
                                                              ESP=% Rechazo;
                                                              DEA=Ausschuss %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF Item."No." <> "Item No." THEN
                                                                  Item.GET("Item No.");
                                                                IF "Variant Code" = '' THEN
                                                                  Description := Item.Description
                                                                ELSE BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END;
                                                                GetDefaultBin;
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
                                                                ReserveProdOrderComp.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                TESTFIELD("Reserved Qty. (Base)",0);
                                                                TESTFIELD("Remaining Qty. (Base)","Expected Qty. (Base)");
                                                                UpdateUnitCost;
                                                                VALIDATE("Expected Quantity");
                                                                GetUpdateFromSKU;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              DEA=Variantencode] }
    { 25  ;   ;Expected Quantity   ;Decimal       ;OnValidate=BEGIN
                                                                IF Item.GET("Item No.") THEN
                                                                  IF Item."Rounding Precision" > 0 THEN
                                                                    "Expected Quantity" := ROUND("Expected Quantity",Item."Rounding Precision",'>');
                                                                "Expected Qty. (Base)" := ROUND("Expected Quantity" * "Qty. per Unit of Measure",0.00001);
                                                                IF (Status IN [Status::Released,Status::Finished]) AND
                                                                   (xRec."Item No." <> '') AND
                                                                   ("Line No." <> 0)
                                                                THEN
                                                                  CALCFIELDS("Act. Consumption (Qty)");
                                                                "Remaining Quantity" := "Expected Quantity" - "Act. Consumption (Qty)" / "Qty. per Unit of Measure";
                                                                IF ("Remaining Quantity" * "Expected Quantity") < 0 THEN
                                                                  "Remaining Quantity" := 0;
                                                                "Remaining Qty. (Base)" := ROUND("Remaining Quantity" * "Qty. per Unit of Measure",0.00001);
                                                                "Completely Picked" := "Qty. Picked" >= "Expected Quantity";

                                                                ReserveProdOrderComp.VerifyQuantity(Rec,xRec);

                                                                "Cost Amount" := ROUND("Expected Quantity" * "Unit Cost");
                                                                "Overhead Amount" :=
                                                                  ROUND(
                                                                    "Expected Quantity" *
                                                                    (("Direct Unit Cost" * "Indirect Cost %" / 100) + "Overhead Rate"));
                                                                "Direct Cost Amount" := ROUND("Expected Quantity" * "Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Expected Quantity;
                                                              ESP=Cantidad esperada;
                                                              DEA=Erw. Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=[ENU=Remaining Quantity;
                                                              ESP=Cantidad pendiente;
                                                              DEA=Restmenge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Act. Consumption (Qty);Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Item Ledger Entry".Quantity WHERE (Entry Type=CONST(Consumption),
                                                                                                        Order Type=CONST(Production),
                                                                                                        Order No.=FIELD(Prod. Order No.),
                                                                                                        Order Line No.=FIELD(Prod. Order Line No.),
                                                                                                        Prod. Order Comp. Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Act. Consumption (Qty);
                                                              ESP=Cantidad consumida;
                                                              DEA=Ist-Verbrauch (Menge)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 28  ;   ;Flushing Method     ;Option        ;OnValidate=BEGIN
                                                                IF ("Flushing Method" = "Flushing Method"::Backward) AND (Status = Status::Released) THEN BEGIN
                                                                  ItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type","Prod. Order Comp. Line No.");
                                                                  ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
                                                                  ItemLedgEntry.SETRANGE("Order No.","Prod. Order No.");
                                                                  ItemLedgEntry.SETRANGE("Order Line No.","Prod. Order Line No.");
                                                                  ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
                                                                  ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.","Line No.");
                                                                  IF "Line No." = 0 THEN
                                                                    ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                                  IF ItemLedgEntry.FINDFIRST THEN
                                                                    ERROR(Text99000002,"Flushing Method",ItemLedgEntry.TABLECAPTION);
                                                                END;

                                                                IF ("Flushing Method" <> xRec."Flushing Method") AND
                                                                   (xRec."Flushing Method" IN
                                                                    [xRec."Flushing Method"::Manual,
                                                                     xRec."Flushing Method"::"Pick + Forward",
                                                                     xRec."Flushing Method"::"Pick + Backward"])
                                                                THEN BEGIN
                                                                  CALCFIELDS("Pick Qty.");
                                                                  IF "Pick Qty." <> 0 THEN
                                                                    ERROR(Text99000007,"Flushing Method","Item No.");

                                                                  IF "Qty. Picked" <> 0 THEN
                                                                    ERROR(Text99000008,"Flushing Method","Item No.");

                                                                  IF (xRec."Flushing Method" IN
                                                                      [xRec."Flushing Method"::Manual,
                                                                       xRec."Flushing Method"::"Pick + Forward",
                                                                       xRec."Flushing Method"::"Pick + Backward"]) AND
                                                                     ("Flushing Method" IN ["Flushing Method"::Forward,"Flushing Method"::Backward])
                                                                  THEN BEGIN
                                                                    PickWkshLine.RESET;
                                                                    PickWkshLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                                                                    PickWkshLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                                                                    PickWkshLine.SETRANGE("Source No.","Prod. Order No.");
                                                                    PickWkshLine.SETRANGE("Source Line No.","Prod. Order Line No.");
                                                                    PickWkshLine.SETRANGE("Source Subline No.","Line No.");
                                                                    IF PickWkshLine.FINDFIRST THEN
                                                                      ERROR(Text99000002,"Flushing Method",PickWkshLine.TABLECAPTION);
                                                                  END;
                                                                END;

                                                                IF "Flushing Method" <> xRec."Flushing Method" THEN
                                                                  UpdateBin(Rec,FIELDNO("Flushing Method"),FIELDCAPTION("Flushing Method"));
                                                              END;

                                                   CaptionML=[ENU=Flushing Method;
                                                              ESP=Mtodo de baja;
                                                              DEA=Buchungsmethode];
                                                   OptionCaptionML=[ENU=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                                    ESP=Manual,Adelante,Atr s,Pick + Adelante,Pick + Atr s;
                                                                    DEA=Manuell,Vorwrts,Rckwrts,Kommiss. + Vorwrts,Kommiss. + Rckwrts];
                                                   OptionString=Manual,Forward,Backward,Pick + Forward,Pick + Backward }
    { 30  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF Item."No." <> "Item No." THEN
                                                                  Item.GET("Item No.");
                                                                UpdateUnitCost;
                                                                VALIDATE("Expected Quantity");

                                                                GetDefaultBin;
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
                                                                ReserveProdOrderComp.VerifyChange(Rec,xRec);
                                                                GetUpdateFromSKU;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn;
                                                              DEA=Lagerortcode] }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1;
                                                              DEA=Shortcutdimensionscode 1];
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2;
                                                              DEA=Shortcutdimensionscode 2];
                                                   CaptionClass='1,2,2' }
    { 33  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                                WhseIntegrationMgt@1001 : Codeunit 7317;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                  WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Prod. Order Component",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",0);
                                                                  CheckBin;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF Quantity > 0 THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","Item No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n;
                                                              DEA=Lagerplatzcode] }
    { 35  ;   ;Supplied-by Line No.;Integer       ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FIELD(Status),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                      Line No.=FIELD(Supplied-by Line No.));
                                                   CaptionML=[ENU=Supplied-by Line No.;
                                                              ESP=Suminis. por l¡nea N§;
                                                              DEA=Beliefert von Zeilennr.] }
    { 36  ;   ;Planning Level Code ;Integer       ;CaptionML=[ENU=Planning Level Code;
                                                              ESP=C¢d. nivel planif.;
                                                              DEA=Planungsebenennr.];
                                                   Editable=No }
    { 37  ;   ;Item Low-Level Code ;Integer       ;CaptionML=[ENU=Item Low-Level Code;
                                                              ESP=C¢d. nivel m s bajo prod.;
                                                              DEA=Artikel Stcklistenebene] }
    { 40  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              ESP=Longitud;
                                                              DEA=Lnge];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Width;
                                                              ESP=Ancho;
                                                              DEA=Breite];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Weight;
                                                              ESP=Peso;
                                                              DEA=Gewicht];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Depth               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Depth;
                                                              ESP=Altura;
                                                              DEA=Tiefe];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Calculation Formula ;Option        ;OnValidate=BEGIN
                                                                CASE "Calculation Formula" OF
                                                                  "Calculation Formula"::" ":
                                                                    Quantity := "Quantity per";
                                                                  "Calculation Formula"::Length:
                                                                    Quantity := ROUND(Length * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width":
                                                                    Quantity := ROUND(Length * Width * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width * Depth":
                                                                    Quantity := ROUND(Length * Width * Depth * "Quantity per",0.00001);
                                                                  "Calculation Formula"::Weight:
                                                                    Quantity := ROUND(Weight * "Quantity per",0.00001);
                                                                END;
                                                                "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                VALIDATE("Expected Quantity",Quantity * ProdOrderNeeds);
                                                              END;

                                                   CaptionML=[ENU=Calculation Formula;
                                                              ESP=Tipo c lculo;
                                                              DEA=Formel];
                                                   OptionCaptionML=[ENU=" ,Length,Length * Width,Length * Width * Depth,Weight";
                                                                    ESP=" ,Largo,Largo * Ancho,Largo * Ancho * Alto,Peso";
                                                                    DEA=" ,Lnge,Lnge * Breite,Lnge * Breite * Tiefe,Gewicht"];
                                                   OptionString=[ ,Length,Length * Width,Length * Width * Depth,Weight] }
    { 45  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
                                                                TESTFIELD("Item No.");
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Quantity per;
                                                              ESP=Cantidad por;
                                                              DEA=Komponentenmenge];
                                                   DecimalPlaces=0:5 }
    { 50  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");

                                                                Item.GET("Item No.");
                                                                GetGLSetup;
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                    ERROR(
                                                                      Text99000003,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  UpdateUnitCost;
                                                                END;
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario;
                                                              DEA=Einstandspreis];
                                                   DecimalPlaces=2:5 }
    { 51  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              ESP=Importe coste;
                                                              DEA=Einstandsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 52  ;   ;Due Date            ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                WhseValidateSourceLine.ProdComponentVerifyChange(Rec,xRec);
                                                                IF NOT Blocked THEN
                                                                  CheckDateConflict.ProdOrderComponentCheck(Rec,CurrFieldNo <> 0);
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento;
                                                              DEA=Flligkeitsdatum] }
    { 53  ;   ;Due Time            ;Time          ;OnValidate=BEGIN
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Due Time;
                                                              ESP=Tiempo fin.;
                                                              DEA=Flligkeitszeit] }
    { 60  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida;
                                                              DEA=Menge pro Einheit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Remaining Qty. (Base);Decimal      ;CaptionML=[ENU=Remaining Qty. (Base);
                                                              ESP=Cdad. pendiente (base);
                                                              DEA=Restmenge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 62  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base);
                                                              DEA=Menge (Basis)];
                                                   DecimalPlaces=0:5 }
    { 63  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Prod. Order No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5407),
                                                                                                                 Source Subtype=FIELD(Status),
                                                                                                                 Source Batch Name=CONST(),
                                                                                                                 Source Prod. Order Line=FIELD(Prod. Order Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base);
                                                              DEA=Reservierte Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=Yes }
    { 71  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Prod. Order No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5407),
                                                                                                        Source Subtype=FIELD(Status),
                                                                                                        Source Batch Name=CONST(),
                                                                                                        Source Prod. Order Line=FIELD(Prod. Order Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada;
                                                              DEA=Reservierte Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 73  ;   ;Expected Qty. (Base);Decimal       ;OnValidate=BEGIN
                                                                IF Status <> Status::Simulated THEN BEGIN
                                                                  IF Status IN [Status::Released,Status::Finished] THEN
                                                                    CALCFIELDS("Act. Consumption (Qty)");
                                                                  "Remaining Quantity" := "Expected Quantity" - "Act. Consumption (Qty)";
                                                                  "Remaining Qty. (Base)" := ROUND("Remaining Quantity" * "Qty. per Unit of Measure",0.00001);
                                                                END;
                                                                "Cost Amount" := ROUND("Expected Quantity" * "Unit Cost");
                                                                "Overhead Amount" :=
                                                                  ROUND(
                                                                    "Expected Quantity" *
                                                                    (("Direct Unit Cost" * "Indirect Cost %" / 100) + "Overhead Rate"));
                                                                "Direct Cost Amount" := ROUND("Expected Quantity" * "Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Expected Qty. (Base);
                                                              ESP=Cdad. esperada (base);
                                                              DEA=Erw. Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 76  ;   ;Due Date-Time       ;DateTime      ;OnValidate=BEGIN
                                                                "Due Date" := DT2DATE("Due Date-Time");
                                                                "Due Time" := DT2TIME("Due Date-Time");
                                                                VALIDATE("Due Date");
                                                              END;

                                                   CaptionML=[ENU=Due Date-Time;
                                                              ESP=Fecha vto.-Tiempo;
                                                              DEA=Fllkeitsdatum/-zeit] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESP=Id. grupo dimensiones;
                                                              DEA=Dimensionssatz-ID];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                Substitute Type=CONST(Item),
                                                                                                No.=FIELD(Item No.),
                                                                                                Variant Code=FIELD(Variant Code)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ESP=Disponible sustituci¢n;
                                                              DEA=Ersatzartikel verfgbar];
                                                   Editable=No }
    { 5703;   ;Original Item No.   ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Original Item No.;
                                                              ESP=N§ de producto original;
                                                              DEA=Originalartikelnr.];
                                                   Editable=No }
    { 5704;   ;Original Variant Code;Code10       ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Original Item No.));
                                                   CaptionML=[ENU=Original Variant Code;
                                                              ESP=C¢digo variante original;
                                                              DEA=Originalvariantencode];
                                                   Editable=No }
    { 5750;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE (Activity Type=FILTER(<>Put-away),
                                                                                                                       Source Type=CONST(5407),
                                                                                                                       Source Subtype=FIELD(Status),
                                                                                                                       Source No.=FIELD(Prod. Order No.),
                                                                                                                       Source Line No.=FIELD(Prod. Order Line No.),
                                                                                                                       Source Subline No.=FIELD(Line No.),
                                                                                                                       Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                                       Action Type=FILTER(' '|Place),
                                                                                                                       Original Breakbulk=CONST(No),
                                                                                                                       Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty.;
                                                              ESP=Cdad. picking;
                                                              DEA=Menge fr Kommissionierung];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7300;   ;Qty. Picked         ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                                "Completely Picked" := "Qty. Picked" >= "Expected Quantity";
                                                              END;

                                                   CaptionML=[ENU=Qty. Picked;
                                                              ESP=Cdad. preparada pedido;
                                                              DEA=Menge kommissioniert];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7301;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=[ENU=Qty. Picked (Base);
                                                              ESP=Cdad. preparada pedido (base);
                                                              DEA=Menge kommissioniert (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7302;   ;Completely Picked   ;Boolean       ;CaptionML=[ENU=Completely Picked;
                                                              ESP=Picking completo;
                                                              DEA=Komplett kommissioniert];
                                                   Editable=No }
    { 7303;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=FILTER(<>Put-away),
                                                                                                                              Source Type=CONST(5407),
                                                                                                                              Source Subtype=FIELD(Status),
                                                                                                                              Source No.=FIELD(Prod. Order No.),
                                                                                                                              Source Line No.=FIELD(Prod. Order Line No.),
                                                                                                                              Source Subline No.=FIELD(Line No.),
                                                                                                                              Action Type=FILTER(' '|Place),
                                                                                                                              Original Breakbulk=CONST(No),
                                                                                                                              Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty. (Base);
                                                              ESP=Cdad. picking (Base);
                                                              DEA=Menge fr Kommiss. (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000754;;Direct Unit Cost   ;Decimal       ;CaptionML=[ENU=Direct Unit Cost;
                                                              ESP=Coste unit. directo;
                                                              DEA=EK-Preis];
                                                   DecimalPlaces=2:5 }
    { 99000755;;Indirect Cost %    ;Decimal       ;OnValidate=BEGIN
                                                                "Direct Unit Cost" :=
                                                                  ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100));

                                                                VALIDATE("Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto;
                                                              DEA=Indirekte Kosten %];
                                                   DecimalPlaces=0:5 }
    { 99000756;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales;
                                                              DEA=Gemeinkostensatz];
                                                   DecimalPlaces=0:5 }
    { 99000757;;Direct Cost Amount ;Decimal       ;CaptionML=[ENU=Direct Cost Amount;
                                                              ESP=Imp. coste directo;
                                                              DEA=Betrag direkte Kosten];
                                                   DecimalPlaces=2:2 }
    { 99000758;;Overhead Amount    ;Decimal       ;CaptionML=[ENU=Overhead Amount;
                                                              ESP=Imp. costes gen.;
                                                              DEA=Gemeinkostenbetrag];
                                                   DecimalPlaces=2:2 }
  }
  KEYS
  {
    {    ;Status,Prod. Order No.,Prod. Order Line No.,Line No.;
                                                   Clustered=Yes }
    {    ;Prod. Order No.,Prod. Order Line No.,Line No.,Status }
    {    ;Status,Prod. Order No.,Prod. Order Line No.,Due Date;
                                                   SumIndexFields=Expected Quantity,Cost Amount;
                                                   SIFTLevelsToMaintain=[{Status,Prod. Order No.,Prod. Order Line No.}] }
    {    ;Status,Prod. Order No.,Prod. Order Line No.,Item No.,Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Status,Item No.,Variant Code,Location Code,Due Date;
                                                   SumIndexFields=Expected Quantity,Remaining Qty. (Base),Cost Amount,Overhead Amount;
                                                   MaintainSIFTIndex=No }
    { No ;Item No.,Variant Code,Location Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Due Date;
                                                   SumIndexFields=Expected Quantity,Remaining Qty. (Base),Cost Amount,Overhead Amount;
                                                   KeyGroups=Item(Dim) }
    {    ;Status,Prod. Order No.,Routing Link Code,Flushing Method }
    {    ;Status,Prod. Order No.,Location Code     }
    {    ;Item No.,Variant Code,Location Code,Status,Due Date;
                                                   SumIndexFields=Expected Qty. (Base),Remaining Qty. (Base),Cost Amount,Overhead Amount,Qty. Picked (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Status,Prod. Order No.,Prod. Order Line No.,Item Low-Level Code;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1028 : TextConst 'ENU=A finished production order component cannot be inserted, modified, or deleted.;ESP=No se puede insertar, modificar o eliminar un componente de orden de producci¢n terminado.;DEA=Eine Komponente vom Typ ''Beendeter FA'' kann nicht eingefgt, gendert oder gelscht werden.';
      Text001@1015 : TextConst 'ENU=The changed %1 now points to bin %2. Do you want to update the bin on this line?;ESP=El %1 cambiado ahora se¤ala al almacn %2. ¨Desea actualizar la ubicaci¢n en esta l¡nea?;DEA=Vom genderten Element ''%1'' wird nun auf den Lagerplatz ''%2'' verwiesen. Mchten Sie die den Lagerplatz in dieser Zeile aktualisieren?';
      Text99000000@1000 : TextConst 'ENU=You cannot delete item %1 in line %2 because at least one item ledger entry is associated with it.;ESP=No puede eliminar el producto %1 de la l¡nea %2 porque tiene al menos un mov. producto asociado.;DEA=Der Artikel ''%1'' in der Zeile %2 kann nicht gelscht werden, da mindestens ein zugehriger Artikelposten vorhanden ist.';
      Text99000001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.;DEA=Sie knnen eine %1 nicht umbenennen.';
      Text99000002@1002 : TextConst 'ENU=You cannot change flushing method to %1 when there is at least one record in table %2 associated with it.;ESP=No puede cambiar el mtodo de baja a %1 si existe por lo menos un registro en la tabla %2 asociado con l.;DEA=Die Buchungsmethode kann nicht auf ''%1'' festgelegt werden, solange ihr ein Datensatz in der Tabelle ''%2'' zugeordnet ist.';
      Text99000003@1003 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ESP=No se puede cambiar %1 cuando %2 es %3.;DEA=Sie knnen %1 nicht ndern, wenn %2 %3 ist.';
      Item@1005 : Record 27;
      ItemLedgEntry@1006 : Record 32;
      ReservEntry@1007 : Record 337;
      PickWkshLine@1021 : Record 7326;
      GLSetup@1024 : Record 98;
      Location@1012 : Record 14;
      SKU@1025 : Record 5700;
      ReservMgt@1008 : Codeunit 99000845;
      ReservEngineMgt@1009 : Codeunit 99000831;
      ReserveProdOrderComp@1010 : Codeunit 99000838;
      UOMMgt@1011 : Codeunit 5402;
      DimMgt@1014 : Codeunit 408;
      WhseProdRelease@1016 : Codeunit 5774;
      WhseValidateSourceLine@1027 : Codeunit 5777;
      ItemSubstitutionMgt@1031 : Codeunit 5701;
      Reservation@1017 : Page 498;
      Blocked@1023 : Boolean;
      GLSetupRead@1022 : Boolean;
      Text99000007@1029 : TextConst 'ENU=You cannot change flushing method to %1 because a pick has already been created for production order component %2.;ESP=No puede cambiar el mtodo de baja a %1 porque se ha creado ya un picking para el componente orden producci¢n %2.;DEA=Die Buchungsmethode kann nicht auf ''%1'' festgelegt werden, da fr die FA-Komponente ''%2'' bereits eine Kommissionierung erstellt wurde.';
      Text99000008@1030 : TextConst 'ENU=You cannot change flushing method to %1 because production order component %2 has already been picked.;ESP=No puede cambiar el mtodo de baja a %1 porque ya se ha realizado el picking de del componente orden producci¢n %2.;DEA=Die Buchungsmethode kann nicht auf ''%1'' festgelegt werden, da die FA-Komponente ''%2'' bereits kommissioniert wurde.';
      Text99000009@1013 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?;ESP=No se puede reservar autom ticamente.\¨Desea reservar los productos manualmente?;DEA=Automatische Reservierung nicht mglich.\Mchten Sie die Artikel manuell reservieren?';
      IgnoreErrors@1026 : Boolean;
      ErrorOccured@1032 : Boolean;

    PROCEDURE Caption@4() : Text[100];
    VAR
      ProdOrder@1000 : Record 5405;
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      IF NOT ProdOrder.GET(Status,"Prod. Order No.") THEN
        EXIT('');

      IF NOT ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.") THEN
        CLEAR(ProdOrderLine);

      EXIT(
        STRSUBSTNO('%1 %2 %3',
          "Prod. Order No.",ProdOrder.Description,ProdOrderLine."Item No."));
    END;

    PROCEDURE ProdOrderNeeds@1() : Decimal;
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrderRtngLine@1001 : Record 5409;
    BEGIN
      ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

      "Due Date" := ProdOrderLine."Starting Date";

      ProdOrderRtngLine.RESET;
      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      IF "Routing Link Code" <> '' THEN
        ProdOrderRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
      IF ProdOrderRtngLine.FINDFIRST THEN
        EXIT(
          ProdOrderLine.Quantity *
          (1 + ProdOrderLine."Scrap %" / 100) *
          (1 + ProdOrderRtngLine."Scrap Factor % (Accumulated)") *
          (1 + "Scrap %" / 100) +
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)");

      EXIT(
        ProdOrderLine.Quantity *
        (1 + ProdOrderLine."Scrap %" / 100) * (1 + "Scrap %" / 100));
    END;

    PROCEDURE GetNeededQty@3(CalcBasedOn@1000 : 'Actual Output,Expected Output';IncludePreviousPosting@1001 : Boolean) : Decimal;
    VAR
      ProdOrderLine@1002 : Record 5406;
      ProdOrderRtngLine@1003 : Record 5409;
      CapLedgEntry@1004 : Record 5832;
      CostCalcMgt@1006 : Codeunit 5836;
      OutputQtyBase@1005 : Decimal;
      CompQtyBase@1008 : Decimal;
    BEGIN
      Item.GET("Item No.");
      IF Item."Rounding Precision" = 0 THEN
        Item."Rounding Precision" := 0.00001;

      IF CalcBasedOn = CalcBasedOn::"Actual Output" THEN BEGIN
        ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        ProdOrderRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
        IF NOT ProdOrderRtngLine.FINDFIRST OR ("Routing Link Code" = '') THEN BEGIN
          ProdOrderRtngLine.SETRANGE("Routing Link Code");
          ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');
          IF NOT ProdOrderRtngLine.FINDFIRST THEN
            ProdOrderRtngLine."Operation No." := '';
        END;
        IF Status IN [Status::Released,Status::Finished] THEN BEGIN
          CapLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
          CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
          CapLedgEntry.SETRANGE("Order No.","Prod. Order No.");
          CapLedgEntry.SETRANGE("Order Line No.","Prod. Order Line No.");
          CapLedgEntry.SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
          IF CapLedgEntry.FIND('-') THEN
            REPEAT
              OutputQtyBase := OutputQtyBase + CapLedgEntry."Output Quantity" + CapLedgEntry."Scrap Quantity";
            UNTIL CapLedgEntry.NEXT = 0;
        END;

        CompQtyBase := CostCalcMgt.CalcActNeededQtyBase(ProdOrderLine,Rec,OutputQtyBase);

        IF IncludePreviousPosting THEN BEGIN
          IF Status IN [Status::Released,Status::Finished] THEN
            CALCFIELDS("Act. Consumption (Qty)");
          EXIT(
            ROUND(
              (CompQtyBase - "Act. Consumption (Qty)") / "Qty. per Unit of Measure",
              Item."Rounding Precision",'>'));
        END;
        EXIT(ROUND(CompQtyBase / "Qty. per Unit of Measure",Item."Rounding Precision",'>'));
      END;
      EXIT(ROUND("Remaining Quantity",Item."Rounding Precision"));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      Reservation.SetProdOrderComponent(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD("Item No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE AdjustQtyToQtyPicked@25(VAR QtyToPost@1000 : Decimal);
    VAR
      AdjustedQty@1001 : Decimal;
    BEGIN
      AdjustedQty := "Qty. Picked" - ("Expected Quantity" - "Remaining Quantity");

      IF QtyToPost > AdjustedQty THEN
        QtyToPost := AdjustedQty;
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      Blocked := SetBlock;
      ReserveProdOrderComp.Block(Blocked);
    END;

    PROCEDURE CreateDim@5(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      ProdOrderLine@1004 : Record 5406;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';

      ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");

      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          ProdOrderLine."Dimension Set ID",DATABASE::Item);
    END;

    PROCEDURE IsInbound@22() : Boolean;
    BEGIN
      EXIT("Quantity (Base)" < 0);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      ReserveProdOrderComp.CallItemTracking(Rec);
    END;

    PROCEDURE ValidateShortcutDimCode@6(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@9(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE GetUpdateFromSKU@10();
    VAR
      SKU@1000 : Record 5700;
      GetPlanningParameters@1001 : Codeunit 99000855;
    BEGIN
      GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
      VALIDATE("Flushing Method",SKU."Flushing Method");
    END;

    PROCEDURE UpdateDatetime@20();
    BEGIN
      IF ("Due Date" <> 0D) AND ("Due Time" <> 0T) THEN
        "Due Date-Time" := CREATEDATETIME("Due Date","Due Time")
      ELSE
        "Due Date-Time" := 0DT;
    END;

    LOCAL PROCEDURE GetGLSetup@11();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Prod. Order Component",Status,
          "Prod. Order No.",'',"Prod. Order Line No.","Line No."));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE GetDefaultBin@50();
    VAR
      ProdOrderRtngLine@1000 : Record 5409;
    BEGIN
      IF (Quantity * xRec.Quantity > 0) AND
         ("Item No." = xRec."Item No.") AND
         ("Location Code" = xRec."Location Code") AND
         ("Variant Code" = xRec."Variant Code") AND
         ("Routing Link Code" = xRec."Routing Link Code")
      THEN
        EXIT;

      "Bin Code" := '';
      IF ("Location Code" <> '') AND ("Item No." <> '') THEN
        VALIDATE("Bin Code",GetDefaultConsumptionBin(ProdOrderRtngLine));
    END;

    PROCEDURE GetDefaultConsumptionBin@15(VAR ProdOrderRtngLine@1000 : Record 5409) BinCode : Code[20];
    VAR
      ProdOrderLine@1001 : Record 5406;
      WMSManagement@1002 : Codeunit 7302;
    BEGIN
      ProdOrderLine.GET(Status,"Prod. Order No.","Prod. Order Line No.");
      IF "Location Code" = ProdOrderLine."Location Code" THEN
        IF FindFirstRtngLine(ProdOrderRtngLine,ProdOrderLine) THEN
          BinCode := GetBinCodeFromRtngLine(ProdOrderRtngLine);

      IF BinCode <> '' THEN
        EXIT;

      BinCode := GetBinCodeFromLocation("Location Code");

      IF BinCode <> '' THEN
        EXIT;

      GetLocation("Location Code");
      IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
        WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code",BinCode);
    END;

    LOCAL PROCEDURE FindFirstRtngLine@16(VAR ProdOrderRtngLine@1000 : Record 5409;ProdOrderLine@1001 : Record 5406) : Boolean;
    BEGIN
      ProdOrderRtngLine.RESET;
      ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETFILTER("No.",'<>%1',''); // empty No. implies blank bin codes - ignore these
      ProdOrderRtngLine.SETRANGE("Previous Operation No.",''); // first operation
      IF "Routing Link Code" <> '' THEN BEGIN
        ProdOrderRtngLine.SETRANGE("Routing Link Code","Routing Link Code");
        ProdOrderRtngLine.SETRANGE("Previous Operation No.");
        IF ProdOrderRtngLine.COUNT = 0 THEN BEGIN // no routing line with Routing Link Code found- use 1st op
          ProdOrderRtngLine.SETRANGE("Routing Link Code");
          ProdOrderRtngLine.SETRANGE("Previous Operation No.",'');
        END;
      END;

      EXIT(ProdOrderRtngLine.FINDFIRST);
    END;

    LOCAL PROCEDURE GetBinCodeFromRtngLine@18(ProdOrderRtngLine@1000 : Record 5409) BinCode : Code[20];
    BEGIN
      CASE "Flushing Method" OF
        "Flushing Method"::Manual,
        "Flushing Method"::"Pick + Forward",
        "Flushing Method"::"Pick + Backward":
          BinCode := ProdOrderRtngLine."To-Production Bin Code";
        "Flushing Method"::Forward,
        "Flushing Method"::Backward:
          BinCode := ProdOrderRtngLine."Open Shop Floor Bin Code";
      END;
    END;

    LOCAL PROCEDURE GetBinCodeFromLocation@19(LocationCode@1000 : Code[10]) BinCode : Code[20];
    BEGIN
      GetLocation(LocationCode);
      CASE "Flushing Method" OF
        "Flushing Method"::Manual,
        "Flushing Method"::"Pick + Forward",
        "Flushing Method"::"Pick + Backward":
          BinCode := Location."To-Production Bin Code";
        "Flushing Method"::Forward,
        "Flushing Method"::Backward:
          BinCode := Location."Open Shop Floor Bin Code";
      END;
    END;

    LOCAL PROCEDURE UpdateBin@23(VAR ProdOrderComp@1000 : Record 5407;FieldNo@1001 : Integer;FieldCaption@1002 : Text[30]);
    VAR
      ProdOrderComp2@1003 : Record 5407;
      OverwriteBinCode@1004 : Boolean;
    BEGIN
      ProdOrderComp2 := ProdOrderComp;
      ProdOrderComp2.GetDefaultBin;
      IF ProdOrderComp."Bin Code" <> ProdOrderComp2."Bin Code" THEN
        IF CurrFieldNo = FieldNo THEN BEGIN
          IF CONFIRM(Text001,FALSE,FieldCaption,ProdOrderComp2."Bin Code") THEN
            OverwriteBinCode := TRUE;
        END ELSE
          OverwriteBinCode := TRUE;
      IF OverwriteBinCode THEN
        ProdOrderComp."Bin Code" := ProdOrderComp2."Bin Code";
    END;

    LOCAL PROCEDURE CheckBin@24();
    VAR
      BinContent@1000 : Record 7302;
      Bin@1001 : Record 7354;
    BEGIN
      IF "Bin Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT;

        IF BinContent.GET(
             "Location Code","Bin Code",
             "Item No.","Variant Code","Unit of Measure Code")
        THEN BEGIN
          IF NOT BinContent.CheckWhseClass(IgnoreErrors) THEN
            ErrorOccured := TRUE;
        END ELSE BEGIN
          Bin.GET("Location Code","Bin Code");
          IF NOT Bin.CheckWhseClass("Item No.",IgnoreErrors) THEN
            ErrorOccured := TRUE;
        END;
      END;
      IF ErrorOccured THEN
        "Bin Code" := '';
    END;

    PROCEDURE AutoReserve@2();
    VAR
      Item@1001 : Record 27;
      FullAutoReservation@1000 : Boolean;
    BEGIN
      IF Status IN [Status::Simulated,Status::Finished] THEN
        EXIT;

      TESTFIELD("Item No.");
      Item.GET("Item No.");
      IF Item.Reserve <> Item.Reserve::Always THEN
        EXIT;

      IF "Remaining Qty. (Base)" <> 0 THEN BEGIN
        TESTFIELD("Due Date");
        ReservMgt.SetProdOrderComponent(Rec);
        ReservMgt.AutoReserve(FullAutoReservation,'',"Due Date","Remaining Quantity","Remaining Qty. (Base)");
        CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
        FIND;
        IF NOT FullAutoReservation AND
           (CurrFieldNo <> 0)
        THEN BEGIN
          IF CONFIRM(Text99000009,TRUE) THEN BEGIN
            COMMIT;
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      ItemSubstitutionMgt.GetCompSubst(Rec);
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "Item No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","Item No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearCalcFormula@13();
    BEGIN
      "Calculation Formula" := "Calculation Formula"::" ";
      Length := 0;
      Width := 0;
      Weight := 0;
      Depth := 0;
    END;

    LOCAL PROCEDURE UpdateUnitCost@12();
    BEGIN
      IF GetSKU THEN
        "Unit Cost" := SKU."Unit Cost"
      ELSE
        "Unit Cost" := Item."Unit Cost";

      "Unit Cost" :=
        ROUND("Unit Cost" * "Qty. per Unit of Measure",
          GLSetup."Unit-Amount Rounding Precision");

      "Indirect Cost %" := ROUND(Item."Indirect Cost %",0.00001);

      "Overhead Rate" :=
        ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",
          GLSetup."Unit-Amount Rounding Precision");

      "Direct Unit Cost" :=
        ROUND(
          ("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
          GLSetup."Unit-Amount Rounding Precision");
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;IncludeFirmPlanned@1001 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
      IF IncludeFirmPlanned THEN
        SETRANGE(Status,Status::Planned,Status::Released)
      ELSE
        SETFILTER(Status,'%1|%2',Status::Planned,Status::Released);
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Remaining Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;IncludeFirmPlanned@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IncludeFirmPlanned);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;IncludeFirmPlanned@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IncludeFirmPlanned);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE ShowDimensions@69();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',Status,"Prod. Order No.","Prod. Order Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE SetIgnoreErrors@31();
    BEGIN
      IgnoreErrors := TRUE;
    END;

    PROCEDURE HasErrorOccured@32() : Boolean;
    BEGIN
      EXIT(ErrorOccured);
    END;

    BEGIN
    END.
  }
}

