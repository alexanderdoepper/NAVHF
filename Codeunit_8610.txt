OBJECT Codeunit 8610 Questionnaire Management
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The value of the key field %1 has not been filled in for questionnaire %2.;DEA=Der Wert des SchlÅsselfelds %1 wurde fÅr Fragebogen %2 nicht ausgefÅllt.';
      XMLDOMMgt@1002 : Codeunit 6224;
      ConfigProgressBar@1023 : Codeunit 8615;
      ConfigValidateMgt@1003 : Codeunit 8617;
      FileMgt@1016 : Codeunit 419;
      XlApp@1013 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      XlBook@1012 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      XlSheet@1011 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      Text001@1008 : TextConst 'ENU=Exporting questionnaire\;DEA=Fragebogen exportieren\';
      Text002@1009 : TextConst 'ENU=Importing questionnaire\;DEA=Fragebogen importieren\';
      Text005@1010 : TextConst 'ENU=Could not create the XML schema.;DEA=Fehler beim Erstellen des XML-Schemas.';
      Text007@1026 : TextConst 'ENU=Applying answers\;DEA=Antworten werden angewendet\';
      Text008@1025 : TextConst 'ENU=Updating questionnaire\;DEA=Fragebogen wird aktualisiert\';
      Text019@1017 : TextConst 'ENU=Could not create an Excel instance.;DEA=Fehler beim Erstellen einer Excel-Instanz.';
      Text020@1014 : TextConst 'ENU=Excel does not contain an XML schema.;DEA=Excel enthÑlt kein XML-Schema.';
      Text022@1005 : TextConst 'ENU=Creating Excel worksheet\;DEA=Exceltabelle wird erstellt\';
      ExportToExcel@1018 : Boolean;
      Text024@1020 : TextConst 'ENU=Download;DEA=Herunterladen';
      Text025@1021 : TextConst 'ENU=*.*|*.*;DEA=*.*|*.*';
      Text026@1022 : TextConst 'ENU=Default;DEA=Standard';
      CalledFromCode@1024 : Boolean;
      Text028@1019 : TextConst 'ENU=Import File;DEA=Datei importieren';
      Text029@1004 : TextConst '@@@="Only translate ''XML Files'' {Split=r""[\|\(]\*\.[^ |)]*[|) ]?""}";ENU=XML file (*.xml)|*.xml;DEA=XML-Datei (*.xml)|*.xml';

    PROCEDURE UpdateQuestions@1(ConfigQuestionArea@1000 : Record 8611);
    VAR
      ConfigQuestion@1002 : Record 8612;
      Field@1001 : Record 2000000041;
      ConfigPackageMgt@1003 : Codeunit 8611;
      NextQuestionNo@1007 : Integer;
    BEGIN
      IF ConfigQuestionArea."Table ID" = 0 THEN
        EXIT;

      ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionArea.Code);
      IF ConfigQuestion.FINDLAST THEN
        NextQuestionNo := ConfigQuestion."No." + 1
      ELSE
        NextQuestionNo := 1;

      ConfigPackageMgt.SetFieldFilter(Field,ConfigQuestionArea."Table ID",0);
      IF Field.FINDSET THEN
        REPEAT
          ConfigQuestion.INIT;
          ConfigQuestion."Questionnaire Code" := ConfigQuestionArea."Questionnaire Code";
          ConfigQuestion."Question Area Code" := ConfigQuestionArea.Code;
          ConfigQuestion."No." := NextQuestionNo;
          ConfigQuestion."Table ID" := ConfigQuestionArea."Table ID";
          ConfigQuestion."Field ID" := Field."No.";
          IF NOT QuestionExist(ConfigQuestion) THEN BEGIN
            UpdateQuestion(ConfigQuestion);
            ConfigQuestion."Answer Option" := BuildAnswerOption(ConfigQuestionArea."Table ID",Field."No.");
            ConfigQuestion.INSERT;
            NextQuestionNo := NextQuestionNo + 1;
          END;
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE UpdateQuestion@2(VAR ConfigQuestion@1000 : Record 8612);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      WITH ConfigQuestion DO BEGIN
        IF Question <> '' THEN
          EXIT;
        IF "Table ID" = 0 THEN
          EXIT;
        RecRef.OPEN("Table ID");
        FieldRef := RecRef.FIELD("Field ID");
        Question := FieldRef.CAPTION + '?';
      END;
    END;

    PROCEDURE UpdateQuestionnaire@3(ConfigQuestionnaire@1000 : Record 8610) : Boolean;
    VAR
      ConfigQuestionArea@1001 : Record 8611;
    BEGIN
      IF ConfigQuestionnaire.Code = '' THEN
        EXIT;

      ConfigQuestionArea.RESET;
      ConfigQuestionArea.SETRANGE("Questionnaire Code",ConfigQuestionnaire.Code);
      IF ConfigQuestionArea.FINDSET THEN BEGIN
        ConfigProgressBar.Init(ConfigQuestionArea.COUNT,Text008);
        REPEAT
          ConfigProgressBar.Update(ConfigQuestionArea.Code);
          UpdateQuestions(ConfigQuestionArea);
        UNTIL ConfigQuestionArea.NEXT = 0;
        ConfigProgressBar.Close;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE QuestionExist@12(ConfigQuestion@1000 : Record 8612) : Boolean;
    VAR
      ConfigQuestion2@1001 : Record 8612;
    BEGIN
      ConfigQuestion2.RESET;
      ConfigQuestion2.SETCURRENTKEY("Questionnaire Code","Question Area Code","Field ID");
      ConfigQuestion2.SETRANGE("Questionnaire Code",ConfigQuestion."Questionnaire Code");
      ConfigQuestion2.SETRANGE("Question Area Code",ConfigQuestion."Question Area Code");
      ConfigQuestion2.SETRANGE("Field ID",ConfigQuestion."Field ID");
      EXIT(NOT ConfigQuestion2.ISEMPTY);
    END;

    PROCEDURE BuildAnswerOption@8(TableID@1007 : Integer;FieldID@1006 : Integer) : Text[250];
    VAR
      Field@1008 : Record 2000000041;
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
      BooleanText@1002 : Text[30];
    BEGIN
      Field.SETRANGE(TableNo,TableID);
      Field.SETRANGE("No.",FieldID);

      IF NOT Field.FINDFIRST THEN
        EXIT;

      CASE Field.Type OF
        Field.Type::Option:
          BEGIN
            RecRef.OPEN(Field.TableNo);
            FieldRef := RecRef.FIELD(Field."No.");
            EXIT(FieldRef.OPTIONCAPTION);
          END;
        Field.Type::Boolean:
          BEGIN
            BooleanText := FORMAT(TRUE) + ',' + FORMAT(FALSE);
            EXIT(BooleanText)
          END;
        ELSE
          EXIT(FORMAT(Field.Type));
      END;
    END;

    PROCEDURE ApplyAnswers@30(ConfigQuestionnaire@1001 : Record 8610) : Boolean;
    VAR
      ConfigQuestionArea@1000 : Record 8611;
    BEGIN
      ConfigQuestionArea.RESET;
      ConfigQuestionArea.SETRANGE("Questionnaire Code",ConfigQuestionnaire.Code);
      IF ConfigQuestionArea.FINDSET THEN BEGIN
        ConfigProgressBar.Init(ConfigQuestionArea.COUNT,Text007);
        REPEAT
          ConfigProgressBar.Update(ConfigQuestionArea.Code);
          ApplyAnswer(ConfigQuestionArea);
        UNTIL ConfigQuestionArea.NEXT = 0;
        ConfigProgressBar.Close;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ApplyAnswer@7(ConfigQuestionArea@1001 : Record 8611);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF ConfigQuestionArea."Table ID" = 0 THEN
        EXIT;

      RecRef.OPEN(ConfigQuestionArea."Table ID");
      RecRef.INIT;

      InsertRecordWithKeyFields(RecRef,ConfigQuestionArea);
      ModifyRecordWithOtherFields(RecRef,ConfigQuestionArea);
    END;

    LOCAL PROCEDURE InsertRecordWithKeyFields@40(VAR RecRef@1000 : RecordRef;ConfigQuestionArea@1002 : Record 8611);
    VAR
      ConfigQuestion@1001 : Record 8612;
      RecRef1@1006 : RecordRef;
      KeyRef@1003 : KeyRef;
      FieldRef@1004 : FieldRef;
      KeyFieldCount@1005 : Integer;
    BEGIN
      ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionArea.Code);

      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        ConfigQuestion.SETRANGE("Field ID",FieldRef.NUMBER);
        IF ConfigQuestion.FINDFIRST THEN BEGIN
          ConfigValidateMgt.ValidateFieldValue(RecRef,FieldRef,ConfigQuestion.Answer,FALSE);
        END ELSE
          IF KeyRef.FIELDCOUNT <> 1 THEN
            ERROR(STRSUBSTNO(Text000,FieldRef.NAME,ConfigQuestionArea.Code));
      END;

      RecRef1 := RecRef.DUPLICATE;

      IF RecRef1.FIND THEN BEGIN
        RecRef := RecRef1;
        EXIT
      END;

      RecRef.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ModifyRecordWithOtherFields@39(VAR RecRef@1004 : RecordRef;ConfigQuestionArea@1002 : Record 8611);
    VAR
      ConfigQuestion@1003 : Record 8612;
      TempConfigPackageField@1006 : TEMPORARY Record 8616;
      ConfigPackageManagement@1005 : Codeunit 8611;
      FieldRef@1001 : FieldRef;
      ErrorText@1000 : Text[250];
    BEGIN
      ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionArea.Code);

      IF ConfigQuestion.FINDSET THEN
        REPEAT
          TempConfigPackageField.DELETEALL;
          IF ConfigQuestion.Answer <> '' THEN BEGIN
            FieldRef := RecRef.FIELD(ConfigQuestion."Field ID");
            ConfigValidateMgt.ValidateFieldValue(RecRef,FieldRef,ConfigQuestion.Answer,FALSE);
            ConfigPackageManagement.GetFieldsOrder(RecRef,'',TempConfigPackageField);
            ErrorText := ConfigValidateMgt.ValidateFieldRefRelationAgainstCompanyData(FieldRef,TempConfigPackageField);
            IF ErrorText <> '' THEN
              ERROR(ErrorText);
          END;
        UNTIL ConfigQuestion.NEXT = 0;
      RecRef.MODIFY(TRUE);
    END;

    PROCEDURE ExportQuestionnaireAsXML@4(XMLDataFile@1000 : Text;VAR ConfigQuestionnaire@1001 : Record 8610) : Boolean;
    VAR
      QuestionnaireXML@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ToFile@1007 : Text[1024];
      FileName@1006 : Text;
      Exported@1009 : Boolean;
    BEGIN
      QuestionnaireXML := QuestionnaireXML.XmlDocument;

      GenerateQuestionnaireXMLDocument(QuestionnaireXML,ConfigQuestionnaire);

      Exported := TRUE;
      IF NOT ExportToExcel THEN BEGIN
        FileName := XMLDataFile;
        ToFile := Text026 + '.xml';

        IF NOT CalledFromCode THEN
          FileName := FileMgt.ServerTempFileName('.xml');
        QuestionnaireXML.Save(FileName);
        IF NOT CalledFromCode THEN
          Exported := FileMgt.DownloadHandler(FileName,Text024,'',Text025,ToFile);
      END ELSE BEGIN
        FileName := XMLDataFile;
        QuestionnaireXML.Save(FileName);
      END;

      EXIT(Exported);
    END;

    PROCEDURE GenerateQuestionnaireXMLDocument@1100(QuestionnaireXML@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ConfigQuestionnaire@1001 : Record 8610);
    VAR
      ConfigQuestionArea@1005 : Record 8611;
      RecRef@1002 : RecordRef;
      DocumentNode@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      QuestionnaireXML.LoadXml(
        '<?xml version="1.0" encoding="UTF-16" standalone="yes"?><Questionnaire></Questionnaire>');

      DocumentNode := QuestionnaireXML.DocumentElement;

      RecRef.GETTABLE(ConfigQuestionnaire);
      CreateFieldSubtree(RecRef,DocumentNode);

      ConfigQuestionArea.SETRANGE("Questionnaire Code",ConfigQuestionnaire.Code);
      IF ConfigQuestionArea.FINDSET THEN BEGIN
        ConfigProgressBar.Init(ConfigQuestionArea.COUNT,Text001);
        REPEAT
          ConfigProgressBar.Update(ConfigQuestionArea.Code);
          CreateQuestionNodes(QuestionnaireXML,ConfigQuestionArea);
        UNTIL ConfigQuestionArea.NEXT = 0;
        ConfigProgressBar.Close;
      END;
    END;

    PROCEDURE ImportQuestionnaireAsXMLFromClient@15() : Boolean;
    VAR
      ServerFileName@1000 : Text;
    BEGIN
      ServerFileName := FileMgt.ServerTempFileName('.xml');
      IF UPLOAD(Text028,'',Text029,'',ServerFileName) THEN
        EXIT(ImportQuestionnaireAsXML(ServerFileName));

      EXIT(FALSE);
    END;

    PROCEDURE ImportQuestionnaireAsXML@5(XMLDataFile@1000 : Text) : Boolean;
    VAR
      QuestionnaireXML@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      QuestionnaireXML := QuestionnaireXML.XmlDocument;
      QuestionnaireXML.Load(XMLDataFile);

      EXIT(ImportQuestionnaireXMLDocument(QuestionnaireXML));
    END;

    PROCEDURE ImportQuestionnaireXMLDocument@1108(QuestionnaireXML@1104 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      ConfigQuestionnaire@1003 : Record 8610;
      ConfigQuestionArea@1007 : Record 8611;
      ConfigQuestion@1000 : Record 8612;
      QuestionAreaNodes@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      QuestionAreaNode@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      QuestionNodes@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      QuestionnaireNode@1103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AreaNodeCount@1009 : Integer;
      NodeCount@1010 : Integer;
    BEGIN
      QuestionnaireNode := QuestionnaireXML.SelectSingleNode('//Questionnaire');

      UpdateInsertQuestionnaireField(ConfigQuestionnaire,QuestionnaireNode);
      QuestionAreaNodes := QuestionnaireNode.SelectNodes('child::*[position() >= 3]');

      ConfigProgressBar.Init(QuestionAreaNodes.Count,Text002);

      FOR AreaNodeCount := 0 TO QuestionAreaNodes.Count - 1 DO BEGIN
        QuestionAreaNode := QuestionAreaNodes.Item(AreaNodeCount);
        ConfigProgressBar.Update(GetNodeValue(QuestionAreaNode,'Code'));
        ConfigQuestionArea."Questionnaire Code" := ConfigQuestionnaire.Code;
        UpdateInsertQuestionAreaFields(ConfigQuestionArea,QuestionAreaNode);

        QuestionNodes := QuestionAreaNode.SelectNodes('ConfigQuestion');
        FOR NodeCount := 0 TO QuestionNodes.Count - 1 DO BEGIN
          ConfigQuestion.INIT;
          ConfigQuestion."Questionnaire Code" := ConfigQuestionArea."Questionnaire Code";
          ConfigQuestion."Question Area Code" := ConfigQuestionArea.Code;
          ConfigQuestion."Table ID" := ConfigQuestionArea."Table ID";
          UpdateInsertQuestionFields(ConfigQuestion,QuestionNodes.Item(NodeCount))
        END;
      END;

      ConfigProgressBar.Close;
      EXIT(TRUE);
    END;

    PROCEDURE ExportQuestionnaireToExcel@9(ExcelFile@1001 : Text;VAR ConfigQuestionnaire@1000 : Record 8610) : Boolean;
    VAR
      ConfigQuestionnaire1@1019 : Record 8610;
      ConfigQuestionArea@1018 : Record 8611;
      ConfigQuestion@1002 : Record 8612;
      ConfigQuestionnaireSchema@1017 : XMLport 8611;
      XMLMap@1008 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";
      ListObject@1006 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024471-0000-0000-C000-000000000046}:Unknown Automation Server.ListObject";
      ListColumns@1005 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024472-0000-0000-C000-000000000046}:Unknown Automation Server.ListColumns";
      ListColumn@1004 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024473-0000-0000-C000-000000000046}:Unknown Automation Server.ListColumn";
      Range@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      OStream@1016 : OutStream;
      TempSchemaFile@1015 : File;
      TempConfigQuestionnaireFileName@1007 : Text;
      TempConfigQuestionnaireFNCL@1009 : Text;
      TempSchemaFileName@1010 : Text;
      TempSchemaFileNameCL@1011 : Text;
    BEGIN
      ConfigQuestionnaire1.SETRANGE(Code,ConfigQuestionnaire.Code);
      TempSchemaFile.CREATETEMPFILE;
      TempSchemaFileName := TempSchemaFile.NAME + '.xsd';
      TempSchemaFile.CLOSE;

      TempSchemaFile.CREATE(TempSchemaFileName);
      TempSchemaFile.CREATEOUTSTREAM(OStream);
      ConfigQuestionnaireSchema.SETDESTINATION(OStream);
      ConfigQuestionnaireSchema.SETTABLEVIEW(ConfigQuestionnaire1);
      IF NOT ConfigQuestionnaireSchema.EXPORT THEN
        ERROR(Text005);

      TempSchemaFile.CLOSE;

      ExportToExcel := TRUE;
      CalledFromCode := TRUE;
      TempConfigQuestionnaireFileName := FileMgt.ServerTempFileName('');
      ExportQuestionnaireAsXML(TempConfigQuestionnaireFileName,ConfigQuestionnaire);
      ExportToExcel := FALSE;

      TempConfigQuestionnaireFNCL := FileMgt.DownloadTempFile(TempConfigQuestionnaireFileName);
      TempSchemaFileNameCL := FileMgt.DownloadTempFile(TempSchemaFileName);

      CreateBook;
      XlApp.DisplayAlerts(FALSE);

      XlBook.XmlMaps.Add(TempSchemaFileNameCL);

      XMLMap := XlBook.XmlMaps.Item(1);

      XlSheet := XlBook.Worksheets.Add;
      IF ConfigQuestionnaire.Description <> '' THEN
        XlSheet.Name := ConfigQuestionnaire.Description
      ELSE
        XlSheet.Name := ConfigQuestionnaire.Code;

      Range := XlSheet.Range('A1');
      Range.Value := ConfigQuestionnaire.Code;
      Range.XPath.SetValue(XMLMap,'/Questionnaire/' + GetElementName(ConfigQuestionnaire.FIELDNAME(Code)) );

      Range := XlSheet.Range('B1');
      Range.Value := ConfigQuestionnaire.Description;
      Range.XPath.SetValue(XMLMap,'/Questionnaire/' + GetElementName(ConfigQuestionnaire.FIELDNAME(Description)) );

      ConfigQuestionArea.SETRANGE("Questionnaire Code",ConfigQuestionnaire.Code);
      ConfigProgressBar.Init(ConfigQuestionArea.COUNT,Text022);
      IF ConfigQuestionArea.FINDSET THEN BEGIN
        REPEAT
          ConfigProgressBar.Update(ConfigQuestionArea.Code);
          ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
          ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionArea.Code);

          XlSheet := XlBook.Worksheets.Add;
          IF ConfigQuestionArea.Description <> '' THEN
            XlSheet.Name := ConfigQuestionArea.Description
          ELSE
            IF ConfigQuestionArea.Code <> ConfigQuestionArea."Questionnaire Code" THEN
              XlSheet.Name := ConfigQuestionArea.Code
            ELSE
              XlSheet.Name := ConfigQuestionArea."Questionnaire Code" + ' ' + ConfigQuestionArea.Code;

          Range := XlSheet.Range('A1');
          Range.Value := ConfigQuestionArea.Code;
          Range.XPath.SetValue(XMLMap,
            '/Questionnaire/' +
            GetElementName(ConfigQuestionArea.Code) + 'Questions/' + GetElementName(ConfigQuestionArea.FIELDNAME(Code)) );

          Range := XlSheet.Range('B1');
          Range.Value := ConfigQuestionArea.Description;
          Range.XPath.SetValue(XMLMap,
            '/Questionnaire/' +
            GetElementName(ConfigQuestionArea.Code) + 'Questions/' + GetElementName(ConfigQuestionArea.FIELDNAME(Description)) );

          Range := XlSheet.Range('C1');
          Range.Value := ConfigQuestionArea."Table ID";
          Range.XPath.SetValue(XMLMap,
            '/Questionnaire/' +
            GetElementName(ConfigQuestionArea.Code) + 'Questions/' + GetElementName(ConfigQuestionArea.FIELDNAME("Table ID")) );

          IF ConfigQuestion.FINDFIRST THEN BEGIN
            Range := XlSheet.Range('A2',FORMAT(GetXLColumnID(7)) + '2');
            Range.Select;

            ListObject := XlSheet.ListObjects.Add;
            ListColumns := ListObject.ListColumns;

            ListColumn := ListColumns.Item(1);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION("No.");
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME("No.")));

            ListColumn := ListColumns.Item(2);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION(Question);
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME(Question)));

            ListColumn := ListColumns.Item(3);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION("Answer Option");
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME("Answer Option")));

            ListColumn := ListColumns.Item(4);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION(Answer);
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME(Answer)));

            ListColumn := ListColumns.Item(5);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION(Reference);
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME(Reference)));

            ListColumn := ListColumns.Item(6);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION("Field ID");
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME("Field ID")));

            ListColumn := ListColumns.Item(7);
            ListColumn.Name := ConfigQuestion.FIELDCAPTION("Question Origin");
            ListColumn.XPath.SetValue(XMLMap,
              '/Questionnaire/' +
              (GetElementName(ConfigQuestionArea.Code) + 'Questions/') +
              'ConfigQuestion/' + GetElementName(ConfigQuestion.FIELDNAME("Question Origin")));

            XMLMap.Import(TempConfigQuestionnaireFNCL,TRUE);
          END;

          XlSheet.Columns.Range('F:F').EntireColumn.Hidden := TRUE;
        UNTIL ConfigQuestionArea.NEXT = 0;
      END;

      XlBook._SaveAs(ExcelFile);

      CloseXlApp;

      FILE.ERASE(TempSchemaFileName);
      FILE.ERASE(TempConfigQuestionnaireFileName);

      ConfigProgressBar.Close;

      EXIT(TRUE);
    END;

    PROCEDURE ImportQuestionnaireFromExcel@24(XLSDataFile@1000 : Text) Imported : Boolean;
    VAR
      TmpXmlFile@1005 : File;
      XmlMaps@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447C-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMaps";
      XmlMap@1003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";
      InStream@1006 : InStream;
      XMLDataFileClient@1004 : Text;
      XMLDataFileServer@1001 : Text;
    BEGIN
      IF ISCLEAR(XlApp) THEN
        IF NOT CREATE(XlApp,TRUE,TRUE) THEN
          ERROR(Text019);

      XlApp.Workbooks._Open(XLSDataFile);
      XlBook := XlApp.ActiveWorkbook;
      XMLDataFileClient := '';
      XmlMaps := XlBook.XmlMaps;
      IF XmlMaps.Count <> 0 THEN BEGIN
        TmpXmlFile.CREATETEMPFILE;
        TmpXmlFile.CREATEINSTREAM(InStream);
        DOWNLOADFROMSTREAM(InStream,'',FileMgt.Magicpath,'',XMLDataFileClient);
        TmpXmlFile.CLOSE;

        XmlMap := XmlMaps.Item(1);
        XmlMap.Export(XMLDataFileClient,TRUE);

        XMLDataFileServer := FileMgt.ServerTempFileName('.xml');
        UPLOAD('',FileMgt.Magicpath,'',XMLDataFileClient,XMLDataFileServer);

        IF ImportQuestionnaireAsXML(XMLDataFileServer) THEN
          Imported := TRUE;
        CloseXlApp;
      END ELSE BEGIN
        CloseXlApp;
        ERROR(Text020);
      END;

      EXIT(Imported);
    END;

    PROCEDURE CreateQuestionNodes@10(QuestionnaireXML@1104 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ConfigQuestionArea@1000 : Record 8611);
    VAR
      ConfigQuestion@1001 : Record 8612;
      DocumentElement@1103 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      QuestionAreaNode@1102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      QuestionNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RecRef@1012 : RecordRef;
      QuestionRecRef@1002 : RecordRef;
    BEGIN
      DocumentElement := QuestionnaireXML.DocumentElement;
      QuestionAreaNode := QuestionnaireXML.CreateElement(GetElementName(ConfigQuestionArea.Code + 'Questions'));
      DocumentElement.AppendChild(QuestionAreaNode);

      RecRef.GETTABLE(ConfigQuestionArea);
      CreateFieldSubtree(RecRef,QuestionAreaNode);

      ConfigQuestion.SETRANGE("Questionnaire Code",ConfigQuestionArea."Questionnaire Code");
      ConfigQuestion.SETRANGE("Question Area Code",ConfigQuestionArea.Code);
      IF ConfigQuestion.FINDSET THEN
        REPEAT
          QuestionNode := QuestionnaireXML.CreateElement(GetElementName(ConfigQuestion.TABLENAME));
          QuestionAreaNode.AppendChild(QuestionNode);

          QuestionRecRef.GETTABLE(ConfigQuestion);
          CreateFieldSubtree(QuestionRecRef,QuestionNode);
        UNTIL ConfigQuestion.NEXT = 0;
    END;

    PROCEDURE GetElementName@22(NameIn@1000 : Text[250]) : Text[250];
    BEGIN
      NameIn := DELCHR(NameIn,'=','?''`');
      NameIn := DELCHR(CONVERTSTR(NameIn,'<>,./\+-&()%:','             '),'=',' ');
      NameIn := DELCHR(NameIn,'=',' ');
      EXIT(NameIn);
    END;

    PROCEDURE CreateFieldSubtree@6(VAR RecRef@1001 : RecordRef;VAR Node@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      Field@1006 : Record 2000000041;
      FieldRef@1003 : FieldRef;
      FieldNode@1101 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDom@1102 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      i@1002 : Integer;
    BEGIN
      XmlDom := Node.OwnerDocument;
      FOR i := 1 TO RecRef.FIELDCOUNT DO BEGIN
        FieldRef := RecRef.FIELDINDEX(i);
        IF NOT FieldException(RecRef.NUMBER,FieldRef.NUMBER) THEN BEGIN
          FieldNode := XmlDom.CreateElement(GetElementName(FieldRef.NAME));

          IF Field.GET(RecRef.NUMBER,FieldRef.NUMBER) THEN BEGIN
            IF Field.Class = Field.Class::FlowField THEN
              FieldRef.CALCFIELD;
            FieldNode.InnerText := FORMAT(FieldRef.VALUE);

            XMLDOMMgt.AddAttribute(FieldNode,'fieldlength',FORMAT(Field.Len));
          END;
          Node.AppendChild(FieldNode);
        END;
      END;
    END;

    PROCEDURE GetNodeValue@26(VAR RecordNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldNodeName@1001 : Text[250]) : Text[250];
    VAR
      FieldNode@1101 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FieldNode := RecordNode.SelectSingleNode(FieldNodeName);
      EXIT(FieldNode.InnerText);
    END;

    PROCEDURE UpdateInsertQuestionnaireField@18(VAR ConfigQuestionnaire@1011 : Record 8610;RecordNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.OPEN(DATABASE::"Config. Questionnaire");

      ValidateRecordFields(RecRef,RecordNode);

      RecRef.SETTABLE(ConfigQuestionnaire);
    END;

    PROCEDURE UpdateInsertQuestionAreaFields@25(VAR ConfigQuestionArea@1002 : Record 8611;RecordNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(ConfigQuestionArea);

      ValidateRecordFields(RecRef,RecordNode);

      RecRef.SETTABLE(ConfigQuestionArea);
    END;

    PROCEDURE UpdateInsertQuestionFields@27(VAR ConfigQuestion@1011 : Record 8612;RecordNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Field@1001 : Record 2000000041;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(ConfigQuestion);

      ValidateRecordFields(RecRef,RecordNode);

      RecRef.SETTABLE(ConfigQuestion);

      IF Field.GET(ConfigQuestion."Table ID",ConfigQuestion."Field ID") THEN
        ModifyConfigQuestionAnswer(ConfigQuestion,Field);
    END;

    PROCEDURE FieldNodeExists@36(VAR RecordNode@1100 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldNodeName@1001 : Text[250]) : Boolean;
    VAR
      FieldNode@1101 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FieldNode := RecordNode.SelectSingleNode(FieldNodeName);

      IF NOT ISNULL(FieldNode) THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateBook@33();
    BEGIN
      IF ISCLEAR(XlApp) THEN
        IF NOT CREATE(XlApp,TRUE,TRUE) THEN
          ERROR(Text019);

      XlApp.Visible(FALSE);
      XlBook := XlApp.Workbooks.Add(-4167);
    END;

    PROCEDURE GetXLColumnID@14(ColumnNo@1003 : Integer) : Text[10];
    VAR
      ExcelBuf@1000 : Record 370;
    BEGIN
      ExcelBuf.INIT;
      ExcelBuf.VALIDATE("Column No.",ColumnNo);
      EXIT(ExcelBuf.xlColID);
    END;

    PROCEDURE FieldException@11(TableID@1000 : Integer;FieldID@1001 : Integer) : Boolean;
    VAR
      ConfigQuestionArea@1004 : Record 8611;
      ConfigQuestion@1005 : Record 8612;
    BEGIN
      CASE TableID OF
        DATABASE::"Config. Questionnaire":
          EXIT(FALSE);
        DATABASE::"Config. Question Area":
          EXIT(FieldID IN [ConfigQuestionArea.FIELDNO("Questionnaire Code"),
                           ConfigQuestionArea.FIELDNO("Table Name")]);
        DATABASE::"Config. Question":
          EXIT(FieldID IN [ConfigQuestion.FIELDNO("Questionnaire Code"),
                           ConfigQuestion.FIELDNO("Question Area Code"),
                           ConfigQuestion.FIELDNO("Table ID")]);
      END;
    END;

    PROCEDURE SetCalledFromCode@13();
    BEGIN
      CalledFromCode := TRUE;
    END;

    PROCEDURE CloseXlApp@19();
    BEGIN
      CLEAR(XlSheet);
      XlBook.Close(FALSE);
      CLEAR(XlBook);
      XlApp.Quit;
      CLEAR(XlApp);
    END;

    LOCAL PROCEDURE ValidateKeyFields@16(RecRef@1000 : RecordRef;RecordNode@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      KeyRef@1001 : KeyRef;
      FieldRef@1002 : FieldRef;
      KeyFieldCount@1003 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        IF FieldNodeExists(RecordNode,GetElementName(FieldRef.NAME)) THEN
          ConfigValidateMgt.ValidateFieldValue(RecRef,FieldRef,GetNodeValue(RecordNode,GetElementName(FieldRef.NAME)),FALSE);
      END;
    END;

    LOCAL PROCEDURE ValidateFields@20(RecRef@1000 : RecordRef;RecordNode@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Field@1001 : Record 2000000041;
      FieldRef@1002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      IF Field.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(Field."No.");
          IF FieldNodeExists(RecordNode,GetElementName(FieldRef.NAME)) THEN
            ConfigValidateMgt.ValidateFieldValue(RecRef,FieldRef,GetNodeValue(RecordNode,GetElementName(FieldRef.NAME)),FALSE)
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE ValidateRecordFields@21(RecRef@1000 : RecordRef;RecordNode@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      RecRef1@1001 : RecordRef;
    BEGIN
      ValidateKeyFields(RecRef,RecordNode);

      RecRef1 := RecRef.DUPLICATE;
      IF NOT RecRef1.FIND THEN
        RecRef.INSERT(TRUE);

      ValidateFields(RecRef,RecordNode);

      RecRef.MODIFY(TRUE);
    END;

    PROCEDURE ModifyConfigQuestionAnswer@23(VAR ConfigQuestion@1000 : Record 8612;Field@1001 : Record 2000000041);
    VAR
      DateFormula@1003 : DateFormula;
      OptionInt@1002 : Integer;
    BEGIN
      CASE Field.Type OF
        Field.Type::Option,
        Field.Type::Boolean:
          BEGIN
            IF ConfigQuestion.Answer <> '' THEN BEGIN
              OptionInt := ConfigValidateMgt.GetOptionNo(ConfigQuestion.Answer,ConfigQuestion."Answer Option");
              ConfigQuestion."Answer Option" :=
                BuildAnswerOption(ConfigQuestion."Table ID",ConfigQuestion."Field ID");
              IF OptionInt <> -1 THEN
                ConfigQuestion.Answer := SELECTSTR(OptionInt + 1,ConfigQuestion."Answer Option");
            END ELSE BEGIN
              ConfigQuestion.Answer := '';
              ConfigQuestion."Answer Option" :=
                BuildAnswerOption(ConfigQuestion."Table ID",ConfigQuestion."Field ID");
            END;
            ConfigQuestion.MODIFY;
          END;
        Field.Type::DateFormula:
          BEGIN
            EVALUATE(DateFormula,ConfigQuestion.Answer);
            ConfigQuestion.Answer := FORMAT(DateFormula);
            ConfigQuestion.MODIFY;
          END;
      END;
    END;

    BEGIN
    END.
  }
}

