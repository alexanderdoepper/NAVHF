OBJECT Table 1109 Cost Budget Entry
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Entry No." = 0 THEN
                 "Entry No." := GetNextEntryNo;
               CheckEntries;
               "Last Modified By User" := USERID;

               HandleCostBudgetRegister;
             END;

    OnModify=VAR
               CostBudgetEntry@1000 : Record 1109;
             BEGIN
               CheckEntries;
               CostBudgetEntry.GET("Entry No.");
               IF Amount <> CostBudgetEntry.Amount THEN
                 CostAccMgt.UpdateCostBudgetRegister(CurrRegNo,"Entry No.",Amount - CostBudgetEntry.Amount);
               Modified;
             END;

    CaptionML=[ENU=Cost Budget Entry;
               ESP=Movimiento presupuesto costes;
               DEA=Kostenbudgetposten];
    LookupPageID=Page1115;
    DrillDownPageID=Page1115;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=N§ mov.;
                                                              DEA=Lfd. Nr.];
                                                   Editable=No }
    { 2   ;   ;Budget Name         ;Code10        ;TableRelation="Cost Budget Name";
                                                   CaptionML=[ENU=Budget Name;
                                                              ESP=Nombre ppto.;
                                                              DEA=Budgetname] }
    { 3   ;   ;Cost Type No.       ;Code20        ;TableRelation="Cost Type";
                                                   CaptionML=[ENU=Cost Type No.;
                                                              ESP=N§ tipo coste;
                                                              DEA=Kostenartnr.] }
    { 4   ;   ;Date                ;Date          ;CaptionML=[ENU=Date;
                                                              ESP=Fecha;
                                                              DEA=Datum];
                                                   ClosingDates=Yes }
    { 5   ;   ;Cost Center Code    ;Code20        ;TableRelation="Cost Center";
                                                   CaptionML=[ENU=Cost Center Code;
                                                              ESP=C¢digo centro coste;
                                                              DEA=Kostenstellencode] }
    { 6   ;   ;Cost Object Code    ;Code20        ;TableRelation="Cost Object";
                                                   CaptionML=[ENU=Cost Object Code;
                                                              ESP=C¢digo objeto coste;
                                                              DEA=Kostentr„gercode] }
    { 7   ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ESP=Importe;
                                                              DEA=Betrag] }
    { 9   ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 20  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento;
                                                              DEA=Belegnr.] }
    { 30  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen;
                                                              DEA=Herkunftscode] }
    { 31  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESP=Asiento autom tico;
                                                              DEA=Systembuchung];
                                                   Editable=No }
    { 32  ;   ;Allocated           ;Boolean       ;CaptionML=[ENU=Allocated;
                                                              ESP=Asignado;
                                                              DEA=Zugeordnet] }
    { 33  ;   ;Allocated with Journal No.;Integer ;CaptionML=[ENU=Allocated with Journal No.;
                                                              ESP=Asignado con n§ diario;
                                                              DEA=Zugeordnet mit Buch.-Blattnr.] }
    { 40  ;   ;Last Modified By User;Code50       ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Last Modified By User");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modified By User;
                                                              ESP=élt. modificaci¢n por usuario;
                                                              DEA=Zuletzt ge„ndert von Benutzer];
                                                   Editable=No }
    { 42  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESP=Fecha £lt. modificaci¢n;
                                                              DEA=Korrigiert am];
                                                   Editable=No }
    { 50  ;   ;Allocation Description;Text80      ;CaptionML=[ENU=Allocation Description;
                                                              ESP=Descripci¢n asignaci¢n;
                                                              DEA=Verteilungsbeschreibung] }
    { 51  ;   ;Allocation ID       ;Code10        ;TableRelation="Cost Allocation Source";
                                                   CaptionML=[ENU=Allocation ID;
                                                              ESP=Id. asignaci¢n;
                                                              DEA=Verteilungs-ID] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Budget Name,Cost Type No.,Date          ;SumIndexFields=Amount }
    {    ;Budget Name,Cost Type No.,Cost Center Code,Cost Object Code,Date;
                                                   SumIndexFields=Amount }
    {    ;Budget Name,Cost Center Code,Cost Type No.,Allocated,Date;
                                                   SumIndexFields=Amount }
    {    ;Budget Name,Cost Object Code,Cost Type No.,Allocated,Date;
                                                   SumIndexFields=Amount }
    {    ;Budget Name,Allocation ID,Date           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CostAccMgt@1000 : Codeunit 1100;
      CurrRegNo@1001 : Integer;
      Text000@1002 : TextConst 'ENU=This function must be started with a budget name.;ESP=Esta funci¢n debe iniciarse con un nombre ppto.;DEA=Diese Funktion muss mit einem Budgetnamen gestartet werden.';

      Text001@1003 : TextConst
        'ENU=The entries in budget %1 will be compressed. Entries with identical cost type, cost center, cost object, and date will be combined.\\The first entry of each group remains unchanged. The amounts from all subsequent entries will be added to the first entry.\\Additional information such as text and allocation on other entries will be deleted.\\Are you sure that you want to continue?',
        'ESP=Los movimientos del presupuesto %1 se comprimir n. Se combinar n los movimientos que tengan el mismo tipo de coste, centro de coste, objeto de coste y fecha.\\El primer movimiento de cada grupo permanece intacto. Los importes del resto de movimientos se agregar n al primero.\\Se eliminar  la informaci¢n adicional, como la informaci¢n de texto y asignaci¢n del resto de los movimientos.\\¨Est  seguro de que desea continuar?',
        'DEA=Die Posten im Budget ''%1'' werden komprimiert. Posten, bei denen Kostenart, Kostenstelle, Kostentr„ger und Datum identisch sind, werden kombiniert.\\Der erste Posten der einzelnen Gruppen bleibt unver„ndert. Die Betr„ge aller nachfolgenden Posten werden zum ersten Posten addiert.\\Zus„tzliche Informationen wie Text und Verteilung auf andere Posten werden gel”scht.\\M”chten Sie den Vorgang wirklich fortsetzen?';
      Text002@1004 : TextConst 'ENU=Compress budget entries\Entry       #1#######\Processed   #2#######\Compressed  #3#######;ESP=Comprimir movs. ppto\Movimiento       #1#######\Procesados   #2#######\Comprimidos  #3#######;DEA=Budgetposten komprimieren\Posten        #1#######\Verarbeitet   #2#######\Komprimiert   #3#######';
      Text003@1005 : TextConst 'ENU=%1 entries in budget %2 processed. %3 entries compressed.;ESP=Se han procesado %1 movimientos del presupuesto %2. Se han comprimido %3 movimientos.;DEA=%1 Posten im Budget %2 wurden verarbeitet. %3 Posten wurden komprimiert.';
      Text004@1006 : TextConst 'ENU=A cost center or cost object is missing. Define a corresponding filter in the Budget window.;ESP=Falta el centro de coste o el objeto de coste. Defina un filtro correspondiente en la ventana Presupuesto.;DEA=Es wurde keine Kostenstelle oder kein Kostentr„ger angegeben. Definieren Sie im Fenster ''Budget'' einen entsprechenden Filter.';
      Text005@1007 : TextConst 'ENU=You cannot define both cost center and cost object.;ESP=No se puede definir el centro de coste y el objeto de coste.;DEA=Kostenstelle und Kostentr„ger k”nnen nicht gemeinsam angegeben werden.';

    PROCEDURE CompressBudgetEntries@1(BudName@1000 : Code[20]);
    VAR
      CostBudgetEntrySource@1001 : Record 1109;
      CostBudgetEntryTarget@1002 : Record 1109;
      Window@1003 : Dialog;
      NoProcessed@1004 : Integer;
      QtyPerGrp@1005 : Integer;
      NoCompressed@1006 : Integer;
    BEGIN
      IF BudName = '' THEN
        ERROR(Text000);

      IF NOT CONFIRM(Text001,TRUE,BudName) THEN
        ERROR('');

      CostBudgetEntrySource.SETCURRENTKEY("Budget Name","Cost Type No.","Cost Center Code","Cost Object Code",Date);
      CostBudgetEntrySource.SETRANGE("Budget Name",BudName);

      Window.OPEN(Text002);

      Window.UPDATE(1,COUNT);

      IF CostBudgetEntrySource.FIND('-') THEN
        REPEAT
          IF (CostBudgetEntrySource."Cost Type No." = CostBudgetEntryTarget."Cost Type No.") AND
             (CostBudgetEntrySource."Cost Center Code" = CostBudgetEntryTarget."Cost Center Code") AND
             (CostBudgetEntrySource."Cost Object Code" = CostBudgetEntryTarget."Cost Object Code") AND
             (CostBudgetEntrySource.Date = CostBudgetEntryTarget.Date)
          THEN BEGIN
            CostBudgetEntryTarget.Amount := CostBudgetEntryTarget.Amount + CostBudgetEntrySource.Amount;
            CostBudgetEntrySource.DELETE;
            NoCompressed := NoCompressed + 1;
            QtyPerGrp := QtyPerGrp + 1;
          END ELSE BEGIN
            // Write total
            IF QtyPerGrp > 1 THEN BEGIN
              IF CostBudgetEntryTarget.Amount = 0 THEN
                CostBudgetEntryTarget.DELETE
              ELSE
                CostBudgetEntryTarget.MODIFY;
              QtyPerGrp := 0;
            END;

            // Save new rec.
            CostBudgetEntryTarget := CostBudgetEntrySource;
            QtyPerGrp := QtyPerGrp + 1;
          END;

          NoProcessed := NoProcessed + 1;
          IF (NoProcessed < 50) OR ((NoProcessed MOD 100) = 0) THEN BEGIN
            Window.UPDATE(2,NoProcessed);
            Window.UPDATE(3,NoCompressed);
          END;

        UNTIL CostBudgetEntrySource.NEXT = 0;

      IF CostBudgetEntryTarget.Amount <> 0 THEN
        CostBudgetEntryTarget.MODIFY;

      Window.CLOSE;
      MESSAGE(Text003,NoProcessed,BudName,NoCompressed);
    END;

    PROCEDURE CheckEntries@2();
    BEGIN
      TESTFIELD(Date);
      TESTFIELD("Budget Name");
      TESTFIELD("Cost Type No.");

      IF ("Cost Center Code" = '') AND ("Cost Object Code" = '') THEN
        ERROR(Text004);

      IF ("Cost Center Code" <> '') AND ("Cost Object Code" <> '') THEN
        ERROR(Text005);
    END;

    LOCAL PROCEDURE GetNextEntryNo@3() : Integer;
    VAR
      CostBudgetEntry@1000 : Record 1109;
    BEGIN
      CostBudgetEntry.SETCURRENTKEY("Entry No.");
      IF CostBudgetEntry.FINDLAST THEN
        EXIT(CostBudgetEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE Modified@4();
    BEGIN
      "Last Modified By User" := USERID;
      "Last Date Modified" := TODAY;
    END;

    LOCAL PROCEDURE HandleCostBudgetRegister@5();
    VAR
      CostBudgetReg@1000 : Record 1111;
    BEGIN
      IF CostBudgetReg.GET(CurrRegNo) THEN;
      IF (CurrRegNo = 0) OR (CostBudgetReg."To Cost Budget Entry No." <> "Entry No." - 1) THEN
        CurrRegNo := CostAccMgt.InsertCostBudgetRegister("Entry No.","Budget Name",Amount)
      ELSE
        CostAccMgt.UpdateCostBudgetRegister(CurrRegNo,"Entry No.",Amount);
    END;

    PROCEDURE SetCostBudgetRegNo@7(RegNo@1000 : Integer);
    BEGIN
      CurrRegNo := RegNo;
    END;

    PROCEDURE GetCostBudgetRegNo@6() : Integer;
    BEGIN
      EXIT(CurrRegNo);
    END;

    PROCEDURE GetFirstCostType@11(CostTypeFilter@1000 : Text[250]) : Text[20];
    VAR
      CostType@1001 : Record 1103;
    BEGIN
      CostType.SETFILTER("No.",CostTypeFilter);
      IF CostType.FINDFIRST THEN
        EXIT(CostType."No.");
      EXIT('')
    END;

    PROCEDURE GetFirstDate@10(DateFilter@1000 : Text[250]) : Date;
    VAR
      Period@1001 : Record 2000000007;
      HiddenDate@1002 : Date;
    BEGIN
      FILTERGROUP := 26;
      IF GETFILTER(Date) <> '' THEN BEGIN
        DateFilter := GETFILTER(Date);
        FILTERGROUP := 0;
        EVALUATE(HiddenDate,COPYSTR(DateFilter,STRPOS(DateFilter,'..') + 2,STRPOS(DateFilter,'|') - (STRPOS(DateFilter,'..') + 2)));
        EXIT(HiddenDate);
      END;
      FILTERGROUP := 0;
      IF DateFilter = '' THEN
        EXIT(WORKDATE);

      Period.SETRANGE("Period Type",Period."Period Type"::Date);
      Period.SETFILTER("Period Start",DateFilter);
      IF Period.FINDFIRST THEN
        EXIT(Period."Period Start");
      EXIT(0D)
    END;

    PROCEDURE GetFirstCostCenter@9(CostCenterFilter@1000 : Text[250]) : Code[20];
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      CostCenter.SETFILTER(Code,CostCenterFilter);
      IF CostCenter.FINDFIRST THEN
        EXIT(CostCenter.Code);
      EXIT('')
    END;

    PROCEDURE GetFirstCostObject@8(CostObjectFilter@1000 : Text[250]) : Code[20];
    VAR
      CostObject@1001 : Record 1113;
    BEGIN
      CostObject.SETFILTER(Code,CostObjectFilter);
      IF CostObject.FINDFIRST THEN
        EXIT(CostObject.Code);
      EXIT('')
    END;

    BEGIN
    END.
  }
}

