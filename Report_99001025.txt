OBJECT Report 99001025 Refresh Production Order
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    TransactionType=Update;
    CaptionML=[ENU=Refresh Production Order;
               ESP=Actualizar orden producci¢n;
               DEA=FA berechnen];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Direction := Direction::Backward;
                 END;

  }
  DATASET
  {
    { 4824;    ;DataItem;                    ;
               DataItemTable=Table5405;
               DataItemTableView=SORTING(Status,No.);
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text000 +
                                 Text001 +
                                 Text002);
                             END;

               OnAfterGetRecord=VAR
                                  Item@1004 : Record 27;
                                  ProdOrderLine@1000 : Record 5406;
                                  ProdOrderRtngLine@1001 : Record 5409;
                                  ProdOrderComp@1002 : Record 5407;
                                  Family@1005 : Record 99000773;
                                  ProdOrder@1008 : Record 5405;
                                  ProdOrderStatusMgt@1003 : Codeunit 5407;
                                  RoutingNo@1006 : Code[20];
                                  ErrorOccured@1007 : Boolean;
                                BEGIN
                                  IF Status = Status::Finished THEN
                                    CurrReport.SKIP;
                                  IF Direction = Direction::Backward THEN
                                    TESTFIELD("Due Date");

                                  Window.UPDATE(1,Status);
                                  Window.UPDATE(2,"No.");

                                  RoutingNo := "Routing No.";
                                  CASE "Source Type" OF
                                    "Source Type"::Item:
                                      IF Item.GET("Source No.") THEN
                                        RoutingNo := Item."Routing No.";
                                    "Source Type"::Family:
                                      IF Family.GET("Source No.") THEN
                                        RoutingNo := Family."Routing No.";
                                  END;
                                  IF RoutingNo <> "Routing No." THEN BEGIN
                                    "Routing No." := RoutingNo;
                                    MODIFY;
                                  END;

                                  ProdOrderLine.LOCKTABLE;

                                  CheckReservationExist;

                                  IF CalcLines THEN BEGIN
                                    IF NOT CreateProdOrderLines.Copy("Production Order",Direction,'') THEN
                                      ErrorOccured := TRUE;
                                  END ELSE BEGIN
                                    ProdOrderLine.SETRANGE(Status,Status);
                                    ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                    IF CalcRoutings OR CalcComponents THEN BEGIN
                                      IF ProdOrderLine.FIND('-') THEN
                                        REPEAT
                                          IF CalcRoutings THEN BEGIN
                                            ProdOrderRtngLine.SETRANGE(Status,Status);
                                            ProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
                                            ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
                                            ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
                                            IF ProdOrderRtngLine.FINDSET(TRUE) THEN
                                              REPEAT
                                                ProdOrderRtngLine.SetSkipUpdateOfCompBinCodes(TRUE);
                                                ProdOrderRtngLine.DELETE(TRUE);
                                              UNTIL ProdOrderRtngLine.NEXT = 0;
                                          END;
                                          IF CalcComponents THEN BEGIN
                                            ProdOrderComp.SETRANGE(Status,Status);
                                            ProdOrderComp.SETRANGE("Prod. Order No.","No.");
                                            ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                                            ProdOrderComp.DELETEALL(TRUE);
                                          END;
                                        UNTIL ProdOrderLine.NEXT = 0;
                                      IF ProdOrderLine.FIND('-') THEN
                                        REPEAT
                                          IF CalcComponents THEN
                                            CheckProductionBOMStatus(ProdOrderLine."Production BOM No.",ProdOrderLine."Production BOM Version Code");
                                          IF CalcRoutings THEN
                                            CheckRoutingStatus(ProdOrderLine."Routing No.",ProdOrderLine."Routing Version Code");
                                          ProdOrderLine."Due Date" := "Due Date";
                                          IF NOT CalcProdOrder.Calculate(ProdOrderLine,Direction,CalcRoutings,CalcComponents,FALSE) THEN
                                            ErrorOccured := TRUE;
                                        UNTIL ProdOrderLine.NEXT = 0;
                                    END;
                                  END;
                                  IF (Direction = Direction::Backward) AND
                                     ("Source Type" = "Source Type"::Family)
                                  THEN BEGIN
                                    SetUpdateEndDate;
                                    VALIDATE("Due Date","Due Date");
                                  END;

                                  IF Status = Status::Released THEN BEGIN
                                    ProdOrderStatusMgt.FlushProdOrder("Production Order",Status,WORKDATE);
                                    WhseProdRelease.Release("Production Order");
                                    IF CreateInbRqst THEN
                                      WhseOutputProdRelease.Release("Production Order");
                                  END;

                                  IF ErrorOccured THEN
                                    MESSAGE(Text005,ProdOrder.TABLECAPTION,ProdOrderLine.FIELDCAPTION("Bin Code"));
                                END;

               ReqFilterFields=Status,No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               CalcLines := TRUE;
               CalcRoutings := TRUE;
               CalcComponents := TRUE;
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones;
                             DEA=Optionen] }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Scheduling direction;
                             ESP=Direcci¢n programaci¢n;
                             DEA=Planungsrichtung];
                  OptionCaptionML=[ENU=Forward,Back;
                                   ESP=Adelante,Atr†s;
                                   DEA=VorwÑrts,ZurÅck];
                  SourceExpr=Direction }

      { 3   ;2   ;Group     ;
                  CaptionML=[ENU=Calculate;
                             ESP=Calcular;
                             DEA=Berechnen] }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Lines;
                             ESP=L°neas;
                             DEA=Zeilen];
                  SourceExpr=CalcLines;
                  OnValidate=BEGIN
                               IF CalcLines THEN BEGIN
                                 CalcRoutings := TRUE;
                                 CalcComponents := TRUE;
                               END;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  CaptionML=[ENU=Routings;
                             ESP=Rutas;
                             DEA=ArbeitsplÑne];
                  SourceExpr=CalcRoutings;
                  OnValidate=BEGIN
                               IF NOT CalcRoutings THEN
                                 IF CalcLines THEN
                                   ERROR(Text003);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  CaptionML=[ENU=Component Need;
                             ESP=Nec. componente;
                             DEA=Komponentenbedarf];
                  SourceExpr=CalcComponents;
                  OnValidate=BEGIN
                               IF NOT CalcComponents THEN
                                 IF CalcLines THEN
                                   ERROR(Text004);
                             END;
                              }

      { 2   ;2   ;Group     ;
                  CaptionML=[ENU=Warehouse;
                             ESP=AlmacÇn;
                             DEA=Lager] }

      { 18  ;3   ;Field     ;
                  CaptionML=[ENU=Create Inbound Request;
                             ESP=Crear petici¢n de entrada;
                             DEA=Lagereinlag.-Anford. erstellen];
                  SourceExpr=CreateInbRqst }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Refreshing Production Orders...\\;ESP=Actualizando ¢rds. producci¢n...\\;DEA=FertigungsauftrÑge berechnen...\\';
      Text001@1001 : TextConst 'ENU=Status         #1##########\;ESP=Estado         #1##########\;DEA=Status         #1##########\';
      Text002@1002 : TextConst 'ENU=No.            #2##########;ESP=Nß             #2##########;DEA=Nr.            #2##########';
      Text003@1003 : TextConst 'ENU=Routings must be calculated, when lines are calculated.;ESP=Cuando las l°neas se calculan, se deben calcular las rutas.;DEA=ArbeitspÑne mÅssen berechnet werden, wenn die Zeilen berechnet werden.';
      Text004@1004 : TextConst 'ENU=Component Need must be calculated, when lines are calculated.;ESP=Necesidades de componentes deben calcularse cuando se cal. las l°n.;DEA=Komponentenbedarf muss berechnet werden, wenn Zeilen berechnet werden.';
      CalcProdOrder@1005 : Codeunit 99000773;
      CreateProdOrderLines@1006 : Codeunit 99000787;
      WhseProdRelease@1007 : Codeunit 5774;
      WhseOutputProdRelease@1015 : Codeunit 7325;
      Window@1008 : Dialog;
      Direction@1009 : 'Forward,Backward';
      CalcLines@1010 : Boolean;
      CalcRoutings@1011 : Boolean;
      CalcComponents@1012 : Boolean;
      CreateInbRqst@1013 : Boolean;
      Text005@1014 : TextConst 'ENU=One or more of the lines on this %1 require special warehouse handling. The %2 for these lines has been set to blank.;ESP=Una o m†s de las l°neas de este %1 requieren manipulaci¢n de almacÇn especial. El %2 para estas l°neas se ha establecido en blanco.;DEA=Mindestens eine der Zeilen im aktuellen Element vom Typ ''%1'' erfordert einen speziellen Lagerdurchlauf. FÅr die entsprechenden Zeilen wurde Folgendes als leer festgelegt: %2.';

    PROCEDURE CheckReservationExist@2();
    VAR
      ProdOrderLine2@1002 : Record 5406;
      ProdOrderComp2@1000 : Record 5407;
      ReservEntry@1003 : Record 337;
    BEGIN
      // Not allowed to refresh if reservations exist
      IF (NOT CalcLines) OR (NOT CalcComponents) THEN
        EXIT;
      ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);

      ProdOrderLine2.SETRANGE(Status,"Production Order".Status);
      ProdOrderLine2.SETRANGE("Prod. Order No.","Production Order"."No.");
      IF ProdOrderLine2.FIND('-') THEN
        REPEAT
          IF CalcLines THEN BEGIN
            ProdOrderLine2.CALCFIELDS("Reserved Qty. (Base)");
            IF ProdOrderLine2."Reserved Qty. (Base)" <> 0 THEN BEGIN
              ReservEntry.SETRANGE("Source ID",ProdOrderLine2."Prod. Order No.");
              ReservEntry.SETRANGE("Source Ref. No.",0);
              ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
              ReservEntry.SETRANGE("Source Subtype",ProdOrderLine2.Status);
              ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderLine2."Line No.");
              IF ReservEntry.FINDFIRST THEN BEGIN
                ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
                IF NOT ((ReservEntry."Source Type" = DATABASE::"Prod. Order Component") AND
                        (ReservEntry."Source ID" = ProdOrderLine2."Prod. Order No.") AND
                        (ReservEntry."Source Subtype" = ProdOrderLine2.Status))
                THEN
                  ProdOrderLine2.TESTFIELD("Reserved Qty. (Base)",0);
              END;
            END;
          END;

          IF CalcLines OR CalcComponents THEN BEGIN
            ProdOrderComp2.SETRANGE(Status,ProdOrderLine2.Status);
            ProdOrderComp2.SETRANGE("Prod. Order No.",ProdOrderLine2."Prod. Order No.");
            ProdOrderComp2.SETRANGE("Prod. Order Line No.",ProdOrderLine2."Line No.");
            IF ProdOrderComp2.FIND('-') THEN
              REPEAT
                ProdOrderComp2.CALCFIELDS("Reserved Qty. (Base)");
                IF ProdOrderComp2."Reserved Qty. (Base)" <> 0 THEN BEGIN
                  ReservEntry.SETRANGE("Source ID",ProdOrderComp2."Prod. Order No.");
                  ReservEntry.SETRANGE("Source Ref. No.",ProdOrderComp2."Line No.");
                  ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                  ReservEntry.SETRANGE("Source Subtype",ProdOrderComp2.Status);
                  ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderComp2."Prod. Order Line No.");
                  IF ReservEntry.FINDFIRST THEN BEGIN
                    ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
                    IF NOT ((ReservEntry."Source Type" = DATABASE::"Prod. Order Line") AND
                            (ReservEntry."Source ID" = ProdOrderComp2."Prod. Order No.") AND
                            (ReservEntry."Source Subtype" = ProdOrderComp2.Status))
                    THEN
                      ProdOrderComp2.TESTFIELD("Reserved Qty. (Base)",0);
                  END;
                END;
              UNTIL ProdOrderComp2.NEXT = 0;
          END;
        UNTIL ProdOrderLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckProductionBOMStatus@1(ProdBOMNo@1000 : Code[20];ProdBOMVersionNo@1001 : Code[20]);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMVersion@1002 : Record 99000779;
    BEGIN
      IF ProdBOMNo = '' THEN
        EXIT;

      IF ProdBOMVersionNo = '' THEN BEGIN
        ProductionBOMHeader.GET(ProdBOMNo);
        ProductionBOMHeader.TESTFIELD(Status,ProductionBOMHeader.Status::Certified);
      END ELSE BEGIN
        ProductionBOMVersion.GET(ProdBOMNo,ProdBOMVersionNo);
        ProductionBOMVersion.TESTFIELD(Status,ProductionBOMVersion.Status::Certified);
      END;
    END;

    LOCAL PROCEDURE CheckRoutingStatus@3(RoutingNo@1000 : Code[20];RoutingVersionNo@1001 : Code[20]);
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingVersion@1003 : Record 99000786;
    BEGIN
      IF RoutingNo = '' THEN
        EXIT;

      IF RoutingVersionNo = '' THEN BEGIN
        RoutingHeader.GET(RoutingNo);
        RoutingHeader.TESTFIELD(Status,RoutingHeader.Status::Certified);
      END ELSE BEGIN
        RoutingVersion.GET(RoutingNo,RoutingVersionNo);
        RoutingVersion.TESTFIELD(Status,RoutingVersion.Status::Certified);
      END;
    END;

    PROCEDURE InitializeRequest@4(Direction2@1004 : 'Forward,Backward';CalcLines2@1003 : Boolean;CalcRoutings2@1002 : Boolean;CalcComponents2@1001 : Boolean;CreateInbRqst2@1000 : Boolean);
    BEGIN
      Direction := Direction2;
      CalcLines := CalcLines2;
      CalcRoutings := CalcRoutings2;
      CalcComponents := CalcComponents2;
      CreateInbRqst := CreateInbRqst2;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

