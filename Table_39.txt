OBJECT Table 39 Purchase Line
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReservePurchLine.VerifyQuantity(Rec,xRec);

               LOCKTABLE;
               PurchHeader."No." := '';
             END;

    OnModify=BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDSET THEN
                   REPEAT
                     PurchLine2.TESTFIELD(Type,Type);
                     PurchLine2.TESTFIELD("No.","No.");
                   UNTIL PurchLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") THEN
                 ReservePurchLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               PurchCommentLine@1001 : Record 43;
             BEGIN
               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (PurchHeader.Status = PurchHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)"])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReservePurchLine.DeleteLine(Rec);
                 IF "Receipt No." = '' THEN
                   TESTFIELD("Qty. Rcd. Not Invoiced",0);
                 IF "Return Shipment No." = '' THEN
                   TESTFIELD("Return Qty. Shipped Not Invd.",0);

                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 WhseValidateSourceLine.PurchaseLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.",0);

               IF "Sales Order Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
                 SalesOrderLine."Purchase Order No." := '';
                 SalesOrderLine."Purch. Order Line No." := 0;
                 SalesOrderLine.MODIFY;
               END;

               IF "Special Order Sales Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 IF "Document Type" = "Document Type"::Order THEN BEGIN
                   SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.");
                   SalesOrderLine."Special Order Purchase No." := '';
                   SalesOrderLine."Special Order Purch. Line No." := 0;
                   SalesOrderLine.MODIFY;
                 END ELSE BEGIN
                   IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.") THEN
                     BEGIN
                     SalesOrderLine."Special Order Purchase No." := '';
                     SalesOrderLine."Special Order Purch. Line No." := 0;
                     SalesOrderLine.MODIFY;
                   END;
                 END;
               END;

               NonstockItemMgt.DelNonStockPurch(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDFIRST THEN
                   PurchLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               IF "Line No." <> 0 THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETRANGE("Document Type","Document Type");
                 PurchLine2.SETRANGE("Document No.","Document No.");
                 PurchLine2.SETRANGE("Attached to Line No.","Line No.");
                 PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 PurchLine2.DELETEALL(TRUE);
               END;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","Document No.");
               PurchCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchCommentLine.ISEMPTY THEN
                 PurchCommentLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Line;
               ESP=L¡n. compra;
               DEA=Einkaufszeile];
    PasteIsValid=No;
    LookupPageID=Page518;
    DrillDownPageID=Page518;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento;
                                                              DEA=Belegart];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n;
                                                                    DEA=Anfrage,Bestellung,Rechnung,Gutschrift,Rahmenbestellung,Reklamation];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ESP=Compra a-N§ proveedor;
                                                              DEA=Eink. von Kred.-Nr.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento;
                                                              DEA=Belegnr.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea;
                                                              DEA=Zeilennr.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                TestStatusOpen;

                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Special Order Sales No.");
                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF xRec.Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                                                                    IF Quantity <> 0 THEN
                                                                      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec.Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;
                                                                Type := TempPurchLine.Type;
                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                VALIDATE("FA Posting Type");

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo;
                                                              DEA=Art];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                                    ESP=" ,Cuenta,Producto,,Activo fijo,Cargo (Prod.)";
                                                                    DEA=" ,Sachkonto,Artikel,,WG/Anlage,Zu-/Abschlag (Artikel)"];
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(3)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                ICPartner@1000 : Record 413;
                                                                ItemCrossReference@1001 : Record 5717;
                                                                PrepmtMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Sales Order No.");

                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Special Order Sales No.");

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    IF Type = Type::Item THEN
                                                                      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF Type = Type::Item THEN
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;
                                                                Type := TempPurchLine.Type;
                                                                "No." := TempPurchLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN
                                                                  Quantity := TempPurchLine.Quantity;

                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                GetPurchHeader;
                                                                PurchHeader.TESTFIELD("Buy-from Vendor No.");

                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                "Currency Code" := PurchHeader."Currency Code";
                                                                "Expected Receipt Date" := PurchHeader."Expected Receipt Date";
                                                                "Shortcut Dimension 1 Code" := PurchHeader."Shortcut Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := PurchHeader."Shortcut Dimension 2 Code";
                                                                "Location Code" := PurchHeader."Location Code";
                                                                "Transaction Type" := PurchHeader."Transaction Type";
                                                                "Transport Method" := PurchHeader."Transport Method";
                                                                "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
                                                                "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
                                                                "Entry Point" := PurchHeader."Entry Point";
                                                                Area := PurchHeader.Area;
                                                                "Transaction Specification" := PurchHeader."Transaction Specification";
                                                                "Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Tax Liable" := PurchHeader."Tax Liable";
                                                                IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
                                                                  "Prepayment %" := PurchHeader."Prepayment %";
                                                                "Prepayment Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Prepayment Tax Liable" := PurchHeader."Tax Liable";
                                                                "Responsibility Center" := PurchHeader."Responsibility Center";

                                                                "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
                                                                "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
                                                                "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
                                                                "Order Date" := PurchHeader."Order Date";
                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetGLSetup;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Inventory Posting Group");
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");

                                                                      "Posting Group" := Item."Inventory Posting Group";
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Unit Price (LCY)" := Item."Unit Price";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      "Overhead Rate" := Item."Overhead Rate";
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepmtMgt.SetPurchPrepaymentPct(Rec,PurchHeader."Posting Date");

                                                                      IF Item."Price Includes VAT" THEN BEGIN
                                                                        IF NOT VATPostingSetup.GET(
                                                                             Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group")
                                                                        THEN
                                                                          VATPostingSetup.INIT;
                                                                        CASE VATPostingSetup."VAT Calculation Type" OF
                                                                          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                                                                            VATPostingSetup."VAT %" := 0;
                                                                          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                                                                            ERROR(
                                                                              Text002,
                                                                              VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
                                                                              VATPostingSetup."VAT Calculation Type");
                                                                        END;
                                                                        "Unit Price (LCY)" :=
                                                                          ROUND("Unit Price (LCY)" / (1 + VATPostingSetup."VAT %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision");
                                                                      END;

                                                                      IF PurchHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                    END;
                                                                  Type::"3":
                                                                    ERROR(Text003);
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Indirect Cost %" := 0;
                                                                      "Overhead Rate" := 0;
                                                                    END;
                                                                END;

                                                                VALIDATE("Prepayment %");

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  IF Type <> Type::"Fixed Asset" THEN
                                                                    VALIDATE("VAT Prod. Posting Group");
                                                                  Quantity := xRec.Quantity;
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToShip
                                                                    ELSE
                                                                      InitQtyToReceive;
                                                                  END;
                                                                  UpdateWithWarehouseReceive;
                                                                  UpdateDirectUnitCost(FIELDNO("No."));
                                                                  "Job No." := xRec."Job No.";
                                                                  "Job Line Type" := xRec."Job Line Type";
                                                                  IF xRec."Job Task No." <> '' THEN BEGIN
                                                                    VALIDATE("Job Task No.",xRec."Job Task No.");
                                                                    IF "No." = xRec."No." THEN
                                                                      VALIDATE("Job Planning Line No.",xRec."Job Planning Line No.");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);

                                                                GetDefaultBin;

                                                                PurchHeader.GET("Document Type","Document No.");
                                                                IF PurchHeader."Send IC Document" THEN
                                                                  CASE Type OF
                                                                    Type::" ",Type::"Charge (Item)":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := "No.";
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
                                                                      END;
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ICPartner.GET(PurchHeader."Buy-from IC Partner Code");
                                                                        CASE ICPartner."Outbound Purch. Item No. Type" OF
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Common Item No.":
                                                                            VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Internal No.":
                                                                            BEGIN
                                                                              "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                                                                              "IC Partner Reference" := "No.";
                                                                            END;
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Cross Reference":
                                                                            BEGIN
                                                                              VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type",
                                                                                ItemCrossReference."Cross-Reference Type"::Vendor);
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type No.",
                                                                                "Buy-from Vendor No.");
                                                                              ItemCrossReference.SETRANGE("Item No.","No.");
                                                                              IF ItemCrossReference.FINDFIRST THEN
                                                                                "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                                                                            END;
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Vendor Item No.":
                                                                            BEGIN
                                                                              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Vendor Item No.";
                                                                              "IC Partner Reference" := "Vendor Item No.";
                                                                            END;
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
                                                                        "IC Partner Reference" := '';
                                                                      END;
                                                                  END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§;
                                                              DEA=Nr.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF "Prepmt. Amt. Inv." <> 0 THEN
                                                                    IF NOT CONFIRM(Text046,FALSE,FIELDCAPTION("Direct Unit Cost"),FIELDCAPTION("Location Code")) THEN BEGIN
                                                                      "Location Code" := xRec."Location Code";
                                                                      EXIT;
                                                                    END;
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Special Order Sales No.");

                                                                IF "Location Code" <> xRec."Location Code" THEN
                                                                  InitItemAppl;

                                                                IF (xRec."Location Code" <> "Location Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  UpdateWithWarehouseReceive;
                                                                END;
                                                                "Bin Code" := '';

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Location Code"));

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                GetDefaultBin;
                                                                CheckWMS;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn;
                                                              DEA=Lagerortcode] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ESP=Grupo contable;
                                                              DEA=Buchungsgruppe];
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);

                                                                CheckReservationDateConflict(FIELDNO("Expected Receipt Date"));
                                                                IF "Expected Receipt Date" <> 0D THEN
                                                                  VALIDATE(
                                                                    "Planned Receipt Date",
                                                                    CalendarMgmt.CalcDateBOC2(InternalLeadTimeDays("Expected Receipt Date"),"Expected Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',TRUE))
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Expected Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ESP=Fecha recepci¢n esperada;
                                                              DEA=Erwartetes Wareneingangsdatum] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n;
                                                              DEA=Beschreibung] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2;
                                                              DEA=Beschreibung 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ESP=Unidad medida;
                                                              DEA=Einheit] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Drop Shipment" AND ("Document Type" <> "Document Type"::Invoice) THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Quantity),"Sales Order No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Shipped")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Shipped (Base)")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Received")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Quantity Received")));
                                                                  IF ("Quantity (Base)" * "Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Received (Base)")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Qty. Received (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text011,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                IF "Receipt No." <> '' THEN
                                                                  CheckReceiptRelation
                                                                ELSE
                                                                  IF "Return Shipment No." <> '' THEN
                                                                    CheckRetShptRelation;

                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") OR
                                                                   ("No." = xRec."No.")
                                                                THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToShip
                                                                  ELSE
                                                                    InitQtyToReceive;
                                                                END;
                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl;

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO(Quantity))
                                                                ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  ReservePurchLine.VerifyQuantity(Rec,xRec);
                                                                  UpdateWithWarehouseReceive;
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  CheckApplToItemLedgEntry;
                                                                END;

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Invoice) AND ("Prepayment %" <> 0) THEN
                                                                  UpdatePrePaymentAmounts;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                CheckWMS;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad;
                                                              DEA=Menge];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ESP=Cantidad pendiente;
                                                              DEA=Restbestellungsmenge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice)) THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase)) THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ESP=Cdad. a facturar;
                                                              DEA=Menge akt. Rechnung];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Qty. to Receive" = Quantity - "Quantity Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Qty. to Receive" * Quantity < 0) OR
                                                                   (ABS("Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Quantity");
                                                                IF ("Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text009,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Receive" < 0) THEN
                                                                  CheckApplToItemLedgEntry;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ESP=Cantidad a recibir;
                                                              DEA=Menge akt. Lieferung];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ESP=Coste unit. directo;
                                                              DEA=EK-Preis];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Direct Unit Cost")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("No.");
                                                                TESTFIELD(Quantity);

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text99000000,
                                                                    FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF CurrFieldNo = FIELDNO("Unit Cost (LCY)") THEN
                                                                  IF Type = Type::Item THEN BEGIN
                                                                    GetItem;
                                                                    IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                      ERROR(
                                                                        Text010,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  END;

                                                                UnitCostCurrency := "Unit Cost (LCY)";
                                                                GetPurchHeader;
                                                                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                                                                  PurchHeader.TESTFIELD("Currency Factor");
                                                                  GetGLSetup;
                                                                  UnitCostCurrency :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,"Currency Code",
                                                                        "Unit Cost (LCY)",PurchHeader."Currency Factor"),
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF ("Direct Unit Cost" <> 0) AND
                                                                   ("Direct Unit Cost" <> ("Line Discount Amount" / Quantity))
                                                                THEN
                                                                  "Indirect Cost %" :=
                                                                    ROUND(
                                                                      (UnitCostCurrency - "Direct Unit Cost" + "Line Discount Amount" / Quantity) /
                                                                      ("Direct Unit Cost" - "Line Discount Amount" / Quantity) * 100,0.00001)
                                                                ELSE
                                                                  "Indirect Cost %" := 0;

                                                                UpdateSalesCost;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ESP=Coste unitario (DL);
                                                              DEA=Einstandspreis (MW)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ESP=% IVA;
                                                              DEA=MwSt. %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetPurchHeader;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,
                                                                    Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ESP=% Descuento l¡nea;
                                                              DEA=Zeilenrabatt %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  IF ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") <> 0 THEN
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                        "Line Discount Amount" /
                                                                        ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                  ELSE
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ESP=Importe dto. l¡nea;
                                                              DEA=Zeilenrabattbetrag];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text011,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := Amount;
                                                                      IF "Use Tax" THEN
                                                                        "Amount Including VAT" := "VAT Base Amount"
                                                                      ELSE BEGIN
                                                                        "Amount Including VAT" :=
                                                                          Amount +
                                                                          ROUND(
                                                                            SalesTaxCalculate.CalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "VAT Base Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe;
                                                              DEA=Betrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      IF "Use Tax" THEN BEGIN
                                                                        Amount := "Amount Including VAT";
                                                                        "VAT Base Amount" := Amount;
                                                                      END ELSE BEGIN
                                                                        Amount :=
                                                                          ROUND(
                                                                            SalesTaxCalculate.ReverseCalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "Amount Including VAT","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        "VAT Base Amount" := Amount;
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ESP=Importe IVA incl.;
                                                              DEA=Betrag inkl. MwSt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=[ENU=Unit Price (LCY);
                                                              ESP=Precio venta (DL);
                                                              DEA=VK-Preis (MW)];
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                  UpdateUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ESP=Permitir dto. factura;
                                                              DEA=Rech.-Rabatt zulassen] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ESP=Peso bruto;
                                                              DEA=Bruttogewicht];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ESP=Peso neto;
                                                              DEA=Nettogewicht];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ESP=Unidades por lote;
                                                              DEA=Anzahl pro Paket];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ESP=Volumen;
                                                              DEA=Volumen];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN
                                                                  "Location Code" := CheckApplToItemLedgEntry;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry;
                                                            END;

                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ESP=Liq. por n§ orden producto;
                                                              DEA=Ausgleich mit Artikelposten] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1;
                                                              DEA=Shortcutdimensionscode 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2;
                                                              DEA=Shortcutdimensionscode 2];
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=VAR
                                                                Job@1000 : Record 167;
                                                              BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                ReservePurchLine.FilterReservFor(ReservEntry,Rec);
                                                                IF ReservEntry.FINDFIRST THEN
                                                                  TESTFIELD("Job No.",'');

                                                                IF "Job No." <> xRec."Job No." THEN BEGIN
                                                                  VALIDATE("Job Task No.",'');
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                END;

                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  EXIT;
                                                                END;

                                                                IF NOT (Type IN [Type::Item,Type::"G/L Account"]) THEN
                                                                  FIELDERROR("Job No.",STRSUBSTNO(Text012,FIELDCAPTION(Type),Type));
                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto;
                                                              DEA=Projektnr.] }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                TestStatusOpen;

                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Indirect Cost %",0);

                                                                IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
                                                                  GetItem;
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                    ERROR(
                                                                      Text010,
                                                                      FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                END;

                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto;
                                                              DEA=Indirekte Kosten %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");

                                                                "Outstanding Amt. Ex. VAT (LCY)" :=
                                                                  ROUND("Outstanding Amount (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ESP=Importe pendiente;
                                                              DEA=Restbestellbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;CaptionML=[ENU=Qty. Rcd. Not Invoiced;
                                                              ESP=Cantidad recibida no facturada;
                                                              DEA=Lief. nicht fakt. Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Amt. Rcd. Not Invoiced",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND("Amt. Rcd. Not Invoiced",Currency2."Amount Rounding Precision");

                                                                "A. Rcd. Not Inv. Ex. VAT (LCY)" :=
                                                                  ROUND("Amt. Rcd. Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced;
                                                              ESP=Importe recibido no facturado;
                                                              DEA=Nicht fakt. Lieferbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Received   ;Decimal       ;CaptionML=[ENU=Quantity Received;
                                                              ESP=Cantidad recibida;
                                                              DEA=Bereits gelief. Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ESP=Cantidad facturada;
                                                              DEA=Bereits berech. Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Receipt No.         ;Code20        ;CaptionML=[ENU=Receipt No.;
                                                              ESP=N§ albar n compra;
                                                              DEA=Wareneingangsnr.];
                                                   Editable=No }
    { 64  ;   ;Receipt Line No.    ;Integer       ;CaptionML=[ENU=Receipt Line No.;
                                                              ESP=N§ l¡nea albar n compra;
                                                              DEA=Wareneingangszeilennr.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ESP=% Bf§ bruto;
                                                              DEA=DB %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ESP=Pago-a N§ proveedor;
                                                              DEA=Zahlung an Kred.-Nr.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                CalcInvDiscToInvoice;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ESP=Importe dto. factura;
                                                              DEA=Rechnungsrabattbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Vendor Item No.     ;Text20        ;OnValidate=BEGIN
                                                                IF PurchHeader."Send IC Document" AND
                                                                   ("IC Partner Ref. Type" = "IC Partner Ref. Type"::"Vendor Item No.")
                                                                THEN
                                                                  "IC Partner Reference" := "Vendor Item No.";
                                                              END;

                                                   CaptionML=[ENU=Vendor Item No.;
                                                              ESP=C¢d. producto proveedor;
                                                              DEA=Kred.-Artikelnr.] }
    { 71  ;   ;Sales Order No.     ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order No." <> "Sales Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order No.;
                                                              ESP=N§ pedido venta;
                                                              DEA=Verkaufsauftragsnr.];
                                                   Editable=No }
    { 72  ;   ;Sales Order Line No.;Integer       ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Sales Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order Line No." <> "Sales Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order Line No.;
                                                              ESP=N§ l¡nea pedido venta;
                                                              DEA=Verkaufsauftragszeilennr.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                                IF "Drop Shipment" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  EVALUATE("Inbound Whse. Handling Time",'<0D>');
                                                                  VALIDATE("Inbound Whse. Handling Time");
                                                                  InitOutstanding;
                                                                  InitQtyToReceive;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo;
                                                              DEA=Direktlieferung];
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio;
                                                              DEA=Geschftsbuchungsgruppe] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto;
                                                              DEA=Produktbuchungsgruppe] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ESP=Tipo c lculo IVA;
                                                              DEA=MwSt.-Berechnungsart];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta,No sujeto;
                                                                    DEA=Normale MwSt.,Erwerbsbesteuerung,Nur MwSt.,Verkaufssteuer];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n;
                                                              DEA=Art des Geschftes] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte;
                                                              DEA=Verkehrszweig] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                   Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ESP=N§ l¡nea texto adicional;
                                                              DEA=Gehrt zu Zeilennr.];
                                                   Editable=No }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ESP=Puerto/Aerop. descarga;
                                                              DEA=Entladehafen] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia;
                                                              DEA=Bestimmungsregion] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n;
                                                              DEA=Verfahren] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto;
                                                              DEA=Steuergebietscode] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto;
                                                              DEA=Steuerpflichtig] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESP=C¢d. grupo impuesto;
                                                              DEA=Steuergruppencode] }
    { 88  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              ESP=Utilizar impuesto;
                                                              DEA=Verbrauchssteuer] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.;
                                                              DEA=MwSt.-Geschftsbuchungsgruppe] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Purchase VAT Account");
                                                                    END;
                                                                END;
                                                                IF PurchHeader."Prices Including VAT" AND (Type = Type::Item) THEN
                                                                  "Direct Unit Cost" :=
                                                                    ROUND(
                                                                      "Direct Unit Cost" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ESP=Grupo registro IVA prod.;
                                                              DEA=MwSt.-Produktbuchungsgruppe] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              DEA=Whrungscode];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ESP=Importe pendiente (DL);
                                                              DEA=Restbestellbetrag (MW)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced (LCY);
                                                              ESP=Imp. recibido no factur. (DL);
                                                              DEA=Nicht fakt. Lieferbetrag (MW)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(39),
                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada;
                                                              DEA=Reservierte Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Received",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ESP=N§ pedido abierto;
                                                              DEA=Rahmenbestellungsnr.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  PurchLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  PurchLine2.TESTFIELD(Type,Type);
                                                                  PurchLine2.TESTFIELD("No.","No.");
                                                                  PurchLine2.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                                                                  PurchLine2.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ESP=N§ l¡n. pedido abierto;
                                                              DEA=Rahmenbestellungszeilennr.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ESP=Importe base IVA;
                                                              DEA=MwSt.-Bemessungsgrundlage];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario;
                                                              DEA=Einstandspreis];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESP=Asiento autom tico;
                                                              DEA=Systembuchung];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Direct Unit Cost");

                                                                GetPurchHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ESP=Importe l¡nea;
                                                              DEA=Zeilenbetrag];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ESP=Diferencia  IVA;
                                                              DEA=MwSt.-Differenz];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ESP=Importe dto. fact. para facturar;
                                                              DEA=Rech.-Rabattbetrag akt. Rech.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ESP=Identific. IVA;
                                                              DEA=MwSt.-Kennzeichen];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN
                                                                  BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ESP=Tipo referencia socio IC;
                                                              DEA=IC-Partnerref.-Art];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.";
                                                                    ESP=" ,Cuenta,Producto,,,Cargo (prod.),Referencia cruzada,N§ producto com£n,C¢d. producto proveedor";
                                                                    DEA=" ,Sachkonto,Artikel,,,Zu-/Abschlag (Artikel),Referenz,Gemeinsame Artikelnr.,Kred.-Artikelnr."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                              ItemVendorCatalog@1003 : Record 99;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Vendor,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Vendor Item No.":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemVendorCatalog.SETCURRENTKEY("Vendor No.");
                                                                      ItemVendorCatalog.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
                                                                      IF PAGE.RUNMODAL(PAGE::"Vendor Item Catalog",ItemVendorCatalog) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemVendorCatalog."Vendor Item No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ESP=Referencia socio IC;
                                                              DEA=IC-Partnerreferenz] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=VAR
                                                                GenPostingSetup@1001 : Record 252;
                                                                GLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
                                                                  TESTFIELD("Document Type","Document Type"::Order);
                                                                  TESTFIELD("No.");
                                                                  GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
                                                                    GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
                                                                    VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                  END ELSE
                                                                    CLEAR(VATPostingSetup);
                                                                  "Prepayment VAT %" := VATPostingSetup."VAT %";
                                                                  "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
                                                                  "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                  CASE "Prepmt. VAT Calc. Type" OF
                                                                    "VAT Calculation Type"::"Reverse Charge VAT",
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      "Prepayment VAT %" := 0;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      FIELDERROR("Prepmt. VAT Calc. Type",STRSUBSTNO(Text036,"Prepmt. VAT Calc. Type"));
                                                                  END;
                                                                  "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
                                                                END;

                                                                TestStatusOpen;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ESP=% prepago;
                                                              DEA=Vorauszahlung %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text038,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,"Line Amount"));
                                                                IF Quantity <> 0 THEN
                                                                  VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" /
                                                                      ("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity) * 100,0.00001))
                                                                ELSE
                                                                  VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ESP=Importe l¡nea prepago;
                                                              DEA=Vorauszahlungszeilenbetrag];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ESP=Importe prepago facturado;
                                                              DEA=Fakt. Vorauszahlungsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ESP=Importe prepago incl. IVA;
                                                              DEA=Vorauszahlungsbetrag einschl. MwSt];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ESP=Importe prepago;
                                                              DEA=Vorauszahlungsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ESP=Importe base IVA prepago;
                                                              DEA=MwSt.-Bemessungsgrundlage Vorauszahlung];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ESP=% IVA prepago;
                                                              DEA=MwSt % Vorauszahlung];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ESP=Tipo calc. IVA prepago;
                                                              DEA=MwSt.-Berechnungsart Vorauszahlung];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta;
                                                                    DEA=Normale MwSt.,Erwerbsbesteuerung,Nur MwSt.,Verkaufssteuer];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ESP=Identificador IVA prepago;
                                                              DEA=MwSt-Kennzeichen Vorauszahlung];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ESP=C¢d.  rea impuesto prepago;
                                                              DEA=Steuergebietscode Vorauszahlung] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ESP=Sujeto a impuesto prepago;
                                                              DEA=Steuerpflichtige Vorauszahlung] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ESP=C¢d. grupo impuesto prepago;
                                                              DEA=Steuergruppencode Vorauszahlung] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Direct Unit Cost" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Qty. to Invoice" * "Direct Unit Cost"));
                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text038,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                                                                      (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ESP=Importe prepago para descontar;
                                                              DEA=Abzuziehender Vorauszahlungsbetrag];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ESP=Importe prepago descontado;
                                                              DEA=Abgezogener Vorauszahlungsbetrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ESP=L¡nea prepago;
                                                              DEA=Vorauszahlungszeile];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ESP=Importe prepago fact. incl. IVA;
                                                              DEA=Fakt. Vorauszahlungsbetrag einschl. MwSt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ESP=Importe prepago fact. (DL);
                                                              DEA=Fakt. Vorauszahlungsbetrag (MW)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetPurchHeader;
                                                                  PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
                                                                  PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ESP=C¢digo socio IC;
                                                              DEA=IC-Partnercode] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[ENU=Prepmt. VAT Amount Inv. (LCY);
                                                              ESP=Importe IVA prepago fact. (DL);
                                                              DEA=Fakt. MwSt.-Vorauszahlungsbetrag (MW)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ESP=Diferencia IVA prepago;
                                                              DEA=MwSt.-Differenz Vorauszahlung];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ESP=Diferencia IVA prepago a deducir;
                                                              DEA=Abzuziehende MwSt.-Differenz Vorauszahlung];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ESP=Diferencia IVA prepago deducida;
                                                              DEA=Abgezogene MwSt.-Differenz Vorauszahlung];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 140 ;   ;Outstanding Amt. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=Outstanding Amt. Ex. VAT (LCY);
                                                              ESP=Importe pendiente sin IVA (DL);
                                                              DEA=Restauftragsbetrag ohne MwSt. (MW)] }
    { 141 ;   ;A. Rcd. Not Inv. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=A. Rcd. Not Inv. Ex. VAT (LCY);
                                                              ESP=Importe recibido no facturado sin IVA (DL);
                                                              DEA=Nicht fakt. Lieferbetrag ohne MwSt. (MW)] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESP=Id. grupo dimensiones;
                                                              DEA=Dimensionssatz-ID];
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');

                                                                IF "Job Task No." <> xRec."Job Task No." THEN BEGIN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                  IF "Document Type" = "Document Type"::Order THEN
                                                                    TESTFIELD("Quantity Received",0);
                                                                END;

                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  CLEAR(JobJnlLine);
                                                                  "Job Line Type" := "Job Line Type"::" ";
                                                                  UpdatePricesFromJobJnlLine;
                                                                  EXIT;
                                                                END;

                                                                JobSetCurrencyFactor;
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto;
                                                              DEA=Projektaufgabennr.] }
    { 1002;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text048,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   CaptionML=[ENU=Job Line Type;
                                                              ESP=Tipo l¡nea proyecto;
                                                              DEA=Projektzeilenart];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ESP=" ,Previsi¢n,Contrato,Previsi¢n y contrato";
                                                                    DEA=" ,Plan,Vertrag,Plan und Vertrag"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price;
                                                              ESP=Precio venta proyecto;
                                                              DEA=VK-Preis Projekt];
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;CaptionML=[ENU=Job Total Price;
                                                              ESP=Precio total proyecto;
                                                              DEA=Verkaufsbetrag Projekt];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1005;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount;
                                                              ESP=Importe l¡nea proyecto;
                                                              DEA=Zeilenbetrag Projekt];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              ESP=Importe dto. l¡nea proyecto;
                                                              DEA=Zeilenrabattbetrag Projekt];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount %;
                                                              ESP=% dto. l¡nea proyecto;
                                                              DEA=Zeilenrabatt % Projekt];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price (LCY)","Job Unit Price (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price (LCY);
                                                              ESP=Precio venta proyecto (DL);
                                                              DEA=VK-Preis Projekt (MW)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1009;   ;Job Total Price (LCY);Decimal      ;CaptionML=[ENU=Job Total Price (LCY);
                                                              ESP=Precio total proyecto (DL);
                                                              DEA=Verkaufsbetrag Projekt (MW)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              ESP=Importe l¡nea proyecto (DL);
                                                              DEA=Zeilenbetrag Projekt (MW)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ESP=Importe dto. l¡nea proyecto (DL);
                                                              DEA=Zeilenrabattbetrag Projekt (MW)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ESP=Factor divisa proyecto;
                                                              DEA=Whrungsfaktor Projekt];
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=[ENU=Job Currency Code;
                                                              ESP=C¢digo divisa proyecto;
                                                              DEA=Whrungscode Projekt] }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  CASE Type OF
                                                                    Type::"G/L Account":
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                    Type::Item:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
                                                                  END;
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - Quantity);
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              CASE Type OF
                                                                Type::"G/L Account":
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                                Type::Item:
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
                                                              END;
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              ESP=N§ l¡nea planificaci¢n proyecto;
                                                              DEA=Projektplanzeilennr.];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text047,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Job Remaining Qty. (Base)" := CalcBaseQty("Job Remaining Qty.");
                                                              END;

                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              ESP=Cdad. pendiente proyecto;
                                                              DEA=Verbleibend fr Projekt - Menge];
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Job Remaining Qty. (Base);Decimal  ;CaptionML=[ENU=Job Remaining Qty. (Base);
                                                              ESP=Cdad. pendiente proyecto (base);
                                                              DEA=Verbleibend fr Projekt - Menge (Basis)] }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Prod. Order No."),"Sales Order No.");

                                                                AddOnIntegrMgt.ValidateProdOrderOnPurchLine(Rec);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n;
                                                              DEA=FA-Nr.];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Variant Code"),"Sales Order No.");

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Variant Code"));

                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  InitItemAppl;
                                                                END;

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;
                                                                GetDefaultBin;
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              DEA=Variantencode] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                          ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                   Quantity=FILTER(>=0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                         Item No.=FIELD(No.),
                                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                                         ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Bin Code"),"Sales Order No.");

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n;
                                                              DEA=Lagerplatzcode] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida;
                                                              DEA=Menge pro Einheit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Receipt No.",'');
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Unit of Measure Code"),"Sales Order No.");
                                                                IF (xRec."Unit of Measure" <> "Unit of Measure") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",PurchHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);
                                                                IF "Prod. Order No." = '' THEN BEGIN
                                                                  IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
                                                                    GetItem;
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                    "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                    "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                    "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                    IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                      InitItemAppl;
                                                                    UpdateUOMQtyPerStockQty;
                                                                  END ELSE
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 0;

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida;
                                                              DEA=Einheitencode] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateDirectUnitCost(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base);
                                                              DEA=Menge (Basis)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ESP=Cdad. pendiente (base);
                                                              DEA=Restbestellungsmenge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ESP=Cdad. a facturar (base);
                                                              DEA=Menge akt. Rechnung (Basis)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ESP=Cdad. a recibir (base);
                                                              DEA=Menge akt. Lieferung (Basis)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Rcd. Not Invoiced (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Rcd. Not Invoiced (Base);
                                                              ESP=Cdad. recibida no fact. (base);
                                                              DEA=Lief. nicht fakt. Menge(Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ESP=Cdad. recibida (base);
                                                              DEA=Bereits gelief. Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ESP=Cdad. facturada (base);
                                                              DEA=Bereits berech. Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(39),
                                                                                                                Source Subtype=FIELD(Document Type),
                                                                                                                Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base);
                                                              DEA=Reservierte Menge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ESP=A/F Fecha registro;
                                                              DEA=Anlagedatum] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Fixed Asset" THEN BEGIN
                                                                  TESTFIELD("Job No.",'');
                                                                  IF "FA Posting Type" = "FA Posting Type"::" " THEN
                                                                    "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
                                                                  GetFAPostingGroup
                                                                END ELSE BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=FA Posting Type;
                                                              ESP=A/F Tipo registro;
                                                              DEA=Anlagenbuchungsart];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Maintenance";
                                                                    ESP=" ,Coste,Mantenimiento";
                                                                    DEA=" ,Anschaffung,Wartung"];
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ESP=C¢d. libro amortizaci¢n;
                                                              DEA=AfA Buchcode] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              ESP=Valor residual;
                                                              DEA=Restwert];
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ESP=A/F Amort. hasta fecha reg.;
                                                              DEA=AfA bis Anlagedatum] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ESP=Amort. hasta coste;
                                                              DEA=Rckw. AfA-Korr. b. Anschaff.] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=[ENU=Maintenance Code;
                                                              ESP=C¢d. mantenimiento;
                                                              DEA=Wartungscode] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=[ENU=Insurance No.;
                                                              ESP=N§ seguro;
                                                              DEA=Versicherungsnr.] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ESP=A/F N§ pptdo.;
                                                              DEA=Plananlagennr.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ESP=Duplicado en libro amort.;
                                                              DEA=In AfA-Buch kopieren] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   CaptionML=[ENU=Use Duplication List;
                                                              ESP=Utilizar lista duplicados;
                                                              DEA=Kopiervorgang aktivieren] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESP=Centro responsabilidad;
                                                              DEA=Zustndigkeitseinheitencode];
                                                   Editable=No }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupPurchaseItem(Rec,ReturnedCrossRef);
                                                                  VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  SetVendorItemNo;
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");
                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                  UpdateDirectUnitCost(FIELDNO("Cross-Reference No."));
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                IF PurchHeader."Send IC Document" AND (PurchHeader."IC Direction" = PurchHeader."IC Direction"::Outgoing) THEN BEGIN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Cross Reference";
                                                                  "IC Partner Reference" := "Cross-Reference No.";
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ESP=N§ referencia cruzada;
                                                              DEA=Referenznr.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ESP=Unidad de medida (ref.cruz.);
                                                              DEA=Einheit (Referenz)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ESP=Tipo referencia cruzada;
                                                              DEA=Referenzart];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ESP=" ,Cliente,Prov.,C¢d. barra";
                                                                    DEA=" ,Debitor,Kreditor,Barcode"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ESP=N§ tipo referencia cruzada;
                                                              DEA=Referenzartennr.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ESP=C¢d. categor¡a producto;
                                                              DEA=Artikelkategoriencode] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ESP=Prod. sin stock;
                                                              DEA=Katalogartikel] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                END ELSE
                                                                  "Drop Shipment" := FALSE;
                                                                VALIDATE("Drop Shipment","Drop Shipment");
                                                              END;

                                                   CaptionML=[ENU=Purchasing Code;
                                                              ESP=C¢d. compra;
                                                              DEA=Einkaufscode] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ESP=C¢d. grupo producto;
                                                              DEA=Produktgruppencode] }
    { 5713;   ;Special Order       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Special Order" <> "Special Order") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order;
                                                              ESP=Pedido especial;
                                                              DEA=Spezialauftrag] }
    { 5714;   ;Special Order Sales No.;Code20     ;TableRelation=IF (Special Order=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales No." <> "Special Order Sales No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order Sales No.;
                                                              ESP=N§ pedido venta especial;
                                                              DEA=Spezialauftrag-Auftragsnr.] }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Special Order Sales No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales Line No." <> "Special Order Sales Line No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order Sales Line No.;
                                                              ESP=N§ l¡n. ped. venta especial;
                                                              DEA=Spezialauftrag-Verk.-Zeilennr.] }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(39),
                                                                                                                             Source Subtype=FIELD(Document Type),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ESP=Cdad. pdte. almacn (base);
                                                              DEA=Lagerrestbestellmenge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ESP=Recibido completamente;
                                                              DEA=Komplettlieferung (Eingang)];
                                                   Editable=No }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Promised Receipt Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text023,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> 0D THEN
                                                                  VALIDATE("Order Date",
                                                                    CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Requested Receipt Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE))
                                                                ELSE
                                                                  IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                    GetUpdateBasicDates;
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ESP=Fecha recep. solicitada;
                                                              DEA=Gewnschtes Wareneingangsdatum] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Promised Receipt Date" <> 0D THEN
                                                                    VALIDATE("Planned Receipt Date","Promised Receipt Date")
                                                                  ELSE
                                                                    VALIDATE("Requested Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Promised Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ESP=Fecha recep. prometida;
                                                              DEA=Zugesagtes Wareneingangsdatum] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Requested Receipt Date" <> 0D THEN BEGIN
                                                                  VALIDATE("Planned Receipt Date");
                                                                END ELSE
                                                                  GetUpdateBasicDates;
                                                              END;

                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ESP=Plazo entrega (d¡as);
                                                              DEA=Beschaffungszeit] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Promised Receipt Date" <> 0D) OR
                                                                   ("Requested Receipt Date" <> 0D)
                                                                THEN
                                                                  VALIDATE("Planned Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Expected Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. entrada;
                                                              DEA=Eingeh. Lagerdurchlaufzeit] }
    { 5794;   ;Planned Receipt Date;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Receipt Date" <> 0D THEN BEGIN
                                                                  IF "Planned Receipt Date" <> 0D THEN
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  ELSE
                                                                    "Expected Receipt Date" := "Planned Receipt Date";
                                                                END ELSE
                                                                  IF "Planned Receipt Date" <> 0D THEN BEGIN
                                                                    "Order Date" :=
                                                                      CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',TRUE);
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  END ELSE
                                                                    GetUpdateBasicDates;

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Planned Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Planned Receipt Date;
                                                              ESP=Fecha recep. planificada;
                                                              DEA=Geplantes Wareneingangsdatum] }
    { 5795;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Document Type" = "Document Type"::Order) AND
                                                                   ("Order Date" < WORKDATE) AND
                                                                   ("Order Date" <> 0D)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text018,
                                                                    FIELDCAPTION("Order Date"),"Order Date",WORKDATE);

                                                                IF "Order Date" <> 0D THEN
                                                                  "Planned Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(AdjustDateFormula("Lead Time Calculation"),"Order Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE);

                                                                IF "Planned Receipt Date" <> 0D THEN
                                                                  "Expected Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                ELSE
                                                                  "Expected Receipt Date" := "Planned Receipt Date";

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ESP=Fecha pedido;
                                                              DEA=Bestelldatum] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ESP=Permitir asign. cargos prod.;
                                                              DEA=Artikel Zu-/Abschlagszuw. zul.] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ESP=Cdad. a asignar;
                                                              DEA=Menge fr Zuweisung];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ESP=Cdad. asignada;
                                                              DEA=Zugewiesene Menge];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Ship ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Ship" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Ship" = Quantity - "Return Qty. Shipped" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Ship" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Ship (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Ship" > 0) THEN
                                                                  CheckApplToItemLedgEntry;
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Ship;
                                                              ESP=Cantidad dev. a enviar;
                                                              DEA=Rcklieferungsmenge zu liefern];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Ship (Base);Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Ship","Return Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Ship (Base);
                                                              ESP=Cantidad dev. a enviar (Base);
                                                              DEA=Rcklief.-Mge. zu lief.(Basis)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Shipped Not Invd.;Decimal;
                                                   CaptionML=[ENU=Return Qty. Shipped Not Invd.;
                                                              ESP=Cantidad dev. enviada no fact.;
                                                              DEA=Rcklief.-Menge Lief. n. fakt.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Shpd Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Shpd Not Invd.(Base);
                                                              ESP=Cantidad dev. env. no fact.(Base);
                                                              DEA=Rckl.-Mge. Lief.n.fak.(Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Shpd. Not Invd.;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Shpd. Not Invd.",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Shpd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Shpd. Not Invd.;
                                                              ESP=Dev. enviadas no facturadas;
                                                              DEA=Lief. n. fakt. Rckl.-Betrag];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Shpd. Not Invd. (LCY);Decimal;
                                                   CaptionML=[ENU=Return Shpd. Not Invd. (LCY);
                                                              ESP=Dev. env. no facturadas (DL);
                                                              DEA=Lief. n. fak. Rckl.-Betr.(MW)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Shipped ;Decimal       ;CaptionML=[ENU=Return Qty. Shipped;
                                                              ESP=Cantidad dev. enviada;
                                                              DEA=Rcklieferungsmenge geliefert];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Shipped (Base);Decimal ;CaptionML=[ENU=Return Qty. Shipped (Base);
                                                              ESP=Cantidad dev. enviada (Base);
                                                              DEA=Rcklief.-Menge gelief.(Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6600;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ESP=N§ env¡o devoluci¢n;
                                                              DEA=Rcklieferungsnr.];
                                                   Editable=No }
    { 6601;   ;Return Shipment Line No.;Integer   ;CaptionML=[ENU=Return Shipment Line No.;
                                                              ESP=N§ l¡n. env¡o dev.;
                                                              DEA=Rcklieferzeilennr.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                IF "Return Reason Code" = '' THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Return Reason Code"));

                                                                IF ReturnReason.GET("Return Reason Code") THEN BEGIN
                                                                  IF ReturnReason."Default Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ReturnReason."Default Location Code");
                                                                  IF ReturnReason."Inventory Value Zero" THEN
                                                                    VALIDATE("Direct Unit Cost",0)
                                                                  ELSE
                                                                    UpdateDirectUnitCost(FIELDNO("Return Reason Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ESP=C¢d. auditor¡a dev.;
                                                              DEA=Reklamationsgrundcode] }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ESP=N§ ruta;
                                                              DEA=Arbeitsplannr.] }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.",
                                                                  "Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Expected Receipt Date" := ProdOrderRtngLine."Ending Date";
                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");
                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Operation No.;
                                                              ESP=N§ operaci¢n;
                                                              DEA=Arbeitsgangnr.];
                                                   Editable=No }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Work Center No.",'');
                                                                IF "Work Center No." = '' THEN
                                                                  EXIT;

                                                                WorkCenter.GET("Work Center No.");
                                                                "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                "VAT Prod. Posting Group" := '';
                                                                IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                  "VAT Prod. Posting Group" := GenProdPostingGrp."Def. VAT Prod. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                "Overhead Rate" := WorkCenter."Overhead Rate";
                                                                VALIDATE("Indirect Cost %",WorkCenter."Indirect Cost %");

                                                                CreateDim(
                                                                  DATABASE::"Work Center","Work Center No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Work Center No.;
                                                              ESP=N§ centro trabajo;
                                                              DEA=Arbeitsplatzgruppennr.];
                                                   Editable=No }
    { 99000753;;Finished           ;Boolean       ;CaptionML=[ENU=Finished;
                                                              ESP=Terminada;
                                                              DEA=Beendet] }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ESP=N§ l¡n. orden producc.;
                                                              DEA=FA-Zeilennr.];
                                                   Editable=No }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales;
                                                              DEA=Gemeinkostensatz];
                                                   DecimalPlaces=0:5 }
    { 99000756;;MPS Order          ;Boolean       ;CaptionML=[ENU=MPS Order;
                                                              ESP=Orden MPS;
                                                              DEA=Prod.-Programmplanungsauftrag] }
    { 99000757;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReservePurchLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ESP=Flexib. planificaci¢n;
                                                              DEA=Planungsflexibilitt];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ESP=Ilimitada,Ninguna;
                                                                    DEA=Unbeschrnkt,Keine];
                                                   OptionString=Unlimited,None }
    { 99000758;;Safety Lead Time   ;DateFormula   ;OnValidate=BEGIN
                                                                VALIDATE("Inbound Whse. Handling Time");
                                                              END;

                                                   CaptionML=[ENU=Safety Lead Time;
                                                              ESP=Plazo de seguridad;
                                                              DEA=Sicherh.-Zuschl. Beschaff.-Zt.] }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=[ENU=Routing Reference No.;
                                                              ESP=N§ ruta referencia;
                                                              DEA=Arbeitsplanref.-Nr.] }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Pay-to Vendor No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   KeyGroups=Item(Dim);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Pay-to Vendor No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   KeyGroups=Vend(Dim);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No.;
                                                   KeyGroups=SOP(Blank) }
    {    ;Document Type,Type,Prod. Order No.,Prod. Order Line No.,Routing No.,Operation No.;
                                                   KeyGroups=Item(MFG) }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Receipt No.,Receipt Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Expected Receipt Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Job No.,Job Task No.      ;SumIndexFields=Outstanding Amt. Ex. VAT (LCY),A. Rcd. Not Inv. Ex. VAT (LCY) }
    {    ;Document Type,Document No.,Type,No.      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.;DEA=Sie knnen eine %1 nicht umbenennen.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 because the order line is associated with sales order %2.;ESP=No se puede cambiar %1 porque la l¡nea de pedido est  asociada con el pedido de venta %2.;DEA=Sie knnen %1 nicht ndern, da die Bestellung zum Auftrag %2 gehrt.';
      Text002@1002 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.;ESP=No se pueden calcular precios IVA incluido cuando %1 es %2.;DEA=Preise inkl. MwSt. knnen nicht berechnet werden, wenn %1 %2 ist.';
      Text003@1003 : TextConst 'ENU=You cannot purchase resources.;ESP=No se pueden comprar recursos.;DEA=Ressourcen knnen nicht eingekauft werden.';
      Text004@1004 : TextConst 'ENU=must not be less than %1;ESP=No puede ser inferior a %1.;DEA=darf nicht weniger als %1 sein';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 units.;ESP=No se pueden facturar m s de %1 unidades.;DEA=Sie knnen nicht mehr als %1 Einheiten fakturieren.';
      Text007@1006 : TextConst 'ENU=You cannot invoice more than %1 base units.;ESP=No se pueden facturar m s de %1 unidades base.;DEA=Sie knnen nicht mehr als %1 Basiseinheiten fakturieren.';
      Text008@1007 : TextConst 'ENU=You cannot receive more than %1 units.;ESP=No se pueden recibir m s de %1 unidades.;DEA=Sie knnen nicht mehr als %1 Einheiten erhalten.';
      Text009@1008 : TextConst 'ENU=You cannot receive more than %1 base units.;ESP=No se pueden recibir m s de %1 unidades base.;DEA=Sie knnen nicht mehr als %1 Basiseinheiten erhalten.';
      Text010@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ESP=No se puede cambiar %1 cuando %2 es %3.;DEA=Sie knnen %1 nicht ndern, wenn %2 %3 ist.';
      Text011@1010 : TextConst 'ENU=" must be 0 when %1 is %2";ESP=" debe ser 0 cuando %1 es %2";DEA=" muss 0 sein, wenn %1 %2 ist."';
      Text012@1011 : TextConst 'ENU="must not be specified when %1 = %2";ESP="no se puede indicar cuando %1 = %2";DEA="darf nicht angegeben werden, wenn %1 = %2 ist."';
      Text016@1014 : TextConst 'ENU="%1 is required for %2 = %3.";ESP="Se requiere %1 para %2 = %3.";DEA="%1 ist notwendig fr %2 = %3."';
      Text017@1015 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ESP=\La informaci¢n introducida puede ser ignorada por operaciones almacn.;DEA=\Die eingegebenen Informationen werden in Logistikaktivitten mglicherweise nicht bercksichtigt.';
      Text018@1016 : TextConst 'ENU=%1 %2 is earlier than the work date %3.;ESP=%1 %2 es anterior a la fecha trabajo %3.;DEA=Das %1 %2 liegt vor dem Arbeitsdatum %3.';
      Text020@1018 : TextConst 'ENU=You cannot return more than %1 units.;ESP=No puede devolver m s de %1 unidades.;DEA=Sie knnen nicht mehr als %1 Einheiten zurcksenden.';
      Text021@1019 : TextConst 'ENU=You cannot return more than %1 base units.;ESP=No puede dev. m s del %1 unidades base.;DEA=Sie knnen nicht mehr als %1 Basiseinheiten zurcksenden.';
      Text022@1020 : TextConst 'ENU=You cannot change %1, if item charge is already posted.;ESP=No puede cambiar %1, si los cargos. prod. est n ya regis.;DEA=Sie knnen %1 nicht ndern, wenn bereits Artikel Zu-/Abschlge gebucht wurden.';
      Text023@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ESP=No puede cambiar %1 despus de introducir datos en %2.;DEA=Sie knnen das %1 nicht ndern, wenn das %2 ausgefllt wurde.';
      Text029@1077 : TextConst 'ENU=must be positive.;ESP=debe ser positivo.;DEA=muss positiv sein.';
      Text030@1076 : TextConst 'ENU=must be negative.;ESP=debe ser negativo.;DEA=muss negativ sein.';
      Text031@1056 : TextConst 'ENU=You cannot define item tracking on this line because it is linked to production order %1.;ESP=No puede definir seguim. prod. en esta l¡n. porque est  unido a la orden de producc. %1.;DEA=Sie knnen fr diese Zeile keine Artikelverfolgung festlegen, da sie mit dem Fertigungsauftrag %1 verknpft ist.';
      Text032@1017 : TextConst 'ENU=%1 must not be greater than the sum of %2 and %3.;ESP=%1 no debe ser superior a la suma de %2 y %3.;DEA=''%1'' darf nicht gráer sein als die Summe aus %2 und %3.';
      Text033@1078 : TextConst 'ENU="Warehouse ";ESP="Almacn ";DEA="Lager "';
      Text034@1079 : TextConst 'ENU="Inventory ";ESP="Inventario ";DEA="Lagerbestand "';
      Text035@1048 : TextConst 'ENU=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.;ESP=%1 unidades para el %2 %3 ya se han devuelto o transferido. Por lo tanto, s¢lo se pueden devolver %4 unidades.;DEA=%1 Einheiten fr %2 %3 wurden bereits zurckgegeben oder umgelagert. Daher knnen nur %4 Einheiten zurckgegeben werden.';
      Text036@1081 : TextConst 'ENU=You must cancel the existing approval for this document to be able to change the %1 field.;ESP=Debe cancelar la aprobaci¢n existente para este documento para poder cambiar el campo %1.;DEA=Die vorhandene Genehmigung fr dieses Dokument muss storniert werden, damit Sie das Feld ''%1'' ndern knnen.';
      Text037@1082 : TextConst 'ENU=cannot be %1.;ESP=no puede ser %1.;DEA=kann nicht %1 sein.';
      Text038@1083 : TextConst 'ENU=cannot be less than %1.;ESP=no puede ser inferior a %1.;DEA=kann nicht weniger als %1 sein.';
      Text039@1084 : TextConst 'ENU=cannot be more than %1.;ESP=no puede ser superior a %1.;DEA=kann nicht mehr als %1 sein.';
      Text040@1090 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ESP=Utilice el formulario %1 para insertar %2, si se utiliza el seguimiento de productos.;DEA=Zum Eingeben von %2 muss Formular %1 verwendet werden, wenn die Artikelverfolgung verwendet wird.';
      Text99000000@1021 : TextConst 'ENU=You cannot change %1 when the purchase order is associated to a production order.;ESP=No puede cambiar %1 cuando el pedido de compra est  asociado a una O.P.;DEA=Sie knnen den %1 nicht ndern, wenn die Bestellung mit einem Fertigungsauftrag verknpft ist.';
      PurchHeader@1022 : Record 38;
      PurchLine2@1023 : Record 39;
      TempPurchLine@1024 : Record 39;
      GLAcc@1025 : Record 15;
      Item@1026 : Record 27;
      Currency@1027 : Record 4;
      CurrExchRate@1028 : Record 330;
      ItemTranslation@1029 : Record 30;
      SalesOrderLine@1033 : Record 37;
      VATPostingSetup@1034 : Record 325;
      StdTxt@1035 : Record 7;
      FA@1036 : Record 5600;
      FADeprBook@1037 : Record 5612;
      FASetup@1038 : Record 5603;
      GenBusPostingGrp@1039 : Record 250;
      GenProdPostingGrp@1040 : Record 251;
      ReservEntry@1041 : Record 337;
      UnitOfMeasure@1043 : Record 204;
      ItemCharge@1044 : Record 5800;
      ItemChargeAssgntPurch@1045 : Record 5805;
      SKU@1046 : Record 5700;
      WorkCenter@1047 : Record 99000754;
      PurchasingCode@1049 : Record 5721;
      InvtSetup@1050 : Record 313;
      Location@1051 : Record 14;
      GLSetup@1074 : Record 98;
      ReturnReason@1068 : Record 6635;
      ItemVend@1031 : Record 99;
      CalChange@1062 : Record 7602;
      JobJnlLine@1071 : TEMPORARY Record 210;
      Reservation@1052 : Page 498;
      SalesTaxCalculate@1057 : Codeunit 398;
      ReservEngineMgt@1058 : Codeunit 99000831;
      ReservePurchLine@1059 : Codeunit 99000834;
      UOMMgt@1060 : Codeunit 5402;
      AddOnIntegrMgt@1061 : Codeunit 5403;
      DimMgt@1064 : Codeunit 408;
      DistIntegration@1065 : Codeunit 5702;
      NonstockItemMgt@1066 : Codeunit 5703;
      WhseValidateSourceLine@1067 : Codeunit 5777;
      LeadTimeMgt@1069 : Codeunit 5404;
      PurchPriceCalcMgt@1030 : Codeunit 7010;
      CalendarMgmt@1032 : Codeunit 7600;
      CheckDateConflict@1013 : Codeunit 99000815;
      TrackingBlocked@1070 : Boolean;
      StatusCheckSuspended@1073 : Boolean;
      GLSetupRead@1075 : Boolean;
      UnitCostCurrency@1063 : Decimal;
      UpdateFromVAT@1087 : Boolean;
      Text042@1088 : TextConst 'ENU=You cannot return more than the %1 units that you have received for %2 %3.;ESP=No puede devolver m s de las %1 unidades recibidas para el %2 %3.;DEA=Sie knnen nicht mehr als die %1 Einheiten zurckliefern, die Sie fr %2 %3 empfangen haben.';
      Text043@1089 : TextConst 'ENU=must be positive when %1 is not 0.;ESP=debe ser positivo cuando %1 no es 0.;DEA=muss positiv sein, wenn %1 nicht 0 ist.';
      Text044@1080 : TextConst 'ENU=You cannot change %1 because this purchase order is associated with %2 %3.;ESP=No se puede modificar %1 porque este pedido de compra est  asociado con %2 %3.;DEA=''%1'' kann nicht gendert werden, da die Bestellung %2 ''%3'' zugeordnet ist.';
      Text046@1091 : TextConst 'ENU=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?;ESP=Microsoft Dynamics NAV no actualizar  %1 al cambiar %2 porque se ha registrado una factura de prepago. ¨Desea continuar?;DEA=Wenn ''%2'' gendert wird, wird ''%1'' von Microsoft Dynamics NAV nicht aktualisiert, da eine Vorauszahlungsrechnung gebucht wurde. Soll der Vorgang fortgesetzt werden?';
      Text047@1092 : TextConst 'ENU=%1 can only be set when %2 is set.;ESP=Solo se puede establecer %1 cuando se establece %2.;DEA=%1 kann nur festgelegt werden, wenn %2 festgelegt ist.';
      Text048@1093 : TextConst 'ENU=%1 cannot be changed when %2 is set.;ESP=%1 no se puede cambiar cuando se establece %2.;DEA=%1 kann nicht gendert werden, wenn %2 festgelegt ist.';
      PrePaymentLineAmountEntered@1042 : Boolean;
      Text049@1085 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ESP=Ha modificado una o varias dimensiones de %1, que ya se ha enviado. Al registrar la l¡nea con la dimensi¢n modificada en la contabilidad, los importes de la cuenta provisional de inventario no cuadrar n cuando se notifiquen por dimensi¢n.\\¨Desea conservar la dimensi¢n modificada?;DEA=Fr %1 (bereits versendet) wurde mindestens eine Dimension gendert. Wenn die Zeile mit der genderten Dimension auf Sachkonten gebucht wird, stimmt der Saldo der Betrge im Lagerinterimskonto nicht, wenn die Betrge pro Dimension angegeben werden.\\Mchten Sie die genderte Dimension beibehalten?';
      Text050@1086 : TextConst 'ENU=Cancelled.;ESP=Cancelado.;DEA=Abgebrochen';
      Text051@1012 : TextConst 'ENU=must have the same sign as the receipt;ESP=debe tener el mismo signo que el albar n de compra;DEA=muss dasselbe Vorzeichen haben wie die Lieferung';
      Text052@1053 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in receipt %1.;ESP=La cantidad que est  intentando facturar es mayor que la del recibo %1.;DEA=Die Menge, die Sie fakturieren mchten, ist gráer als die Menge der Lieferung %1.';
      Text053@1054 : TextConst 'ENU=must have the same sign as the return shipment;ESP=debe tener el mismo signo que el env¡o devoluci¢n;DEA=muss dasselbe Vorzeichen haben wie die Rcklieferung';
      Text054@1055 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.;ESP=La cantidad que est  intentando facturar es mayor que la cantidad del env¡o de devoluci¢n %1.;DEA=Die Menge, die Sie fakturieren mchten, ist gráer als die Menge der Rcklieferung %1.';
      Text056Qst@1094 : TextConst 'ENU=The change leads to a date conflict with existing reservations. Do you want to continue?;DEA=The change leads to a date conflict with existing reservations. Do you want to continue?';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Shipped (Base)";
        "Return Qty. Shipped Not Invd." := "Return Qty. Shipped" - "Quantity Invoiced";
        "Ret. Qty. Shpd Not Invd.(Base)" := "Return Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
        "Qty. Rcd. Not Invoiced" := "Quantity Received" - "Quantity Invoiced";
        "Qty. Rcd. Not Invoiced (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
        UpdateInvoiceOnPurchOrder;
      END;
      "Completely Received" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@19();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Amt. Rcd. Not Invoiced" := 0;
        "Amt. Rcd. Not Invoiced (LCY)" := 0;
        "Return Shpd. Not Invd." := 0;
        "Return Shpd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetPurchHeader;
        IF PurchHeader.Status = PurchHeader.Status::Released THEN
          AmountInclVAT := "Amount Including VAT"
        ELSE
          IF PurchHeader."Prices Including VAT" THEN
            AmountInclVAT := "Line Amount" - "Inv. Discount Amount"
          ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
              IF "Use Tax" THEN
                AmountInclVAT := "Line Amount" - "Inv. Discount Amount"
              ELSE
                AmountInclVAT :=
                  "Line Amount" - "Inv. Discount Amount" +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                      "Line Amount" - "Inv. Discount Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                    Currency."Amount Rounding Precision")
            END ELSE
              AmountInclVAT :=
                ROUND(
                  ("Line Amount" - "Inv. Discount Amount") *
                  (1 + "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100)),
                  Currency."Amount Rounding Precision");
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Shpd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Shipped Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Amt. Rcd. Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToReceive@15();
    BEGIN
      "Qty. to Receive" := "Outstanding Quantity";
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToShip@5803();
    BEGIN
      "Return Qty. to Ship" := "Outstanding Quantity";
      "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@46();
    BEGIN
      "Appl.-to Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped" + "Return Qty. to Ship" - "Quantity Invoiced");

      EXIT("Quantity Received" + "Qty. to Receive" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@17() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Received (Base)" + "Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
    END;

    PROCEDURE CalcInvDiscToInvoice@33();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@7();
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Prod. Order No.",'');
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,TRUE);
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
        VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
    END;

    PROCEDURE SetPurchHeader@12(NewPurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := NewPurchHeader;

      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        Currency.GET(PurchHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetPurchHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> PurchHeader."Document Type") OR ("Document No." <> PurchHeader."No.") THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF PurchHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          PurchHeader.TESTFIELD("Currency Factor");
          Currency.GET(PurchHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@4();
    BEGIN
      TESTFIELD("No.");
      IF Item."No." <> "No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE UpdateDirectUnitCost@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
        UpdateAmounts;

      IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
         ("Prod. Order No." <> '')
      THEN
        EXIT;

      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);
        PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
        VALIDATE("Direct Unit Cost");

        IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
          SetVendorItemNo;
      END;
    END;

    PROCEDURE UpdateUnitCost@5();
    VAR
      DiscountAmountPerQty@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      GetGLSetup;
      IF Quantity = 0 THEN
        DiscountAmountPerQty := 0
      ELSE
        DiscountAmountPerQty :=
          ROUND(("Line Discount Amount" + "Inv. Discount Amount") / Quantity,
            GLSetup."Unit-Amount Rounding Precision");

      IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
        "Unit Cost" := 0
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) / (1 + "VAT %" / 100) +
            GetOverheadRateFCY - "VAT Difference"
        ELSE
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) +
            GetOverheadRateFCY;

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        "Unit Cost (LCY)" :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            GetDate,"Currency Code",
            "Unit Cost",PurchHeader."Currency Factor");
      END ELSE
        "Unit Cost (LCY)" := "Unit Cost";

      IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
        GetItem;
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
          IF GetSKU THEN
            "Unit Cost (LCY)" := SKU."Unit Cost" * "Qty. per Unit of Measure"
          ELSE
            "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
        END;
      END;

      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
      IF PurchHeader."Currency Code" <> '' THEN
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");

      UpdateSalesCost;

      IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
        CreateTempJobJnlLine(FALSE);
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
        UpdatePricesFromJobJnlLine;
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Allow Invoice Disc.") THEN
        TESTFIELD(Type);
      GetPurchHeader;

      IF "Line Amount" <> xRec."Line Amount" THEN
        "VAT Difference" := 0;
      IF "Line Amount" <> ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" :=
          ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
      END;

      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
          IF "Direct Unit Cost" < 0 THEN
            FIELDERROR("Direct Unit Cost",STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
        END;
        IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text037,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END;
      END;
      UpdateVATAmounts;

      InitOutstandingAmount;

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      PurchLine2@1000 : Record 39;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetPurchHeader;
      PurchLine2.SETRANGE("Document Type","Document Type");
      PurchLine2.SETRANGE("Document No.","Document No.");
      PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0);
      PurchLine2.SETRANGE("VAT Identifier","VAT Identifier");
      PurchLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
        IF (PurchHeader.Status = PurchHeader.Status::Released) AND ("Line No." <> 0) THEN
          IF MODIFY THEN
            IF PurchLine2.FINDLAST THEN BEGIN
              PurchLine2.UpdateAmounts;
              PurchLine2.MODIFY;
            END;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF PurchLine2.FINDSET THEN
            REPEAT
              TotalLineAmount := TotalLineAmount + PurchLine2."Line Amount";
              TotalInvDiscAmount := TotalInvDiscAmount + PurchLine2."Inv. Discount Amount";
              TotalAmount := TotalAmount + PurchLine2.Amount;
              TotalAmountInclVAT := TotalAmountInclVAT + PurchLine2."Amount Including VAT";
              TotalQuantityBase := TotalQuantityBase + PurchLine2."Quantity (Base)";
            UNTIL PurchLine2.NEXT = 0;

        IF PurchHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - PurchHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                PurchHeader.TESTFIELD("VAT Base Discount %",0);
                "Amount Including VAT" :=
                  ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                IF "Use Tax" THEN
                  Amount := "Amount Including VAT"
                ELSE
                  Amount :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmount;
                "VAT Base Amount" := Amount;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                IF "Use Tax" THEN
                  "Amount Including VAT" := Amount
                ELSE
                  "Amount Including VAT" :=
                    TotalAmount + Amount +
                    ROUND(
                      SalesTaxCalculate.CalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesCost@6();
    BEGIN
      CASE TRUE OF
        "Sales Order Line No." <> 0:
          // Drop Shipment
          SalesOrderLine.GET(
            SalesOrderLine."Document Type"::Order,
            "Sales Order No.",
            "Sales Order Line No.");
        "Special Order Sales Line No." <> 0:
          // Special Order
          BEGIN
            IF NOT
               SalesOrderLine.GET(
                 SalesOrderLine."Document Type"::Order,
                 "Special Order Sales No.",
                 "Special Order Sales Line No.")
            THEN
              EXIT;
          END;
        ELSE
          EXIT;
      END;
      SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine."Unit Cost" := "Unit Cost" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine.VALIDATE("Unit Cost (LCY)");
      SalesOrderLine.MODIFY;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@10();
    VAR
      LocalGLAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      IF "FA Posting Type" = "FA Posting Type"::" " THEN
        "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
        FAPostingGr.TESTFIELD("Acquisition Cost Account");
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
      END ELSE BEGIN
        FAPostingGr.TESTFIELD("Maintenance Expense Account");
        LocalGLAcc.GET(FAPostingGr."Maintenance Expense Account");
      END;
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    PROCEDURE UpdateUOMQtyPerStockQty@9();
    BEGIN
      GetItem;
      "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
      "Unit Price (LCY)" := Item."Unit Price" * "Qty. per Unit of Measure";
      GetPurchHeader;
      IF PurchHeader."Currency Code" <> '' THEN
        "Unit Cost" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            GetDate,PurchHeader."Currency Code",
            "Unit Cost (LCY)",PurchHeader."Currency Factor")
      ELSE
        "Unit Cost" := "Unit Cost (LCY)";
      UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("Prod. Order No.",'');
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetPurchLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE GetDate@28() : Date;
    BEGIN
      IF PurchHeader."Posting Date" <> 0D THEN
        EXIT(PurchHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(-Value);
      END;
    END;

    PROCEDURE BlanketOrderLookup@36();
    BEGIN
      PurchLine2.RESET;
      PurchLine2.SETCURRENTKEY("Document Type",Type,"No.");
      PurchLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      PurchLine2.SETRANGE(Type,Type);
      PurchLine2.SETRANGE("No.","No.");
      PurchLine2.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
      PurchLine2.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
      IF PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine2) = ACTION::LookupOK THEN BEGIN
        PurchLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := PurchLine2."Document No.";
        VALIDATE("Blanket Order Line No.",PurchLine2."Line No.");
      END;
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReservePurchLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      IF "Prod. Order No." <> '' THEN
        ERROR(Text031,"Prod. Order No.");

      TESTFIELD("Quantity (Base)");

      ReservePurchLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1008 : Record 242;
      TableID@1009 : ARRAY [10] OF Integer;
      No@1010 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetPurchHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",DATABASE::Vendor);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@30(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      TESTFIELD("No.");
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5805;
      AssignItemChargePurch@1001 : Codeunit 5805;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntPurch.FINDLAST THEN BEGIN
        ItemChargeAssgntPurch."Document Type" := "Document Type";
        ItemChargeAssgntPurch."Document No." := "Document No.";
        ItemChargeAssgntPurch."Document Line No." := "Line No.";
        ItemChargeAssgntPurch."Item Charge No." := "No.";
        GetPurchHeader;
        IF ("Inv. Discount Amount" = 0) AND (NOT PurchHeader."Prices Including VAT") THEN
          ItemChargeAssgntPurch."Unit Cost" := "Unit Cost"
        ELSE
          IF PurchHeader."Prices Including VAT" THEN
            ItemChargeAssgntPurch."Unit Cost" :=
              ROUND(
                ("Line Amount" - "Inv. Discount Amount") / Quantity / (1 + "VAT %" / 100),
                Currency."Unit-Amount Rounding Precision")
          ELSE
            ItemChargeAssgntPurch."Unit Cost" :=
              ROUND(
                ("Line Amount" - "Inv. Discount Amount") / Quantity,
                Currency."Unit-Amount Rounding Precision");
      END;

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Return Shipment No.")
      ELSE
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Receipt No.");
      CLEAR(AssignItemChargePurch);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntPurch."Unit Cost");
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
    BEGIN
      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text032,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      IF (CurrFieldNo <> 0) AND ("Unit Cost" <> xRec."Unit Cost") THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION("Unit Cost"));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF (CurrFieldNo <> 0) AND (Quantity <> xRec.Quantity) THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION(Quantity));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        GetPurchHeader;
        REPEAT
          ShareOfVAT := 1;
          IF PurchHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntPurch."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN BEGIN
              ItemChargeAssgntPurch."Unit Cost" :=
                ROUND(
                  ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
              ItemChargeAssgntPurch.VALIDATE("Qty. to Assign");
              ItemChargeAssgntPurch.MODIFY;
            END;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF "Quantity Invoiced" <> 0 THEN BEGIN
        CALCFIELDS("Qty. Assigned");
        TESTFIELD("Qty. Assigned","Quantity Invoiced");
      END;
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntPurch.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Purchase Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      IF NOT PurchHeader.GET("Document Type","Document No.") THEN BEGIN
        PurchHeader."No." := '';
        PurchHeader.INIT;
      END;
      IF PurchHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetPurchHeader;
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
        IF NOT "System-Created Entry" THEN
          IF Type <> Type::" " THEN
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open)
      END ELSE
        IF Type IN [Type::Item,Type::"Fixed Asset"] THEN
          PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@42(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateLeadTimeFields@11();
    VAR
      StartingDate@1000 : Date;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        IF "Document Type" IN
           ["Document Type"::Quote,"Document Type"::Order]
        THEN
          StartingDate := PurchHeader."Order Date"
        ELSE
          StartingDate := PurchHeader."Posting Date";

        EVALUATE("Lead Time Calculation",
          LeadTimeMgt.PurchaseLeadTime(
            "No.","Location Code","Variant Code",
            "Buy-from Vendor No."));
        IF FORMAT("Lead Time Calculation") = '' THEN
          "Lead Time Calculation" := PurchHeader."Lead Time Calculation";
        EVALUATE("Safety Lead Time",LeadTimeMgt.SafetyLeadTime("No.","Location Code","Variant Code"));
      END;
    END;

    PROCEDURE GetUpdateBasicDates@43();
    BEGIN
      GetPurchHeader;
      IF PurchHeader."Expected Receipt Date" <> 0D THEN
        VALIDATE("Expected Receipt Date",PurchHeader."Expected Receipt Date")
      ELSE
        VALIDATE("Order Date",PurchHeader."Order Date");
    END;

    PROCEDURE UpdateDates@39();
    BEGIN
      IF "Promised Receipt Date" <> 0D THEN
        VALIDATE("Promised Receipt Date")
      ELSE
        IF "Requested Receipt Date" <> 0D THEN
          VALIDATE("Requested Receipt Date")
        ELSE
          GetUpdateBasicDates;
    END;

    PROCEDURE InternalLeadTimeDays@35(PurchDate@1002 : Date) : Text[30];
    VAR
      TotalDays@1001 : DateFormula;
    BEGIN
      EVALUATE(
        TotalDays,'<' + FORMAT(CALCDATE("Safety Lead Time",CALCDATE("Inbound Whse. Handling Time",PurchDate)) - PurchDate) + 'D>');
      EXIT(FORMAT(TotalDays));
    END;

    PROCEDURE UpdateVATOnLines@32(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF VATAmountLine."Inv. Disc. Base Amount" = 0 THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    IF QtyType = QtyType::General THEN
                      LineAmountToInvoice := "Line Amount"
                    ELSE
                      LineAmountToInvoice :=
                        ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" +
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;
                IF QtyType = QtyType::General THEN
                  IF PurchHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;

                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF NOT ((Type = Type::"Charge (Item)") AND ("Quantity Invoiced" <> "Qty. Assigned")) THEN BEGIN
                  SetUpdateFromVAT(TRUE);
                  UpdateUnitCost;
                END;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@24(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1008 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetVPGInvRoundAcc) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."Use Tax" := "Use Tax";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT PurchHeader.Receive) AND PurchHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Rcd. Not Invoiced (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT PurchHeader.Ship) AND PurchHeader.Invoice:
                        BEGIN
                          IF "Return Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Shipped Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Shpd Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Invoice Discount Calculation" <> PurchHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Ship (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Receive (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF PurchHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Base" := "Amount Including VAT"
                    ELSE
                      "VAT Base" :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                            PurchHeader."Posting Date","Amount Including VAT",Quantity,PurchHeader."Currency Factor"),
                          Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Amount" := 0
                    ELSE
                      "VAT Amount" :=
                        SalesTaxCalculate.CalculateTax(
                          PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                          PurchHeader."Posting Date","VAT Base",Quantity,PurchHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(PurchLine."VAT Identifier",PurchLine."VAT Calculation Type",
             PurchLine."Tax Group Code",PurchLine."Use Tax",PurchLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE UpdateWithWarehouseReceive@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@47();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      IF "Prod. Order No." <> '' THEN
        EXIT;
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text033;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.")
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE GetOverheadRateFCY@40() : Decimal;
    VAR
      QtyPerUOM@1000 : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        QtyPerUOM := "Qty. per Unit of Measure"
      ELSE BEGIN
        GetItem;
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      END;

      EXIT(
        CurrExchRate.ExchangeAmtLCYToFCY(
          GetDate,"Currency Code","Overhead Rate" * QtyPerUOM,PurchHeader."Currency Factor"));
    END;

    PROCEDURE GetItemTranslation@44();
    BEGIN
      GetPurchHeader;
      IF ItemTranslation.GET("No.","Variant Code",PurchHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE AdjustDateFormula@48(DateFormulatoAdjust@1000 : DateFormula) : Text[30];
    BEGIN
      IF FORMAT(DateFormulatoAdjust) <> '' THEN
        EXIT(FORMAT(DateFormulatoAdjust));
      EVALUATE(DateFormulatoAdjust,'<0D>');
      EXIT(FORMAT(DateFormulatoAdjust));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Purchase Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE IsInbound@75() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" > 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" < 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@71(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    PROCEDURE CrossReferenceNoLookUp@51();
    VAR
      ItemCrossReference@1000 : Record 5717;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        ItemCrossReference.RESET;
        ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
        ItemCrossReference.SETFILTER(
          "Cross-Reference Type",'%1|%2',
          ItemCrossReference."Cross-Reference Type"::Vendor,
          ItemCrossReference."Cross-Reference Type"::" ");
        ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
        IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
          PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,FIELDNO("Cross-Reference No."));
          PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
          VALIDATE("Direct Unit Cost");
        END;
      END;
    END;

    PROCEDURE ItemExists@52(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    LOCAL PROCEDURE CheckApplToItemLedgEntry@53() : Code[10];
    VAR
      ItemLedgEntry@1000 : Record 32;
      ApplyRec@1005 : Record 339;
      ItemTrackingLines@1006 : Page 6510;
      Qty@1002 : Decimal;
      QtyBase@1001 : Decimal;
      ReturnedQty@1003 : Decimal;
      RemainingtobeReturnedQty@1004 : Decimal;
    BEGIN
      IF "Appl.-to Item Entry" = 0 THEN
        EXIT;

      IF "Receipt No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF Signed(Quantity) > 0 THEN
        TESTFIELD("Prod. Order No.",'');
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;
      ItemLedgEntry.GET("Appl.-to Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,TRUE);
      IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));

      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");

      // Track qty in both alternative and base UOM for better error checking and reporting
      CASE TRUE OF
        CurrFieldNo = FIELDNO(Quantity):
          BEGIN
            Qty := Quantity;
            QtyBase := "Quantity (Base)";
          END;
        "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]:
          BEGIN
            Qty := "Return Qty. to Ship";
            QtyBase := "Return Qty. to Ship (Base)";
          END;
        ELSE BEGIN
          Qty := "Qty. to Receive";
          QtyBase := "Qty. to Receive (Base)";
          ItemLedgEntry.TESTFIELD(Open,TRUE);
        END;
      END;

      IF ABS(QtyBase) > ItemLedgEntry.Quantity THEN
        ERROR(
          Text042,
          ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF ABS(QtyBase) > ItemLedgEntry."Remaining Quantity" THEN BEGIN
        ReturnedQty := ApplyRec.Returned(ItemLedgEntry."Entry No.");
        RemainingtobeReturnedQty := ItemLedgEntry.Quantity - ReturnedQty;
        IF NOT ("Qty. per Unit of Measure" = 0) THEN BEGIN
          ReturnedQty := ROUND(ReturnedQty / "Qty. per Unit of Measure",0.00001);
          RemainingtobeReturnedQty := ROUND(RemainingtobeReturnedQty / "Qty. per Unit of Measure",0.00001);
        END;

        IF ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
           ((("Qty. per Unit of Measure" = 0) AND (RemainingtobeReturnedQty < ABS(QtyBase))) OR
            (("Qty. per Unit of Measure" <> 0) AND (RemainingtobeReturnedQty < ABS(Qty))))
        THEN
          ERROR(
            Text035,
            ReturnedQty,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",RemainingtobeReturnedQty);
      END;

      EXIT(ItemLedgEntry."Location Code");
    END;

    PROCEDURE CalcPrepaymentToDeduct@59();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetPurchHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      LineAmount := ROUND(QtyToHandle * "Direct Unit Cost",Currency."Amount Rounding Precision");
      LineDiscAmount := ROUND("Line Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE JobTaskIsSet@61() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item]));
    END;

    PROCEDURE CreateTempJobJnlLine@55(GetPrices@1001 : Boolean);
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      IF Type = Type::"G/L Account" THEN
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account")
      ELSE
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::Item);
      JobJnlLine.VALIDATE("No.","No.");
      JobJnlLine.VALIDATE("Variant Code","Variant Code");
      JobJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
      JobJnlLine.VALIDATE(Quantity,Quantity);

      IF NOT GetPrices THEN BEGIN
        IF xRec."Line No." <> 0 THEN BEGIN
          JobJnlLine."Unit Cost" := xRec."Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := xRec."Unit Cost (LCY)";
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
          JobJnlLine."Line Amount" := xRec."Job Line Amount";
          JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
          JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        END ELSE BEGIN
          JobJnlLine."Unit Cost" := "Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
          JobJnlLine."Unit Price" := "Job Unit Price";
          JobJnlLine."Line Amount" := "Job Line Amount";
          JobJnlLine."Line Discount %" := "Job Line Discount %";
          JobJnlLine."Line Discount Amount" := "Job Line Discount Amount";
        END;
        JobJnlLine.VALIDATE("Unit Price");
      END ELSE
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@69();
    BEGIN
      "Job Unit Price" := JobJnlLine."Unit Price";
      "Job Total Price" := JobJnlLine."Total Price";
      "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
      "Job Line Amount" := JobJnlLine."Line Amount";
      "Job Line Discount %" := JobJnlLine."Line Discount %";
      "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
    END;

    PROCEDURE JobSetCurrencyFactor@54();
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      "Job Currency Factor" := JobJnlLine."Currency Factor";
    END;

    PROCEDURE SetUpdateFromVAT@58(UpdateFromVAT2@1000 : Boolean);
    BEGIN
      UpdateFromVAT := UpdateFromVAT2;
    END;

    PROCEDURE InitQtyToReceive2@57();
    BEGIN
      "Qty. to Receive" := "Outstanding Quantity";
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    PROCEDURE ShowLineComments@62();
    VAR
      PurchCommentLine@1000 : Record 43;
      PurchCommentSheet@1001 : Page 66;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      PurchCommentLine.SETRANGE("Document Type","Document Type");
      PurchCommentLine.SETRANGE("No.","Document No.");
      PurchCommentLine.SETRANGE("Document Line No.","Line No.");
      PurchCommentSheet.SETTABLEVIEW(PurchCommentLine);
      PurchCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@63();
    VAR
      PurchSetup@1000 : Record 312;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@65();
    VAR
      ReceiptLine@1000 : Record 121;
      PurchOrderLine@1001 : Record 39;
      PurchOrderHeader@1002 : Record 38;
    BEGIN
      IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ReceiptLine."Order No.",ReceiptLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted") *
                Quantity / (PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,PurchOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;

      GetPurchHeader;
      PurchHeader.TESTFIELD("Prices Including VAT",PurchOrderHeader."Prices Including VAT");
      IF PurchHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE SetVendorItemNo@64();
    BEGIN
      GetItem;
      ItemVend.INIT;
      ItemVend."Vendor No." := "Buy-from Vendor No.";
      ItemVend."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVend,"Location Code");
      VALIDATE("Vendor Item No.",ItemVend."Vendor Item No.");
    END;

    PROCEDURE ZeroAmountLine@66(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Direct Unit Cost" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Expected Receipt Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE GetVPGInvRoundAcc@72() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1001 : Record 93;
      PurchSetup@1002 : Record 312;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Invoice Rounding" THEN
        IF Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
          VendorPostingGroup.GET(Vendor."Vendor Posting Group");

      EXIT(VendorPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CheckReceiptRelation@94();
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.GET("Receipt No.","Receipt Line No.");
      IF (Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text051);
      IF ABS(Quantity) > ABS(PurchRcptLine."Qty. Rcd. Not Invoiced") THEN
        ERROR(Text052,PurchRcptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetShptRelation@74();
    VAR
      ReturnShptLine@1000 : Record 6651;
    BEGIN
      ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
      IF (Quantity * (ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text053);
      IF ABS(Quantity) > ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced") THEN
        ERROR(Text054,ReturnShptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@73();
    BEGIN
      IF ("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) THEN
        IF ("Qty. Rcd. Not Invoiced" <> 0) OR ("Return Qty. Shipped Not Invd." <> 0) THEN
          IF NOT CONFIRM(Text049,TRUE,TABLECAPTION) THEN
            ERROR(Text050);
    END;

    PROCEDURE InitType@22();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF (PurchHeader.Status = PurchHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@76();
    VAR
      DialogText@1001 : Text;
    BEGIN
      DialogText := Text033;
      IF (CurrFieldNo <> 0) AND (Type = Type::Item) THEN
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
              END;
            "Document Type"::"Credit Memo":
              IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
              END;
          END;
    END;

    PROCEDURE UpdateInvoiceOnPurchOrder@60();
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        GetPurchHeader;
        IF ("Quantity Received" > 0) AND ("Quantity Invoiced" > 0) AND NOT PurchHeader.Invoice THEN BEGIN
          PurchHeader.Invoice := TRUE;
          PurchHeader.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckReservationDateConflict@1502(DateFieldNo@1000 : Integer);
    VAR
      ReservEntry@1002 : Record 337;
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF CurrFieldNo = DateFieldNo THEN
        IF PurchLineReserve.FindReservEntry(Rec,ReservEntry) THEN BEGIN
          ReservEntry.SETFILTER("Shipment Date",'<%1',"Expected Receipt Date");
          IF NOT ReservEntry.ISEMPTY THEN
            IF NOT CONFIRM(Text056Qst) THEN
              ERROR('');
        END;
    END;

    BEGIN
    END.
  }
}

