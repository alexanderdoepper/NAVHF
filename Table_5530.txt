OBJECT Table 5530 Inventory Event Buffer
{
  OBJECT-PROPERTIES
  {
    Date=28.03.13;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory Event Buffer;
               ESP=Almacenaje eventos inventario;
               DEA=Lagerereignispuffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=Nß mov.;
                                                              DEA=Lfd. Nr.];
                                                   Editable=No }
    { 9   ;   ;Source Line ID      ;RecordID      ;CaptionML=[ENU=Source Line ID;
                                                              ESP=Id. l°nea origen;
                                                              DEA=Herkunftszeilen-ID];
                                                   Editable=No }
    { 10  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESP=Nß producto;
                                                              DEA=Artikelnr.];
                                                   Editable=No }
    { 11  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              DEA=Variantencode];
                                                   Editable=No }
    { 12  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacÇn;
                                                              DEA=Lagerortcode];
                                                   Editable=No }
    { 14  ;   ;Availability Date   ;Date          ;CaptionML=[ENU=Availability Date;
                                                              ESP=Fecha disponibilidad;
                                                              DEA=VerfÅgbarkeitsdatum];
                                                   Editable=No }
    { 15  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo;
                                                              DEA=Art];
                                                   OptionCaptionML=[ENU=Inventory,Purchase,Sale,,,Transfer,Component,Production,Service,Job,Forecast,Blanket Sales Order,Plan,Plan Revert,Assembly Order,Assembly Component;
                                                                    ESP=Inventario,Compra,Venta,,,Transferencia,Componente,Producci¢n,Servicio,Proyecto,Previsi¢n,Pedido ventas abierto,Plan,Revertir plan,Pedido de ensamblado,Componente de ensamblado;
                                                                    DEA=Lager,Einkauf,Verkauf,,,Umlagerung,Komponente,Fertigung,Service,Projekt,Planung,Rahmenauftrag,Plan,Plan wiederherstellen,Montageauftrag,Montagekomponente];
                                                   OptionString=Inventory,Purchase,Sale,,,Transfer,Component,Production,Service,Job,Forecast,Blanket Sales Order,Plan,Plan Revert,Assembly Order,Assembly Component;
                                                   Editable=No }
    { 20  ;   ;Remaining Quantity (Base);Decimal  ;CaptionML=[ENU=Remaining Quantity (Base);
                                                              ESP=Cantidad pendiente (base);
                                                              DEA=Restmenge (Basis)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              ESP=Positivo;
                                                              DEA=Positiv];
                                                   Editable=No }
    { 22  ;   ;Transfer Direction  ;Option        ;CaptionML=[ENU=Transfer Direction;
                                                              ESP=Direcci¢n transferencia;
                                                              DEA=Umlagerungsrichtung];
                                                   OptionCaptionML=[ENU=Outbound,Inbound;
                                                                    ESP=Salida,Entrada;
                                                                    DEA=Ausgehend,Eingehend];
                                                   OptionString=Outbound,Inbound;
                                                   Editable=No }
    { 29  ;   ;Action Message      ;Option        ;CaptionML=[ENU=Action Message;
                                                              ESP=Mensaje acci¢n;
                                                              DEA=Ereignismeldung];
                                                   OptionCaptionML=[ENU=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel";
                                                                    ESP=" ,Nuevo,Cambiar cdad.,Reprogramar,Reprog. y cambiar cdad.,Cancelar";
                                                                    DEA=" ,Neu,Menge Ñndern,Neu berechnen,Neu berechnen & Menge Ñndern,Stornieren"];
                                                   OptionString=[ ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel];
                                                   Editable=No }
    { 31  ;   ;Attached to Line No.;Integer       ;CaptionML=[ENU=Attached to Line No.;
                                                              ESP=Nß l°nea texto adicional;
                                                              DEA=Gehîrt zu Zeilennr.];
                                                   Editable=No }
    { 32  ;   ;Forecast Type       ;Option        ;CaptionML=[ENU=Forecast Type;
                                                              ESP=Tipo previsi¢n;
                                                              DEA=Planungsart];
                                                   OptionCaptionML=[ENU=,Sales,Component;
                                                                    ESP=,Ventas,Componente;
                                                                    DEA=,Verkauf,Komponente];
                                                   OptionString=,Sales,Component;
                                                   Editable=No }
    { 33  ;   ;Derived from Blanket Order;Boolean ;CaptionML=[ENU=Derived from Blanket Order;
                                                              ESP=Proviene de ped. abierto;
                                                              DEA=öbernommen aus Rahmenauftrag];
                                                   Editable=No }
    { 34  ;   ;Ref. Order No.      ;Code20        ;CaptionML=[ENU=Ref. Order No.;
                                                              ESP=Nß orden ref.;
                                                              DEA=Ref.-Nr.];
                                                   Editable=No }
    { 35  ;   ;Orig. Quantity (Base);Decimal      ;CaptionML=[ENU=Orig. Quantity (Base);
                                                              ESP=Cantidad orig. (base);
                                                              DEA=Urspr. Menge (Basis)];
                                                   Editable=No }
    { 37  ;   ;Ref. Order Type     ;Option        ;CaptionML=[ENU=Ref. Order Type;
                                                              ESP=Tipo orden ref.;
                                                              DEA=Ref. Auftragsart];
                                                   OptionCaptionML=[ENU=" ,Purchase,Prod. Order,Assembly,Transfer";
                                                                    ESP=" ,Compra,Orden producci¢n,Ensamblado,Transferencia";
                                                                    DEA=" ,Einkauf,Fertigungsauftrag,Montage,Umlagerung"];
                                                   OptionString=[ ,Purchase,Prod. Order,Assembly,Transfer];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Availability Date,Type                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecRef@1000 : RecordRef;

    PROCEDURE TransferFromSales@1(SalesLine@1000 : Record 37);
    VAR
      SalesLineReserve@1002 : Codeunit 99000832;
      RemQty@1001 : Decimal;
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::Sale;
      SalesLineReserve.ReservQuantity(SalesLine,RemQty,"Remaining Quantity (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Derived from Blanket Order" := SalesLine."Blanket Order No." <> '';
      IF "Derived from Blanket Order" THEN
        "Ref. Order No." := SalesLine."Blanket Order No.";
    END;

    PROCEDURE TransferFromSalesReturn@15(SalesLine@1000 : Record 37);
    VAR
      SalesLineReserve@1002 : Codeunit 99000832;
      RemQty@1001 : Decimal;
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::Sale;
      SalesLineReserve.ReservQuantity(SalesLine,RemQty,"Remaining Quantity (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Derived from Blanket Order" := SalesLine."Blanket Order No." <> '';
      IF "Derived from Blanket Order" THEN
        "Ref. Order No." := SalesLine."Blanket Order No.";
    END;

    PROCEDURE TransferFromProdComp@2(ProdOrderComp@1000 : Record 5407);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdOrderComp);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdOrderComp."Item No.";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Availability Date" := ProdOrderComp."Due Date";
      Type := Type::Component;
      "Remaining Quantity (Base)" := -ProdOrderComp."Remaining Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromJobNeed@3(JobPlanningLine@1000 : Record 1003);
    BEGIN
      IF JobPlanningLine.Type <> JobPlanningLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(JobPlanningLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := JobPlanningLine."No.";
      "Variant Code" := JobPlanningLine."Variant Code";
      "Location Code" := JobPlanningLine."Location Code";
      "Availability Date" := JobPlanningLine."Planning Date";
      Type := Type::Job;
      "Remaining Quantity (Base)" := -JobPlanningLine."Remaining Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromServiceNeed@4(ServLine@1000 : Record 5902);
    VAR
      ServLineReserve@1002 : Codeunit 99000842;
      RemQty@1001 : Decimal;
    BEGIN
      IF ServLine.Type <> ServLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(ServLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ServLine."No.";
      "Variant Code" := ServLine."Variant Code";
      "Location Code" := ServLine."Location Code";
      "Availability Date" := ServLine."Needed by Date";
      Type := Type::Service;
      ServLineReserve.ReservQuantity(ServLine,RemQty,"Remaining Quantity (Base)");
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromOutboundTransOrder@9(TransLine@1000 : Record 5741);
    BEGIN
      INIT;
      RecRef.GETTABLE(TransLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-from Code";
      "Availability Date" := TransLine."Shipment Date";
      Type := Type::Transfer;
      "Remaining Quantity (Base)" := -TransLine."Outstanding Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Transfer Direction" := "Transfer Direction"::Outbound;
    END;

    PROCEDURE TransferFromPlanProdComp@5(PlngComp@1000 : Record 99000829);
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      INIT;
      ReqLine.GET(PlngComp."Worksheet Template Name",PlngComp."Worksheet Batch Name",PlngComp."Worksheet Line No.");
      RecRef.GETTABLE(PlngComp);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PlngComp."Item No.";
      "Variant Code" := PlngComp."Variant Code";
      "Location Code" := PlngComp."Location Code";
      "Availability Date" := PlngComp."Due Date";
      Type := Type::Plan;
      "Remaining Quantity (Base)" := -PlngComp."Expected Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := ReqLine."Ref. Order Type";
    END;

    PROCEDURE TransferFromReqLineTransDemand@16(ReqLine@1000 : Record 246);
    BEGIN
      IF ReqLine.Type <> ReqLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(ReqLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ReqLine."No.";
      "Variant Code" := ReqLine."Variant Code";
      "Location Code" := ReqLine."Transfer-from Code";
      "Availability Date" := ReqLine."Transfer Shipment Date";
      Type := Type::Transfer;
      "Remaining Quantity (Base)" := -ReqLine."Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := ReqLine."Ref. Order Type";
      // Notice: Planned outbound transfer uses an opposite direction of transfer
      "Transfer Direction" := 1;
    END;

    PROCEDURE TransferInventoryQty@6(ItemLedgEntry@1001 : Record 32);
    BEGIN
      INIT;
      RecRef.GETTABLE(ItemLedgEntry);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ItemLedgEntry."Item No.";
      "Variant Code" := ItemLedgEntry."Variant Code";
      "Location Code" := ItemLedgEntry."Location Code";
      "Availability Date" := 0D;
      Type := Type::Inventory;
      "Remaining Quantity (Base)" := ItemLedgEntry."Remaining Quantity";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromPurchase@7(PurchLine@1002 : Record 39);
    VAR
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF PurchLine.Type <> PurchLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(PurchLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PurchLine."No.";
      "Variant Code" := PurchLine."Variant Code";
      "Location Code" := PurchLine."Location Code";
      "Availability Date" := PurchLine."Expected Receipt Date";
      Type := Type::Purchase;
      "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromPurchReturn@17(PurchLine@1002 : Record 39);
    VAR
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF PurchLine.Type <> PurchLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(PurchLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := PurchLine."No.";
      "Variant Code" := PurchLine."Variant Code";
      "Location Code" := PurchLine."Location Code";
      "Availability Date" := PurchLine."Expected Receipt Date";
      Type := Type::Purchase;
      "Remaining Quantity (Base)" := -PurchLineReserve.ReservQuantity(PurchLine);
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromProdOrder@8(ProdOrderLine@1000 : Record 5406);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdOrderLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Availability Date" := ProdOrderLine."Due Date";
      Type := Type::Production;
      "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromInboundTransOrder@14(TransLine@1000 : Record 5741);
    BEGIN
      INIT;
      RecRef.GETTABLE(TransLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-to Code";
      "Availability Date" := TransLine."Receipt Date";
      Type := Type::Transfer;
      "Remaining Quantity (Base)" := TransLine."Quantity (Base)" - TransLine."Qty. Received (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Transfer Direction" := "Transfer Direction"::Inbound;
    END;

    PROCEDURE TransferFromReqLine@10(ReqLine@1000 : Record 246;AtLocation@1001 : Code[10];AtDate@1002 : Date;DeltaQtyBase@1003 : Decimal;RecID@1004 : RecordID);
    BEGIN
      IF ReqLine.Type <> ReqLine.Type::Item THEN
        EXIT;

      INIT;
      "Source Line ID" := RecID;
      "Item No." := ReqLine."No.";
      "Variant Code" := ReqLine."Variant Code";
      "Location Code" := AtLocation;
      "Availability Date" := AtDate;
      Type := Type::Plan;
      "Remaining Quantity (Base)" := DeltaQtyBase;
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ReqLine."Action Message";
      "Ref. Order No." := ReqLine."Ref. Order No.";
      "Ref. Order Type" := ReqLine."Ref. Order Type";
    END;

    PROCEDURE TransferFromForecast@11(ProdForecastEntry@1000 : Record 99000852;UnconsumedQtyBase@1001 : Decimal;ForecastOnLocation@1003 : Boolean);
    BEGIN
      INIT;
      RecRef.GETTABLE(ProdForecastEntry);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := ProdForecastEntry."Item No.";
      "Variant Code" := '';
      IF ForecastOnLocation THEN
        "Location Code" := ProdForecastEntry."Location Code"
      ELSE
        "Location Code" := '';
      "Availability Date" := ProdForecastEntry."Forecast Date";
      Type := Type::Forecast;
      IF ProdForecastEntry."Component Forecast" THEN
        "Forecast Type" := "Forecast Type"::Component
      ELSE
        "Forecast Type" := "Forecast Type"::Sales;
      "Remaining Quantity (Base)" := -UnconsumedQtyBase;
      "Orig. Quantity (Base)" := -ProdForecastEntry."Forecast Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromSalesBlanketOrder@12(SalesLine@1000 : Record 37;UnconsumedQtyBase@1003 : Decimal);
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      INIT;
      RecRef.GETTABLE(SalesLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Availability Date" := SalesLine."Shipment Date";
      Type := Type::"Blanket Sales Order";
      "Remaining Quantity (Base)" := -UnconsumedQtyBase;
      "Orig. Quantity (Base)" := -SalesLine."Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE PlanRevertEntry@13(InvtEventBuf@1000 : Record 5530;ParentActionMessage@1001 : Option);
    BEGIN
      Rec := InvtEventBuf;
      Type := Type::"Plan Revert";
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
      "Action Message" := ParentActionMessage;
      "Attached to Line No." := InvtEventBuf."Entry No.";
    END;

    PROCEDURE TransferFromAsmOrder@18(AssemblyHeader@1000 : Record 900);
    BEGIN
      INIT;
      Type := Type::"Assembly Order";
      RecRef.GETTABLE(AssemblyHeader);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := AssemblyHeader."Item No.";
      "Variant Code" := AssemblyHeader."Variant Code";
      "Location Code" := AssemblyHeader."Location Code";
      "Availability Date" := AssemblyHeader."Due Date";
      "Remaining Quantity (Base)" := AssemblyHeader."Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    PROCEDURE TransferFromAsmOrderLine@19(AssemblyLine@1000 : Record 901);
    BEGIN
      INIT;
      Type := Type::"Assembly Component";
      RecRef.GETTABLE(AssemblyLine);
      "Source Line ID" := RecRef.RECORDID;
      "Item No." := AssemblyLine."No.";
      "Variant Code" := AssemblyLine."Variant Code";
      "Location Code" := AssemblyLine."Location Code";
      "Availability Date" := AssemblyLine."Due Date";
      "Remaining Quantity (Base)" := -AssemblyLine."Remaining Quantity (Base)";
      Positive := NOT ("Remaining Quantity (Base)" < 0);
    END;

    BEGIN
    END.
  }
}

